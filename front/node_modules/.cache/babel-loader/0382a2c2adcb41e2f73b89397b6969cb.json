{"ast":null,"code":"/*!\n * Module requirements.\n */\nvar SchemaType = require('../schematype');\n\nvar CastError = SchemaType.CastError;\n\nvar handleBitwiseOperator = require('./operators/bitwise');\n\nvar MongooseError = require('../error');\n\nvar utils = require('../utils');\n\nvar Document;\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaNumber.schemaName = 'Number';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  return typeof value === 'number' || value instanceof Number;\n};\n/**\n * Sets a minimum number validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ n: { type: Number, min: 10 })\n *     var M = db.model('M', s)\n *     var m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     var min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     var schema = new Schema({ n: { type: Number, min: min })\n *     var M = mongoose.model('Measurement', schema);\n *     var s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.min = function (value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function (v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a maximum number validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ n: { type: Number, max: 10 })\n *     var M = db.model('M', s)\n *     var m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     var max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     var schema = new Schema({ n: { type: Number, max: max })\n *     var M = mongoose.model('Measurement', schema);\n *     var s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaNumber.prototype.max = function (value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function (v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\n\nSchemaNumber.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (typeof value === 'number') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('number', value, this.path);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  var val = value && typeof value._id !== 'undefined' ? value._id : // documents\n  value;\n\n  if (!isNaN(val)) {\n    if (val === null) {\n      return val;\n    }\n\n    if (val === '') {\n      return null;\n    }\n\n    if (typeof val === 'string' || typeof val === 'boolean') {\n      val = Number(val);\n    }\n\n    if (val instanceof Number) {\n      return val;\n    }\n\n    if (typeof val === 'number') {\n      return val;\n    }\n\n    if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n      return new Number(val);\n    }\n  }\n\n  throw new CastError('number', value, this.path);\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n\n  return val.map(function (m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $mod: handleArray\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Number.');\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = this._castForQuery($conditional);\n  return val;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaNumber;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/schema/number.js"],"names":["SchemaType","require","CastError","handleBitwiseOperator","MongooseError","utils","Document","SchemaNumber","key","options","call","schemaName","prototype","Object","create","constructor","checkRequired","value","doc","_isRef","Number","min","message","minValidator","validators","filter","v","validator","undefined","msg","messages","replace","push","type","max","maxValidator","cast","init","$__","wasPopulated","Buffer","isBuffer","isObject","path","$__fullPath","owner","ownerDocument","pop","populated","ret","model","val","_id","isNaN","toString","Array","isArray","handleSingle","handleArray","_this","map","m","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$gt","$gte","$lt","$lte","$mod","castForQuery","$conditional","handler","arguments","length","Error","_castForQuery","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module requirements.\n */\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar handleBitwiseOperator = require('./operators/bitwise');\nvar MongooseError = require('../error');\nvar utils = require('../utils');\nvar Document;\n\n/**\n * Number SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaNumber(key, options) {\n  SchemaType.call(this, key, options, 'Number');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaNumber.schemaName = 'Number';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaNumber.prototype = Object.create(SchemaType.prototype);\nSchemaNumber.prototype.constructor = SchemaNumber;\n\n/**\n * Check if the given value satisfies a required validator.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaNumber.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return typeof value === 'number' || value instanceof Number;\n};\n\n/**\n * Sets a minimum number validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ n: { type: Number, min: 10 })\n *     var M = db.model('M', s)\n *     var m = new M({ n: 9 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MIN} token which will be replaced with the invalid value\n *     var min = [10, 'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'];\n *     var schema = new Schema({ n: { type: Number, min: min })\n *     var M = mongoose.model('Measurement', schema);\n *     var s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) is beneath the limit (10).\n *     })\n *\n * @param {Number} value minimum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.min = function(value, message) {\n  if (this.minValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.Number.min;\n    msg = msg.replace(/{MIN}/, value);\n    this.validators.push({\n      validator: this.minValidator = function(v) {\n        return v == null || v >= value;\n      },\n      message: msg,\n      type: 'min',\n      min: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum number validator.\n *\n * ####Example:\n *\n *     var s = new Schema({ n: { type: Number, max: 10 })\n *     var M = db.model('M', s)\n *     var m = new M({ n: 11 })\n *     m.save(function (err) {\n *       console.error(err) // validator error\n *       m.n = 10;\n *       m.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAX} token which will be replaced with the invalid value\n *     var max = [10, 'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'];\n *     var schema = new Schema({ n: { type: Number, max: max })\n *     var M = mongoose.model('Measurement', schema);\n *     var s= new M({ n: 4 });\n *     s.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `n` (4) exceeds the limit (10).\n *     })\n *\n * @param {Number} maximum number\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaNumber.prototype.max = function(value, message) {\n  if (this.maxValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.Number.max;\n    msg = msg.replace(/{MAX}/, value);\n    this.validators.push({\n      validator: this.maxValidator = function(v) {\n        return v == null || v <= value;\n      },\n      message: msg,\n      type: 'max',\n      max: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Casts to number\n *\n * @param {Object} value value to cast\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaNumber.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (typeof value === 'number') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('number', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  var val = value && typeof value._id !== 'undefined' ?\n    value._id : // documents\n    value;\n\n  if (!isNaN(val)) {\n    if (val === null) {\n      return val;\n    }\n    if (val === '') {\n      return null;\n    }\n    if (typeof val === 'string' || typeof val === 'boolean') {\n      val = Number(val);\n    }\n    if (val instanceof Number) {\n      return val;\n    }\n    if (typeof val === 'number') {\n      return val;\n    }\n    if (val.toString && !Array.isArray(val) && val.toString() == Number(val)) {\n      return new Number(val);\n    }\n  }\n\n  throw new CastError('number', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.cast(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n  if (!Array.isArray(val)) {\n    return [this.cast(val)];\n  }\n  return val.map(function(m) {\n    return _this.cast(m);\n  });\n}\n\nSchemaNumber.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $mod: handleArray\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaNumber.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Number.');\n    }\n    return handler.call(this, val);\n  }\n  val = this._castForQuery($conditional);\n  return val;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaNumber;\n"]},"metadata":{},"sourceType":"script"}
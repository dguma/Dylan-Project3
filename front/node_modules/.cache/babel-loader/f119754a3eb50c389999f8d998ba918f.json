{"ast":null,"code":"/*\n * argv.js: Simple memory-based store for command-line arguments.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\nvar util = require('util'),\n    Memory = require('./memory').Memory; //\n// ### function Argv (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Argv nconf store, a simple abstraction\n// around the Memory store that can read command-line arguments.\n//\n\n\nvar Argv = exports.Argv = function (options, usage) {\n  Memory.call(this, options);\n  this.type = 'argv';\n  this.readOnly = true;\n  this.options = options || false;\n  this.usage = usage;\n}; // Inherit from the Memory store\n\n\nutil.inherits(Argv, Memory); //\n// ### function loadSync ()\n// Loads the data passed in from `process.argv` into this instance.\n//\n\nArgv.prototype.loadSync = function () {\n  this.loadArgv();\n  return this.store;\n}; //\n// ### function loadArgv ()\n// Loads the data passed in from the command-line arguments\n// into this instance.\n//\n\n\nArgv.prototype.loadArgv = function () {\n  var self = this,\n      yargs,\n      argv;\n  yargs = typeof this.options === 'object' ? require('yargs')(process.argv.slice(2)).options(this.options) : require('yargs')(process.argv.slice(2));\n\n  if (typeof this.usage === 'string') {\n    yargs.usage(this.usage);\n  }\n\n  argv = yargs.argv;\n\n  if (!argv) {\n    return;\n  }\n\n  this.readOnly = false;\n  Object.keys(argv).forEach(function (key) {\n    if (typeof argv[key] !== 'undefined') {\n      self.set(key, argv[key]);\n    }\n  });\n  this.showHelp = yargs.showHelp;\n  this.help = yargs.help;\n  this.readOnly = true;\n  return this.store;\n};","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/nconf/lib/nconf/stores/argv.js"],"names":["util","require","Memory","Argv","exports","options","usage","call","type","readOnly","inherits","prototype","loadSync","loadArgv","store","self","yargs","argv","process","slice","Object","keys","forEach","key","set","showHelp","help"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACIC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAP,CAAoBC,MADjC,C,CAGA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAACD,IAAR,GAAe,UAAUE,OAAV,EAAmBC,KAAnB,EAA0B;AAClDJ,EAAAA,MAAM,CAACK,IAAP,CAAY,IAAZ,EAAkBF,OAAlB;AAEA,OAAKG,IAAL,GAAgB,MAAhB;AACA,OAAKC,QAAL,GAAgB,IAAhB;AACA,OAAKJ,OAAL,GAAgBA,OAAO,IAAI,KAA3B;AACA,OAAKC,KAAL,GAAgBA,KAAhB;AACD,CAPD,C,CASA;;;AACAN,IAAI,CAACU,QAAL,CAAcP,IAAd,EAAoBD,MAApB,E,CAEA;AACA;AACA;AACA;;AACAC,IAAI,CAACQ,SAAL,CAAeC,QAAf,GAA0B,YAAY;AACpC,OAAKC,QAAL;AACA,SAAO,KAAKC,KAAZ;AACD,CAHD,C,CAKA;AACA;AACA;AACA;AACA;;;AACAX,IAAI,CAACQ,SAAL,CAAeE,QAAf,GAA0B,YAAY;AACpC,MAAIE,IAAI,GAAG,IAAX;AAAA,MACIC,KADJ;AAAA,MACWC,IADX;AAGAD,EAAAA,KAAK,GAAG,OAAO,KAAKX,OAAZ,KAAwB,QAAxB,GACJJ,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAO,CAACD,IAAR,CAAaE,KAAb,CAAmB,CAAnB,CAAjB,EAAwCd,OAAxC,CAAgD,KAAKA,OAArD,CADI,GAEJJ,OAAO,CAAC,OAAD,CAAP,CAAiBiB,OAAO,CAACD,IAAR,CAAaE,KAAb,CAAmB,CAAnB,CAAjB,CAFJ;;AAIA,MAAI,OAAO,KAAKb,KAAZ,KAAsB,QAA1B,EAAoC;AAAEU,IAAAA,KAAK,CAACV,KAAN,CAAY,KAAKA,KAAjB;AAAyB;;AAE/DW,EAAAA,IAAI,GAAGD,KAAK,CAACC,IAAb;;AAEA,MAAI,CAACA,IAAL,EAAW;AACT;AACD;;AAED,OAAKR,QAAL,GAAgB,KAAhB;AACAW,EAAAA,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,OAAlB,CAA0B,UAAUC,GAAV,EAAe;AACvC,QAAI,OAAON,IAAI,CAACM,GAAD,CAAX,KAAqB,WAAzB,EAAsC;AACpCR,MAAAA,IAAI,CAACS,GAAL,CAASD,GAAT,EAAcN,IAAI,CAACM,GAAD,CAAlB;AACD;AACF,GAJD;AAMA,OAAKE,QAAL,GAAgBT,KAAK,CAACS,QAAtB;AACA,OAAKC,IAAL,GAAgBV,KAAK,CAACU,IAAtB;AAEA,OAAKjB,QAAL,GAAgB,IAAhB;AACA,SAAO,KAAKK,KAAZ;AACD,CA5BD","sourcesContent":["/*\n * argv.js: Simple memory-based store for command-line arguments.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n    Memory = require('./memory').Memory;\n\n//\n// ### function Argv (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Argv nconf store, a simple abstraction\n// around the Memory store that can read command-line arguments.\n//\nvar Argv = exports.Argv = function (options, usage) {\n  Memory.call(this, options);\n\n  this.type     = 'argv';\n  this.readOnly = true;\n  this.options  = options || false;\n  this.usage    = usage;\n};\n\n// Inherit from the Memory store\nutil.inherits(Argv, Memory);\n\n//\n// ### function loadSync ()\n// Loads the data passed in from `process.argv` into this instance.\n//\nArgv.prototype.loadSync = function () {\n  this.loadArgv();\n  return this.store;\n};\n\n//\n// ### function loadArgv ()\n// Loads the data passed in from the command-line arguments\n// into this instance.\n//\nArgv.prototype.loadArgv = function () {\n  var self = this,\n      yargs, argv;\n\n  yargs = typeof this.options === 'object'\n    ? require('yargs')(process.argv.slice(2)).options(this.options)\n    : require('yargs')(process.argv.slice(2));\n\n  if (typeof this.usage === 'string') { yargs.usage(this.usage) }\n\n  argv = yargs.argv\n\n  if (!argv) {\n    return;\n  }\n\n  this.readOnly = false;\n  Object.keys(argv).forEach(function (key) {\n    if (typeof argv[key] !== 'undefined') {\n      self.set(key, argv[key]);\n    }\n  });\n\n  this.showHelp = yargs.showHelp\n  this.help     = yargs.help\n\n  this.readOnly = true;\n  return this.store;\n};\n"]},"metadata":{},"sourceType":"script"}
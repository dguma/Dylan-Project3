{"ast":null,"code":"/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\nvar common = require('../common'); //\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\n\n\nvar Memory = exports.Memory = function (options) {\n  options = options || {};\n  this.type = 'memory';\n  this.store = {};\n  this.mtimes = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n}; //\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\n\n\nMemory.prototype.get = function (key) {\n  var target = this.store,\n      path = common.path(key, this.logicalSeparator); //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  while (path.length > 0) {\n    key = path.shift();\n\n    if (target && target.hasOwnProperty(key)) {\n      target = target[key];\n      continue;\n    }\n\n    return undefined;\n  }\n\n  return target;\n}; //\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\n\n\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      path = common.path(key, this.logicalSeparator);\n\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    } else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  } //\n  // Update the `mtime` (modified time) of the key\n  //\n\n\n  this.mtimes[key] = Date.now(); //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  while (path.length > 1) {\n    key = path.shift();\n\n    if (!target[key] || typeof target[key] !== 'object') {\n      target[key] = {};\n    }\n\n    target = target[key];\n  } // Set the specified value in the nested JSON structure\n\n\n  key = path.shift();\n  target[key] = value;\n  return true;\n}; //\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\n\n\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      value = target,\n      path = common.path(key, this.logicalSeparator); //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n\n  delete this.mtimes[key]; //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n\n    target = value;\n  } // Delete the key from the nested JSON structure\n\n\n  key = path[i];\n  delete target[key];\n  return true;\n}; //\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\n\n\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  } //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n\n\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n\n  var self = this,\n      target = this.store,\n      path = common.path(key, this.logicalSeparator),\n      fullKey = key; //\n  // Update the `mtime` (modified time) of the key\n  //\n\n  this.mtimes[key] = Date.now(); //\n  // Scope into the object to get the appropriate nested context\n  //\n\n  while (path.length > 1) {\n    key = path.shift();\n\n    if (!target[key]) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  } // Set the specified value in the nested JSON structure\n\n\n  key = path.shift(); //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n}; //\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\n\n\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n\n  this.mtimes = {};\n  this.store = {};\n  return true;\n}; //\n// ### function loadSync\n// Returns the store managed by this instance\n//\n\n\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/nconf/lib/nconf/stores/memory.js"],"names":["common","require","Memory","exports","options","type","store","mtimes","readOnly","loadFrom","logicalSeparator","loadFilesSync","prototype","get","key","target","path","length","shift","hasOwnProperty","undefined","set","value","reset","Date","now","clear","i","merge","Array","isArray","self","fullKey","Object","keys","every","nested","keyed","loadSync"],"mappings":"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","sourcesContent":["/*\n * memory.js: Simple memory storage engine for nconf configuration(s)\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar common = require('../common');\n\n//\n// ### function Memory (options)\n// #### @options {Object} Options for this instance\n// Constructor function for the Memory nconf store which maintains\n// a nested json structure based on key delimiters `:`.\n//\n// e.g. `my:nested:key` ==> `{ my: { nested: { key: } } }`\n//\nvar Memory = exports.Memory = function (options) {\n  options       = options || {};\n  this.type     = 'memory';\n  this.store    = {};\n  this.mtimes   = {};\n  this.readOnly = false;\n  this.loadFrom = options.loadFrom || null;\n  this.logicalSeparator = options.logicalSeparator || ':';\n\n  if (this.loadFrom) {\n    this.store = common.loadFilesSync(this.loadFrom);\n  }\n};\n\n//\n// ### function get (key)\n// #### @key {string} Key to retrieve for this instance.\n// Retrieves the value for the specified key (if any).\n//\nMemory.prototype.get = function (key) {\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 0) {\n    key = path.shift();\n    if (target && target.hasOwnProperty(key)) {\n      target = target[key];\n      continue;\n    }\n    return undefined;\n  }\n\n  return target;\n};\n\n//\n// ### function set (key, value)\n// #### @key {string} Key to set in this instance\n// #### @value {literal|Object} Value for the specified key\n// Sets the `value` for the specified `key` in this instance.\n//\nMemory.prototype.set = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      path   = common.path(key, this.logicalSeparator);\n\n  if (path.length === 0) {\n    //\n    // Root must be an object\n    //\n    if (!value || typeof value !== 'object') {\n      return false;\n    }\n    else {\n      this.reset();\n      this.store = value;\n      return true;\n    }\n  }\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key] || typeof target[key] !== 'object') {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n  target[key] = value;\n  return true;\n};\n\n//\n// ### function clear (key)\n// #### @key {string} Key to remove from this instance\n// Removes the value for the specified `key` from this instance.\n//\nMemory.prototype.clear = function (key) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  var target = this.store,\n      value  = target,\n      path   = common.path(key, this.logicalSeparator);\n\n  //\n  // Remove the key from the set of `mtimes` (modified times)\n  //\n  delete this.mtimes[key];\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  for (var i = 0; i < path.length - 1; i++) {\n    key = path[i];\n    value = target[key];\n    if (typeof value !== 'function' && typeof value !== 'object') {\n      return false;\n    }\n    target = value;\n  }\n\n  // Delete the key from the nested JSON structure\n  key = path[i];\n  delete target[key];\n  return true;\n};\n\n//\n// ### function merge (key, value)\n// #### @key {string} Key to merge the value into\n// #### @value {literal|Object} Value to merge into the key\n// Merges the properties in `value` into the existing object value\n// at `key`. If the existing value `key` is not an Object, it will be\n// completely overwritten.\n//\nMemory.prototype.merge = function (key, value) {\n  if (this.readOnly) {\n    return false;\n  }\n\n  //\n  // If the key is not an `Object` or is an `Array`,\n  // then simply set it. Merging is for Objects.\n  //\n  if (typeof value !== 'object' || Array.isArray(value) || value === null) {\n    return this.set(key, value);\n  }\n\n  var self    = this,\n      target  = this.store,\n      path    = common.path(key, this.logicalSeparator),\n      fullKey = key;\n\n  //\n  // Update the `mtime` (modified time) of the key\n  //\n  this.mtimes[key] = Date.now();\n\n  //\n  // Scope into the object to get the appropriate nested context\n  //\n  while (path.length > 1) {\n    key = path.shift();\n    if (!target[key]) {\n      target[key] = {};\n    }\n\n    target = target[key];\n  }\n\n  // Set the specified value in the nested JSON structure\n  key = path.shift();\n\n  //\n  // If the current value at the key target is not an `Object`,\n  // or is an `Array` then simply override it because the new value\n  // is an Object.\n  //\n  if (typeof target[key] !== 'object' || Array.isArray(target[key])) {\n    target[key] = value;\n    return true;\n  }\n\n  return Object.keys(value).every(function (nested) {\n    return self.merge(common.keyed(self.logicalSeparator, fullKey, nested), value[nested]);\n  });\n};\n\n//\n// ### function reset (callback)\n// Clears all keys associated with this instance.\n//\nMemory.prototype.reset = function () {\n  if (this.readOnly) {\n    return false;\n  }\n\n  this.mtimes = {};\n  this.store  = {};\n  return true;\n};\n\n//\n// ### function loadSync\n// Returns the store managed by this instance\n//\nMemory.prototype.loadSync = function () {\n  return this.store || {};\n};\n"]},"metadata":{},"sourceType":"script"}
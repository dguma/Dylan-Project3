{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar EventEmitter = require('events').EventEmitter;\n\nvar MongooseError = require('./error');\n\nvar MixedSchema = require('./schema/mixed');\n\nvar Schema = require('./schema');\n\nvar ObjectExpectedError = require('./error/objectExpected');\n\nvar ObjectParameterError = require('./error/objectParameter');\n\nvar StrictModeError = require('./error/strict');\n\nvar ValidatorError = require('./schematype').ValidatorError;\n\nvar VirtualType = require('./virtualtype');\n\nvar utils = require('./utils');\n\nvar clone = utils.clone;\n\nvar isDefiningProjection = require('./services/projection/isDefiningProjection');\n\nvar isMongooseObject = utils.isMongooseObject;\n\nvar inspect = require('util').inspect;\n\nvar ValidationError = MongooseError.ValidationError;\n\nvar InternalCache = require('./internal');\n\nvar cleanModifiedSubpaths = require('./services/document/cleanModifiedSubpaths');\n\nvar compile = require('./services/document/compile').compile;\n\nvar deepEqual = utils.deepEqual;\n\nvar defineKey = require('./services/document/compile').defineKey;\n\nvar hooks = require('hooks-fixed');\n\nvar PromiseProvider = require('./promise_provider');\n\nvar DocumentArray;\nvar MongooseArray;\nvar Embedded;\n\nvar flatten = require('./services/common').flatten;\n\nvar mpath = require('mpath');\n\nvar idGetter = require('./plugins/idGetter');\n\nvar specialProperties = ['__proto__', 'constructor', 'prototype'];\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has was retreived from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  this.$__ = new InternalCache();\n  this.$__.emitter = new EventEmitter();\n  this.isNew = true;\n  this.errors = undefined;\n  this.$__.$options = options || {};\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  var schema = this.schema;\n\n  if (typeof fields === 'boolean') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options && schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  var required = schema.requiredPaths(true);\n\n  for (var i = 0; i < required.length; ++i) {\n    this.$__.activePaths.require(required[i]);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n  this._doc = this.$__buildDoc(obj, fields, skipId);\n\n  if (obj) {\n    if (obj instanceof Document) {\n      this.isNew = obj.isNew;\n    } // Skip set hooks\n\n\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n  }\n\n  this.$__._id = this._id;\n\n  if (!schema.options.strict && obj) {\n    var _this = this,\n        keys = Object.keys(this._doc);\n\n    keys.forEach(function (key) {\n      if (!(key in schema.tree)) {\n        defineKey(key, null, _this);\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\n\n\nutils.each(['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners', 'removeAllListeners', 'addListener'], function (emitterFn) {\n  Document.prototype[emitterFn] = function () {\n    return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n  };\n});\nDocument.prototype.constructor = Document;\n/**\n * The documents schema.\n *\n * @api public\n * @property schema\n */\n\nDocument.prototype.schema;\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n */\n\nDocument.prototype.isNew;\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n */\n\nDocument.prototype.id;\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n */\n\nDocument.prototype.errors;\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @return {Object}\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n */\n\nDocument.prototype.$__buildDoc = function (obj, fields, skipId) {\n  var doc = {};\n  var exclude = null;\n  var keys;\n  var ki;\n\n  var _this = this; // determine if this doc is a result of a query with\n  // excluded fields\n\n\n  if (fields && utils.getFunctionName(fields.constructor) === 'Object') {\n    keys = Object.keys(fields);\n    ki = keys.length;\n\n    if (ki === 1 && keys[0] === '_id') {\n      exclude = !!fields[keys[ki]];\n    } else {\n      while (ki--) {\n        // Does this projection explicitly define inclusion/exclusion?\n        // Explicitly avoid `$meta` and `$slice`\n        if (keys[ki] !== '_id' && isDefiningProjection(fields[keys[ki]])) {\n          exclude = !fields[keys[ki]];\n          break;\n        }\n      }\n    }\n  }\n\n  var paths = Object.keys(this.schema.paths);\n  var plen = paths.length;\n  var ii = 0;\n  var hasIncludedChildren = {};\n\n  if (exclude === false && fields) {\n    keys = Object.keys(fields);\n\n    for (var j = 0; j < keys.length; ++j) {\n      var parts = keys[j].split('.');\n      var c = [];\n\n      for (var k = 0; k < parts.length; ++k) {\n        c.push(parts[k]);\n        hasIncludedChildren[c.join('.')] = 1;\n      }\n    }\n  }\n\n  for (; ii < plen; ++ii) {\n    var p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    var type = this.schema.paths[p];\n    var path = p.split('.');\n    var len = path.length;\n    var last = len - 1;\n    var curPath = '';\n    var doc_ = doc;\n    var i = 0;\n    var included = false;\n\n    for (; i < len; ++i) {\n      var piece = path[i],\n          def;\n      curPath += (!curPath.length ? '' : '.') + piece; // support excluding intermediary levels\n\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i === last) {\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            def = type.getDefault(_this, false);\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n\n              _this.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            def = type.getDefault(_this, false);\n\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n\n              _this.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          def = type.getDefault(_this, false);\n\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n\n            _this.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  return doc;\n};\n/*!\n * Converts to POJO when you use the document for querying\n */\n\n\nDocument.prototype.toBSON = function () {\n  return this.toObject({\n    transform: false,\n    virtuals: false,\n    _skipDepopulateTopLevel: true,\n    depopulate: true,\n    flattenDecimals: false\n  });\n};\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb.\n *\n * @param {Object} doc document returned by mongo\n * @param {Function} fn callback\n * @api public\n */\n\n\nDocument.prototype.init = function (doc, opts, fn) {\n  // do not prefix this method with $__ since its\n  // used by public hooks\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.isNew = false;\n  this.$init = true; // handle docs with populated paths\n  // If doc._id is not null or undefined\n\n  if (doc._id !== null && doc._id !== undefined && opts && opts.populated && opts.populated.length) {\n    var id = String(doc._id);\n\n    for (var i = 0; i < opts.populated.length; ++i) {\n      var item = opts.populated[i];\n\n      if (item.isVirtual) {\n        this.populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.populated(item.path, item._docs[id], item);\n      }\n    }\n  }\n\n  init(this, doc, this._doc);\n  this.emit('init', this);\n  this.constructor.emit('init', this);\n  this.$__._id = this._id;\n\n  if (fn) {\n    fn(null);\n  }\n\n  return this;\n};\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\n\nfunction init(self, obj, doc, prefix) {\n  prefix = prefix || '';\n  var keys = Object.keys(obj);\n  var len = keys.length;\n  var schema;\n  var path;\n  var i;\n  var index = 0;\n\n  if (self.schema.options.retainKeyOrder) {\n    while (index < len) {\n      _init(index++);\n    }\n  } else {\n    while (len--) {\n      _init(len);\n    }\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.schema.path(path); // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n\n    if (self.schema.$isRootDiscriminator && !self.isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isObject(obj[i]) && (!obj[i].constructor || utils.getFunctionName(obj[i].constructor) === 'Object')) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n\n      init(self, obj[i], doc[i], path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n    } else {\n      if (obj[i] === null) {\n        doc[i] = null;\n      } else if (obj[i] !== undefined) {\n        if (schema) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      } // mark as hydrated\n\n\n      if (!self.isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n/*!\n * Set up middleware support\n */\n\n\nfor (var k in hooks) {\n  if (k === 'post') {\n    Document.prototype['$' + k] = Document['$' + k] = hooks[k];\n  } else if (k === 'pre') {\n    Document.prototype.$pre = Document.$pre = function mongoosePreWrapper() {\n      if (arguments[0] === 'set') {\n        // Make set hooks also work for `$set`\n        var $setArgs = Array.prototype.slice.call(arguments);\n        $setArgs[0] = '$set';\n        hooks.pre.apply(this, $setArgs);\n      }\n\n      return hooks.pre.apply(this, arguments);\n    };\n  } else {\n    Document.prototype[k] = Document[k] = hooks[k];\n  }\n}\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n */\n\n\nDocument.prototype.update = function update() {\n  var args = utils.args(arguments);\n  args.unshift({\n    _id: this._id\n  });\n  return this.constructor.update.apply(this.constructor, args);\n};\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @api public\n */\n\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (type && utils.getFunctionName(type.constructor) === 'Object') {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  var merge = options.merge;\n  var adhoc = type && type !== true;\n  var constructing = type === true;\n  var adhocs;\n  var strict = 'strict' in options ? options.strict : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = Schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  if (typeof path !== 'string') {\n    // new Document({ key: val })\n    if (path === null || path === void 0) {\n      var _ = path;\n      path = val;\n      val = _;\n    } else {\n      var prefix = val ? val + '.' : '';\n\n      if (path instanceof Document) {\n        if (path.$__isNested) {\n          path = path.toObject();\n        } else {\n          path = path._doc;\n        }\n      }\n\n      var keys = Object.keys(path);\n      var len = keys.length;\n      var i = 0;\n      var pathtype;\n      var key;\n\n      if (len === 0 && !this.schema.options.minimize) {\n        if (val) {\n          this.$set(val, {});\n        }\n\n        return this;\n      }\n\n      if (this.schema.options.retainKeyOrder) {\n        while (i < len) {\n          _handleIndex.call(this, i++);\n        }\n      } else {\n        while (len--) {\n          _handleIndex.call(this, len);\n        }\n      }\n\n      return this;\n    }\n  }\n\n  function _handleIndex(i) {\n    key = keys[i];\n    var pathName = prefix + key;\n    pathtype = this.schema.pathType(pathName);\n\n    if (path[key] !== null && path[key] !== void 0 // need to know if plain object - no Buffer, ObjectId, ref, etc\n    && utils.isObject(path[key]) && (!path[key].constructor || utils.getFunctionName(path[key].constructor) === 'Object') && pathtype !== 'virtual' && pathtype !== 'real' && !(this.$__path(pathName) instanceof MixedSchema) && !(this.schema.paths[pathName] && this.schema.paths[pathName].options && this.schema.paths[pathName].options.ref)) {\n      this.$set(path[key], prefix + key, constructing);\n    } else if (strict) {\n      // Don't overwrite defaults with undefined keys (gh-3981)\n      if (constructing && path[key] === void 0 && this.get(key) !== void 0) {\n        return;\n      }\n\n      if (pathtype === 'real' || pathtype === 'virtual') {\n        // Check for setting single embedded schema to document (gh-3535)\n        var p = path[key];\n\n        if (this.schema.paths[pathName] && this.schema.paths[pathName].$isSingleNested && path[key] instanceof Document) {\n          p = p.toObject({\n            virtuals: false,\n            transform: false\n          });\n        }\n\n        this.$set(prefix + key, p, constructing);\n      } else if (pathtype === 'nested' && path[key] instanceof Document) {\n        this.$set(prefix + key, path[key].toObject({\n          transform: false\n        }), constructing);\n      } else if (strict === 'throw') {\n        if (pathtype === 'nested') {\n          throw new ObjectExpectedError(key, path[key]);\n        } else {\n          throw new StrictModeError(key);\n        }\n      }\n    } else if (path[key] !== void 0) {\n      this.$set(prefix + key, path[key], constructing);\n    }\n  }\n\n  var pathType = this.schema.pathType(path);\n\n  if (pathType === 'nested' && val) {\n    if (utils.isObject(val) && (!val.constructor || utils.getFunctionName(val.constructor) === 'Object')) {\n      if (!merge) {\n        this.setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      }\n\n      if (Object.keys(val).length === 0) {\n        this.setValue(path, {});\n        this.markModified(path);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        this.$set(val, path, constructing);\n      }\n\n      return this;\n    }\n\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  var schema;\n  var parts = path.split('.');\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    var mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      var subpath = parts.slice(0, i + 1).join('.');\n      schema = this.schema.path(subpath);\n\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      } // If path is underneath a virtual, bypass everything and just set it.\n\n\n      if (i + 1 < parts.length && this.schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n    }\n\n    if (!mixed) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  } // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n\n\n  var cur = this._doc;\n  var curPath = '';\n\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n\n    if (!cur) {\n      this.$set(curPath, {}); // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for v5.\n\n      if (!this.isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n\n      cur = this.getValue(curPath);\n    }\n  }\n\n  var pathToMark; // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      subpath = parts.slice(0, i + 1).join('.');\n\n      if (this.isDirectModified(subpath) // earlier prefixes that are already\n      // marked as dirty have precedence\n      || this.get(subpath) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  } // if this doc is being constructed we should not trigger getters\n\n\n  var priorVal = constructing ? undefined : this.getValue(path);\n\n  if (!schema) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n    return this;\n  }\n\n  var shouldSet = true;\n\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    var didPopulate = false;\n\n    if (schema.options && schema.options.ref && val instanceof Document && (schema.options.ref === val.constructor.modelName || schema.options.ref === val.constructor.baseModelName)) {\n      if (this.ownerDocument) {\n        this.ownerDocument().populated(this.$__fullPath(path), val._id, {\n          model: val.constructor\n        });\n      } else {\n        this.populated(path, val._id, {\n          model: val.constructor\n        });\n      }\n\n      didPopulate = true;\n    }\n\n    var popOpts;\n\n    if (schema.options && Array.isArray(schema.options[this.schema.options.typeKey]) && schema.options[this.schema.options.typeKey].length && schema.options[this.schema.options.typeKey][0].ref && Array.isArray(val) && val.length > 0 && val[0] instanceof Document && val[0].constructor.modelName && (schema.options[this.schema.options.typeKey][0].ref === val[0].constructor.baseModelName || schema.options[this.schema.options.typeKey][0].ref === val[0].constructor.modelName)) {\n      if (this.ownerDocument) {\n        popOpts = {\n          model: val[0].constructor\n        };\n        this.ownerDocument().populated(this.$__fullPath(path), val.map(function (v) {\n          return v._id;\n        }), popOpts);\n      } else {\n        popOpts = {\n          model: val[0].constructor\n        };\n        this.populated(path, val.map(function (v) {\n          return v._id;\n        }), popOpts);\n      }\n\n      didPopulate = true;\n    }\n\n    var setterContext = constructing && this.$__.$options.priorDoc ? this.$__.$options.priorDoc : this;\n    val = schema.applySetters(val, setterContext, false, priorVal);\n\n    if (!didPopulate && this.$__.populated) {\n      delete this.$__.populated[path];\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    this.invalidate(path, new MongooseError.CastError(schema.instance, val, path, e));\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n */\n\n\nDocument.prototype.set = Document.prototype.$set;\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n */\n\nDocument.prototype.$__shouldModify = function (pathToMark, path, constructing, parts, schema, val, priorVal) {\n  if (this.isNew) {\n    return true;\n  }\n\n  if (undefined === val && !this.isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (undefined === val && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  } // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n\n\n  if (this.populated(path) && val instanceof Document && deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || this.get(path))) {\n    return true;\n  }\n\n  if (!constructing && val !== null && val !== undefined && path in this.$__.activePaths.states.default && deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n\n  return false;\n};\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n */\n\n\nDocument.prototype.$__set = function (pathToMark, path, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/embedded');\n  var shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts, schema, val, priorVal);\n\n  var _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark); // handle directly setting arrays (gh-1126)\n\n    MongooseArray || (MongooseArray = require('./types/array'));\n\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val); // Update embedded document parent references (gh-5189)\n\n\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function (item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      } // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n\n\n      this.$__.activePaths.forEach(function (modifiedPath) {\n        if (modifiedPath.indexOf(path + '.') === 0) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  }\n\n  var obj = this._doc;\n  var i = 0;\n  var l = parts.length;\n  var cur = '';\n\n  for (; i < l; i++) {\n    var next = i + 1;\n    var last = next === l;\n    cur += cur ? '.' + parts[i] : parts[i];\n\n    if (specialProperties.indexOf(parts[i]) !== -1) {\n      return;\n    }\n\n    if (last) {\n      obj[parts[i]] = val;\n    } else {\n      if (obj[parts[i]] && utils.getFunctionName(obj[parts[i]].constructor) === 'Object') {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\n\nDocument.prototype.getValue = function (path) {\n  return utils.getValue(path, this._doc);\n};\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\n\nDocument.prototype.setValue = function (path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @api public\n */\n\n\nDocument.prototype.get = function (path, type) {\n  var adhoc;\n\n  if (type) {\n    adhoc = Schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  var schema = this.$__path(path) || this.schema.virtualpath(path);\n  var pieces = path.split('.');\n  var obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    if (schema.getters.length === 0) {\n      return void 0;\n    }\n\n    return schema.applyGetters(null, this);\n  }\n\n  for (var i = 0, l = pieces.length; i < l; i++) {\n    obj = obj === null || obj === void 0 ? undefined : obj[pieces[i]];\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema) {\n    obj = schema.applyGetters(obj, this);\n  }\n\n  return obj;\n};\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n */\n\n\nDocument.prototype.$__path = function (path) {\n  var adhocs = this.$__.adhocPaths,\n      adhocType = adhocs && adhocs[path];\n\n  if (adhocType) {\n    return adhocType;\n  }\n\n  return this.schema.path(path);\n};\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\n\nDocument.prototype.markModified = function (path, scope) {\n  this.$__.activePaths.modify(path);\n\n  if (scope != null && !this.ownerDocument) {\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save() // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\n\nDocument.prototype.unmarkModified = function (path) {\n  this.$__.activePaths.init(path);\n  delete this.$__.pathsToScopes[path];\n};\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save() // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\n\nDocument.prototype.$ignore = function (path) {\n  this.$__.activePaths.ignore(path);\n};\n/**\n * Returns the list of paths that have been modified.\n *\n * @return {Array}\n * @api public\n */\n\n\nDocument.prototype.modifiedPaths = function () {\n  var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n  return directModifiedPaths.reduce(function (list, path) {\n    var parts = path.split('.');\n    return list.concat(parts.reduce(function (chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function (chain) {\n      return list.indexOf(chain) === -1;\n    }));\n  }, []);\n};\n/**\n * Returns true if this document was modified, else false.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isModified = function (paths) {\n  if (paths) {\n    if (!Array.isArray(paths)) {\n      paths = paths.split(' ');\n    }\n\n    var modified = this.modifiedPaths();\n    var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    var isModifiedChild = paths.some(function (path) {\n      return !!~modified.indexOf(path);\n    });\n    return isModifiedChild || paths.some(function (path) {\n      return directModifiedPaths.some(function (mod) {\n        return mod === path || path.indexOf(mod + '.') === 0;\n      });\n    });\n  }\n\n  return this.$__.activePaths.some('modify');\n};\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     var m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.$isDefault = function (path) {\n  return path in this.$__.activePaths.states.default;\n};\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       product.isDeleted(); // true\n *       product.remove(); // no-op, doesn't send anything to the db\n *\n *       product.isDeleted(false);\n *       product.isDeleted(); // false\n *       product.remove(); // will execute a remove against the db\n *     })\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @api public\n */\n\n\nDocument.prototype.$isDeleted = function (val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isDirectModified = function (path) {\n  return path in this.$__.activePaths.states.modify;\n};\n/**\n * Checks if `path` was initialized.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isInit = function (path) {\n  return path in this.$__.activePaths.states.init;\n};\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     Thing.findOne().select('name').exec(function (err, doc) {\n *        doc.isSelected('name') // true\n *        doc.isSelected('age')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    var paths = Object.keys(this.$__.selected);\n    var i = paths.length;\n    var inclusive = null;\n    var cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    i = paths.length;\n    var pathDot = path + '.';\n\n    while (i--) {\n      cur = paths[i];\n\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (cur.indexOf(pathDot) === 0) {\n        return inclusive || cur !== pathDot;\n      }\n\n      if (pathDot.indexOf(cur + '.') === 0) {\n        return inclusive;\n      }\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    var paths = Object.keys(this.$__.selected);\n    var i = paths.length;\n    var inclusive = null;\n    var cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Object} optional options internal options\n * @param {Function} callback optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\n\nDocument.prototype.validate = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  this.$__validate(callback || function () {});\n};\n/*!\n * ignore\n */\n\n\nfunction _getPathsToValidate(doc) {\n  var i;\n  var len; // only validate required fields when necessary\n\n  var paths = Object.keys(doc.$__.activePaths.states.require).filter(function (path) {\n    if (!doc.isSelected(path) && !doc.isModified(path)) {\n      return false;\n    }\n\n    var p = doc.schema.path(path);\n\n    if (typeof p.originalRequiredValue === 'function') {\n      return p.originalRequiredValue.call(doc);\n    }\n\n    return true;\n  });\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.init));\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.modify));\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.default));\n\n  if (!doc.ownerDocument) {\n    var subdocs = doc.$__getAllSubdocs();\n    var subdoc;\n    len = subdocs.length;\n\n    for (i = 0; i < len; ++i) {\n      subdoc = subdocs[i];\n\n      if (doc.isModified(subdoc.$basePath) && !doc.isDirectModified(subdoc.$basePath)) {\n        // Remove child paths for now, because we'll be validating the whole\n        // subdoc\n        paths = paths.filter(function (p) {\n          return p != null && p.indexOf(subdoc.$basePath + '.') !== 0;\n        });\n        paths.push(subdoc.$basePath);\n      }\n    }\n  } // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n\n\n  len = paths.length;\n\n  for (i = 0; i < len; ++i) {\n    var path = paths[i];\n\n    var _pathType = doc.schema.path(path);\n\n    if (!_pathType || !_pathType.$isMongooseArray || _pathType.$isMongooseDocumentArray) {\n      continue;\n    }\n\n    var val = doc.getValue(path);\n\n    if (val) {\n      var numElements = val.length;\n\n      for (var j = 0; j < numElements; ++j) {\n        paths.push(path + '.' + j);\n      }\n    }\n  }\n\n  var flattenOptions = {\n    skipArrays: true\n  };\n  len = paths.length;\n\n  for (i = 0; i < len; ++i) {\n    var pathToCheck = paths[i];\n\n    if (doc.schema.nested[pathToCheck]) {\n      var _v = doc.getValue(pathToCheck);\n\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({\n          transform: false\n        });\n      }\n\n      var flat = flatten(_v, '', flattenOptions);\n\n      var _subpaths = Object.keys(flat).map(function (p) {\n        return pathToCheck + '.' + p;\n      });\n\n      paths = paths.concat(_subpaths);\n    }\n  }\n\n  return paths;\n}\n/*!\n * ignore\n */\n\n\nDocument.prototype.$__validate = function (callback) {\n  var _this = this;\n\n  var _complete = function () {\n    var err = _this.$__.validationError;\n    _this.$__.validationError = undefined;\n\n    _this.emit('validate', _this);\n\n    _this.constructor.emit('validate', _this);\n\n    if (err) {\n      for (var key in err.errors) {\n        // Make sure cast errors persist\n        if (!_this.__parent && err.errors[key] instanceof MongooseError.CastError) {\n          _this.invalidate(key, err.errors[key]);\n        }\n      }\n\n      return err;\n    }\n  }; // only validate required fields when necessary\n\n\n  var paths = _getPathsToValidate(this);\n\n  if (paths.length === 0) {\n    return process.nextTick(function () {\n      var error = _complete();\n\n      if (error) {\n        return _this.schema.s.hooks.execPost('validate:error', _this, [_this], {\n          error: error\n        }, function (error) {\n          callback(error);\n        });\n      }\n\n      callback();\n    });\n  }\n\n  var validated = {};\n  var total = 0;\n\n  var complete = function () {\n    var error = _complete();\n\n    if (error) {\n      return _this.schema.s.hooks.execPost('validate:error', _this, [_this], {\n        error: error\n      }, function (error) {\n        callback(error);\n      });\n    }\n\n    callback();\n  };\n\n  var validatePath = function (path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n    process.nextTick(function () {\n      var p = _this.schema.path(path);\n\n      if (!p) {\n        return --total || complete();\n      } // If user marked as invalid or there was a cast error, don't validate\n\n\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      var val = _this.getValue(path);\n\n      var scope = path in _this.$__.pathsToScopes ? _this.$__.pathsToScopes[path] : _this;\n      p.doValidate(val, function (err) {\n        if (err) {\n          _this.invalidate(path, err, undefined, true);\n        }\n\n        --total || complete();\n      }, scope);\n    });\n  };\n\n  var numPaths = paths.length;\n\n  for (var i = 0; i < numPaths; ++i) {\n    validatePath(paths[i]);\n  }\n};\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     var err = doc.validateSync();\n *     if ( err ){\n *       handleError( err );\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @return {MongooseError|undefined} MongooseError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\n\nDocument.prototype.validateSync = function (pathsToValidate) {\n  var _this = this;\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  } // only validate required fields when necessary\n\n\n  var paths = _getPathsToValidate(this);\n\n  if (pathsToValidate && pathsToValidate.length) {\n    var tmp = [];\n\n    for (var i = 0; i < paths.length; ++i) {\n      if (pathsToValidate.indexOf(paths[i]) !== -1) {\n        tmp.push(paths[i]);\n      }\n    }\n\n    paths = tmp;\n  }\n\n  var validating = {};\n  paths.forEach(function (path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    var p = _this.schema.path(path);\n\n    if (!p) {\n      return;\n    }\n\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    var val = _this.getValue(path);\n\n    var err = p.doValidateSync(val, _this);\n\n    if (err) {\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n  var err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n\n  _this.emit('validate', _this);\n\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (var key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\n\nDocument.prototype.invalidate = function (path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @method $markValid\n * @receiver Document\n */\n\n\nDocument.prototype.$markValid = function (path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n/**\n * Saves this document.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product.save(function (err, product, numAffected) {\n *       if (err) ..\n *     })\n *\n * The callback will receive three parameters\n *\n * 1. `err` if an error occurred\n * 2. `product` which is the saved `product`\n * 3. `numAffected` will be 1 when the document was successfully persisted to MongoDB, otherwise 0. Unless you tweak mongoose's internals, you don't need to worry about checking this parameter for errors - checking `err` is sufficient to make sure your document was properly saved.\n *\n * As an extra measure of flow control, save will return a Promise.\n * ####Example:\n *     product.save().then(function(product) {\n *        ...\n *     });\n *\n * For legacy reasons, mongoose stores object keys in reverse order on initial\n * save. That is, `{ a: 1, b: 2 }` will be saved as `{ b: 2, a: 1 }` in\n * MongoDB. To override this behavior, set\n * [the `toObject.retainKeyOrder` option](http://mongoosejs.com/docs/api.html#document_Document-toObject)\n * to true on your schema.\n *\n * @param {Object} [options] options optional options\n * @param {Object} [options.safe] overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe)\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Function} [fn] optional callback\n * @method save\n * @return {Promise} Promise\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String} path the field to check\n * @method $isValid\n * @api private\n * @receiver Document\n */\n\n\nDocument.prototype.$isValid = function (path) {\n  return !this.$__.validationError || !this.$__.validationError.errors[path];\n};\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n */\n\n\nDocument.prototype.$__reset = function reset() {\n  var _this = this;\n\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  this.$__.activePaths.map('init', 'modify', function (i) {\n    return _this.getValue(i);\n  }).filter(function (val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  }).forEach(function (array) {\n    var i = array.length;\n\n    while (i--) {\n      var doc = array[i];\n\n      if (!doc) {\n        continue;\n      }\n\n      doc.$__reset();\n    }\n  });\n  this.$__.activePaths.map('init', 'modify', function (i) {\n    return _this.getValue(i);\n  }).filter(function (val) {\n    return val && val.$isSingleNested;\n  }).forEach(function (doc) {\n    doc.$__reset();\n  }); // clear atomics\n\n  this.$__dirty().forEach(function (dirt) {\n    var type = dirt.value;\n\n    if (type && type._atomics) {\n      type._atomics = {};\n    }\n  }); // Clear 'dirty' cache\n\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.errors = undefined;\n  _this = this;\n  this.schema.requiredPaths().forEach(function (path) {\n    _this.$__.activePaths.require(path);\n  });\n  return this;\n};\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n */\n\n\nDocument.prototype.$__dirty = function () {\n  var _this = this;\n\n  var all = this.$__.activePaths.map('modify', function (path) {\n    return {\n      path: path,\n      value: _this.getValue(path),\n      schema: _this.$__path(path)\n    };\n  }); // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n\n  all = all.concat(this.$__.activePaths.map('default', function (path) {\n    if (path === '_id' || !_this.getValue(path)) {\n      return;\n    }\n\n    return {\n      path: path,\n      value: _this.getValue(path),\n      schema: _this.$__path(path)\n    };\n  })); // Sort dirty paths in a flat hierarchy.\n\n  all.sort(function (a, b) {\n    return a.path < b.path ? -1 : a.path > b.path ? 1 : 0;\n  }); // Ignore \"foo.a\" if \"foo\" is dirty already.\n\n  var minimal = [],\n      lastPath,\n      top;\n  all.forEach(function (item) {\n    if (!item) {\n      return;\n    }\n\n    if (item.path.indexOf(lastPath) !== 0) {\n      lastPath = item.path + '.';\n      minimal.push(item);\n      top = item;\n    } else {\n      // special case for top level MongooseArrays\n      if (top.value && top.value._atomics && top.value.hasAtomics()) {\n        // the `top` array itself and a sub path of `top` are being modified.\n        // the only way to honor all of both modifications is through a $set\n        // of entire array.\n        top.value._atomics = {};\n        top.value._atomics.$set = top.value;\n      }\n    }\n  });\n  top = lastPath = null;\n  return minimal;\n};\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n */\n\n\nDocument.prototype.$__setSchema = function (schema) {\n  schema.plugin(idGetter, {\n    deduplicate: true\n  });\n  compile(schema.tree, this, undefined, schema.options);\n  this.schema = schema;\n};\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n */\n\n\nDocument.prototype.$__getArrayPathsToValidate = function () {\n  DocumentArray || (DocumentArray = require('./types/documentarray')); // validate all document arrays.\n\n  return this.$__.activePaths.map('init', 'modify', function (i) {\n    return this.getValue(i);\n  }.bind(this)).filter(function (val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  }).reduce(function (seed, array) {\n    return seed.concat(array);\n  }, []).filter(function (doc) {\n    return doc;\n  });\n};\n/**\n * Get all subdocs (by bfs)\n *\n * @api private\n * @method $__getAllSubdocs\n * @memberOf Document\n */\n\n\nDocument.prototype.$__getAllSubdocs = function () {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  Embedded = Embedded || require('./types/embedded');\n\n  function docReducer(doc, seed, path) {\n    var val = doc[path];\n\n    if (val instanceof Embedded) {\n      seed.push(val);\n    }\n\n    if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function (seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    }\n\n    if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n\n        seed = Object.keys(doc._doc).reduce(function (seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n      });\n    } else if (val instanceof Document && val.$__isNested) {\n      if (val) {\n        seed = Object.keys(val).reduce(function (seed, path) {\n          return docReducer(val, seed, path);\n        }, seed);\n      }\n    }\n\n    return seed;\n  }\n\n  var _this = this;\n\n  var subDocs = Object.keys(this._doc).reduce(function (seed, path) {\n    return docReducer(_this, seed, path);\n  }, []);\n  return subDocs;\n};\n/*!\n * Runs queued functions\n */\n\n\nfunction applyQueue(doc) {\n  var q = doc.schema && doc.schema.callQueue;\n\n  if (!q.length) {\n    return;\n  }\n\n  var pair;\n\n  for (var i = 0; i < q.length; ++i) {\n    pair = q[i];\n\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  } else if (this.listeners && this.listeners('error').length) {\n    this.emit('error', err);\n  }\n};\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n */\n\n\nDocument.prototype.$toObject = function (options, json) {\n  var defaultOptions = {\n    transform: true,\n    json: json,\n    retainKeyOrder: this.schema.options.retainKeyOrder,\n    flattenDecimals: true\n  }; // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n\n  if (options && options.depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, options);\n  } // When internally saving this document we always pass options,\n  // bypassing the custom schema options.\n\n\n  if (!(options && utils.getFunctionName(options.constructor) === 'Object') || options && options._useSchemaOptions) {\n    if (json) {\n      options = this.schema.options.toJSON ? clone(this.schema.options.toJSON) : {};\n      options.json = true;\n      options._useSchemaOptions = true;\n    } else {\n      options = this.schema.options.toObject ? clone(this.schema.options.toObject) : {};\n      options.json = false;\n      options._useSchemaOptions = true;\n    }\n  }\n\n  for (var key in defaultOptions) {\n    if (options[key] === undefined) {\n      options[key] = defaultOptions[key];\n    }\n  }\n\n  'minimize' in options || (options.minimize = this.schema.options.minimize); // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n\n  var originalTransform = options.transform;\n  options._isNested = true;\n  var ret = clone(this._doc, options) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, 'paths', options); // applyGetters for paths will add nested empty objects;\n    // if minimize is set, we need to remove them.\n\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || options.getters && options.virtuals !== false) {\n    applyGetters(this, ret, 'virtuals', options);\n  }\n\n  if (options.versionKey === false && this.schema.options.versionKey) {\n    delete ret[this.schema.options.versionKey];\n  }\n\n  var transform = options.transform; // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n\n  if (transform === true || this.schema.options.toObject && transform) {\n    var opts = options.json ? this.schema.options.toJSON : this.schema.options.toObject;\n\n    if (opts) {\n      transform = typeof options.transform === 'function' ? options.transform : opts.transform;\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    var xformed = transform(this, ret, options);\n\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n/**\n * Converts this document into a plain javascript object, ready for storage in MongoDB.\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters)\n * - `virtuals` apply virtual getters (can override `getters` option)\n * - `minimize` remove empty objects (defaults to true)\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs (defaults to false)\n * - `versionKey` whether to include the version key (defaults to true)\n * - `retainKeyOrder` keep the order of object keys. If this is set to true, `Object.keys(new Doc({ a: 1, b: 2}).toObject())` will always produce `['a', 'b']` (defaults to false)\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     var doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * Transforms are applied _only to the document and are not applied to sub-documents_.\n *\n * Transforms, like all of these options, are also available for `toJSON`.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n */\n\n\nDocument.prototype.toObject = function (options) {\n  return this.$toObject(options);\n};\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\n\nfunction minimize(obj) {\n  var keys = Object.keys(obj),\n      i = keys.length,\n      hasKeys,\n      key,\n      val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys ? obj : undefined;\n}\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @param {String} type either `virtuals` or `paths`\n * @return {Object} `json`\n */\n\n\nfunction applyGetters(self, json, type, options) {\n  var schema = self.schema;\n  var paths = Object.keys(schema[type]);\n  var i = paths.length;\n  var numPaths = i;\n  var path;\n  var cur = self._doc;\n  var v;\n\n  if (!cur) {\n    return json;\n  }\n\n  if (type === 'virtuals') {\n    for (i = 0; i < numPaths; ++i) {\n      path = paths[i];\n      parts = path.split('.');\n      v = clone(self.get(path), options);\n\n      if (v === void 0) {\n        continue;\n      }\n\n      plen = parts.length;\n      cur = json;\n\n      for (var j = 0; j < plen - 1; ++j) {\n        cur[parts[j]] = cur[parts[j]] || {};\n        cur = cur[parts[j]];\n      }\n\n      cur[parts[plen - 1]] = v;\n    }\n\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n    var parts = path.split('.');\n    var plen = parts.length;\n    var last = plen - 1;\n    var branch = json;\n    var part;\n    cur = self._doc;\n\n    for (var ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n\n      if (ii === last) {\n        branch[part] = clone(self.get(path), options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n\n      cur = v;\n    }\n  }\n\n  return json;\n}\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @api public\n */\n\n\nDocument.prototype.toJSON = function (options) {\n  return this.$toObject(options, true);\n};\n/**\n * Helper for console.log\n *\n * @api public\n */\n\n\nDocument.prototype.inspect = function (options) {\n  var isPOJO = options && utils.getFunctionName(options.constructor) === 'Object';\n  var opts;\n\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n    opts.retainKeyOrder = true;\n  }\n\n  return this.toObject(opts);\n};\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n */\n\n\nDocument.prototype.toString = function () {\n  return inspect(this.inspect());\n};\n/**\n * Returns true if the Document stores the same data as doc.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n */\n\n\nDocument.prototype.equals = function (doc) {\n  if (!doc) {\n    return false;\n  }\n\n  var tid = this.get('_id');\n  var docid = doc.get ? doc.get('_id') : doc;\n\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n\n  return tid && tid.equals ? tid.equals(docid) : tid === docid;\n};\n/**\n * Populates document references, executing the `callback` when complete.\n * If you want to use promises instead, use this function with\n * [`execPopulate()`](#document_Document-execPopulate)\n *\n * ####Example:\n *\n *     doc\n *     .populate('company')\n *     .populate({\n *       path: 'notes',\n *       match: /airline/,\n *       select: 'text',\n *       model: 'modelName'\n *       options: opts\n *     }, function (err, user) {\n *       assert(doc._id === user._id) // the document itself is passed\n *     })\n *\n *     // summary\n *     doc.populate(path)                   // not executed\n *     doc.populate(options);               // not executed\n *     doc.populate(path, callback)         // executed\n *     doc.populate(options, callback);     // executed\n *     doc.populate(callback);              // executed\n *     doc.populate(options).execPopulate() // executed, returns promise\n *\n *\n * ####NOTE:\n *\n * Population does not occur unless a `callback` is passed *or* you explicitly\n * call `execPopulate()`.\n * Passing the same path a second time will overwrite the previous path options.\n * See [Model.populate()](#model_Model.populate) for explaination of options.\n *\n * @see Model.populate #model_Model.populate\n * @see Document.execPopulate #document_Document-execPopulate\n * @param {String|Object} [path] The path to populate or an options object\n * @param {Function} [callback] When passed, population is invoked\n * @api public\n * @return {Document} this\n */\n\n\nDocument.prototype.populate = function populate() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  var pop = this.$__.populate || (this.$__.populate = {});\n  var args = utils.args(arguments);\n  var fn;\n\n  if (typeof args[args.length - 1] === 'function') {\n    fn = args.pop();\n  } // allow `doc.populate(callback)`\n\n\n  if (args.length) {\n    // use hash to remove duplicate paths\n    var res = utils.populate.apply(null, args);\n\n    for (var i = 0; i < res.length; ++i) {\n      pop[res[i].path] = res[i];\n    }\n  }\n\n  if (fn) {\n    var paths = utils.object.vals(pop);\n    this.$__.populate = undefined;\n    paths.__noPromise = true;\n    var topLevelModel = this.constructor;\n\n    if (this.$__isNested) {\n      topLevelModel = this.$__.scope.constructor;\n      var nestedPath = this.$__.nestedPath;\n      paths.forEach(function (populateOptions) {\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\n      });\n    }\n\n    topLevelModel.populate(this, paths, fn);\n  }\n\n  return this;\n};\n/**\n * Explicitly executes population and returns a promise. Useful for ES2015\n * integration.\n *\n * ####Example:\n *\n *     var promise = doc.\n *       populate('company').\n *       populate({\n *         path: 'notes',\n *         match: /airline/,\n *         select: 'text',\n *         model: 'modelName'\n *         options: opts\n *       }).\n *       execPopulate();\n *\n *     // summary\n *     doc.execPopulate().then(resolve, reject);\n *\n *\n * @see Document.populate #document_Document-populate\n * @api public\n * @return {Promise} promise that resolves to the document when population is done\n */\n\n\nDocument.prototype.execPopulate = function () {\n  var Promise = PromiseProvider.get();\n\n  var _this = this;\n\n  return new Promise.ES6(function (resolve, reject) {\n    _this.populate(function (error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, undefined is returned.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @api public\n */\n\n\nDocument.prototype.populated = function (path, val, options) {\n  // val and options are internal\n  if (val === null || val === void 0) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n\n    var v = this.$__.populated[path];\n\n    if (v) {\n      return v.value;\n    }\n\n    return undefined;\n  } // internal\n\n\n  if (val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n\n    return this.$__.populated[path];\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = {\n    value: val,\n    options: options\n  };\n  return val;\n};\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, this is a no-op.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n */\n\n\nDocument.prototype.depopulate = function (path) {\n  if (typeof path === 'string') {\n    path = path.split(' ');\n  }\n\n  for (var i = 0; i < path.length; i++) {\n    var populatedIds = this.populated(path[i]);\n\n    if (!populatedIds) {\n      continue;\n    }\n\n    delete this.$__.populated[path[i]];\n    this.$set(path[i], populatedIds);\n  }\n\n  return this;\n};\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n */\n\n\nDocument.prototype.$__fullPath = function (path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n/*!\n * Module exports.\n */\n\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/document.js"],"names":["EventEmitter","require","MongooseError","MixedSchema","Schema","ObjectExpectedError","ObjectParameterError","StrictModeError","ValidatorError","VirtualType","utils","clone","isDefiningProjection","isMongooseObject","inspect","ValidationError","InternalCache","cleanModifiedSubpaths","compile","deepEqual","defineKey","hooks","PromiseProvider","DocumentArray","MongooseArray","Embedded","flatten","mpath","idGetter","specialProperties","Document","obj","fields","skipId","options","$__","emitter","isNew","errors","undefined","$options","schema","strictMode","strict","selected","required","requiredPaths","i","length","activePaths","setMaxListeners","_doc","$__buildDoc","$__original_set","$set","_id","_this","keys","Object","forEach","key","tree","applyQueue","each","emitterFn","prototype","apply","arguments","constructor","id","doc","exclude","ki","getFunctionName","paths","plen","ii","hasIncludedChildren","j","parts","split","c","k","push","join","p","type","path","len","last","curPath","doc_","included","piece","def","getDefault","default","toBSON","toObject","transform","virtuals","_skipDepopulateTopLevel","depopulate","flattenDecimals","init","opts","fn","$init","populated","String","item","isVirtual","getValue","_docs","emit","self","prefix","index","retainKeyOrder","_init","$isRootDiscriminator","isSelected","isObject","cast","e","invalidate","message","value","isModified","$pre","mongoosePreWrapper","$setArgs","Array","slice","call","pre","update","args","unshift","val","merge","adhoc","constructing","adhocs","adhocPaths","interpretAsType","_","$__isNested","pathtype","minimize","_handleIndex","pathName","pathType","$__path","ref","get","$isSingleNested","setValue","markModified","CastError","mixed","subpath","set","virtualpath","applySetters","cur","unmarkModified","pathToMark","isDirectModified","priorVal","$__set","shouldSet","didPopulate","modelName","baseModelName","ownerDocument","$__fullPath","model","popOpts","isArray","typeKey","map","v","setterContext","priorDoc","$markValid","instance","$__shouldModify","states","shouldModify","isMongooseArray","_registerAtomic","isMongooseDocumentArray","__parentArray","modifiedPath","indexOf","ignore","l","next","pieces","getters","applyGetters","adhocType","scope","modify","pathsToScopes","$ignore","modifiedPaths","directModifiedPaths","reduce","list","concat","chains","part","filter","chain","modified","isModifiedChild","some","mod","$isDefault","$isDeleted","isDeleted","isInit","inclusive","pathDot","isDirectSelected","validate","callback","$__validate","_getPathsToValidate","originalRequiredValue","subdocs","$__getAllSubdocs","subdoc","$basePath","_pathType","$isMongooseArray","$isMongooseDocumentArray","numElements","flattenOptions","skipArrays","pathToCheck","nested","_v","flat","_subpaths","_complete","err","validationError","__parent","process","nextTick","error","s","execPost","validated","total","complete","validatePath","$isValid","doValidate","numPaths","validateSync","pathsToValidate","tmp","validating","doValidateSync","kind","addError","$__reset","reset","array","$__dirty","dirt","_atomics","clear","all","sort","a","b","minimal","lastPath","top","hasAtomics","$__setSchema","plugin","deduplicate","$__getArrayPathsToValidate","bind","seed","docReducer","_docReduce","subDocs","q","callQueue","pair","$__handleReject","handleReject","listeners","$toObject","json","defaultOptions","_isNested","wasPopulated","_useSchemaOptions","toJSON","originalTransform","ret","versionKey","xformed","hasKeys","Buffer","isBuffer","branch","isPOJO","toString","equals","tid","docid","populate","pop","res","object","vals","__noPromise","topLevelModel","nestedPath","populateOptions","execPopulate","Promise","ES6","resolve","reject","populatedIds","module","exports"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAtR,QAAQ,CAACmC,SAAT,CAAmBiC,QAAnB,GAA8B,UAAShE,OAAT,EAAkB;AAC9C,SAAO,KAAK0Q,SAAL,CAAe1Q,OAAf,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASmH,QAAT,CAAkBtH,GAAlB,EAAuB;AACrB,MAAI0B,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY1B,GAAZ,CAAX;AAAA,MACIgB,CAAC,GAAGU,IAAI,CAACT,MADb;AAAA,MAEIuQ,OAFJ;AAAA,MAGI3P,GAHJ;AAAA,MAII+E,GAJJ;;AAMA,SAAO5F,CAAC,EAAR,EAAY;AACVa,IAAAA,GAAG,GAAGH,IAAI,CAACV,CAAD,CAAV;AACA4F,IAAAA,GAAG,GAAG5G,GAAG,CAAC6B,GAAD,CAAT;;AAEA,QAAIlD,KAAK,CAACgH,QAAN,CAAeiB,GAAf,KAAuB,CAAC6K,MAAM,CAACC,QAAP,CAAgB9K,GAAhB,CAA5B,EAAkD;AAChD5G,MAAAA,GAAG,CAAC6B,GAAD,CAAH,GAAWyF,QAAQ,CAACV,GAAD,CAAnB;AACD;;AAED,QAAIpG,SAAS,KAAKR,GAAG,CAAC6B,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","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar EventEmitter = require('events').EventEmitter;\nvar MongooseError = require('./error');\nvar MixedSchema = require('./schema/mixed');\nvar Schema = require('./schema');\nvar ObjectExpectedError = require('./error/objectExpected');\nvar ObjectParameterError = require('./error/objectParameter');\nvar StrictModeError = require('./error/strict');\nvar ValidatorError = require('./schematype').ValidatorError;\nvar VirtualType = require('./virtualtype');\nvar utils = require('./utils');\nvar clone = utils.clone;\nvar isDefiningProjection = require('./services/projection/isDefiningProjection');\nvar isMongooseObject = utils.isMongooseObject;\nvar inspect = require('util').inspect;\nvar ValidationError = MongooseError.ValidationError;\nvar InternalCache = require('./internal');\nvar cleanModifiedSubpaths = require('./services/document/cleanModifiedSubpaths');\nvar compile = require('./services/document/compile').compile;\nvar deepEqual = utils.deepEqual;\nvar defineKey = require('./services/document/compile').defineKey;\nvar hooks = require('hooks-fixed');\nvar PromiseProvider = require('./promise_provider');\nvar DocumentArray;\nvar MongooseArray;\nvar Embedded;\nvar flatten = require('./services/common').flatten;\nvar mpath = require('mpath');\nvar idGetter = require('./plugins/idGetter');\n\nvar specialProperties = ['__proto__', 'constructor', 'prototype'];\n\n/**\n * Document constructor.\n *\n * @param {Object} obj the values to set\n * @param {Object} [fields] optional object containing the fields which were selected in the query returning this document and any populated paths data\n * @param {Boolean} [skipId] bool, should we auto create an ObjectId _id\n * @inherits NodeJS EventEmitter http://nodejs.org/api/events.html#events_class_events_eventemitter\n * @event `init`: Emitted on a document after it has was retreived from the db and fully hydrated by Mongoose.\n * @event `save`: Emitted when the document is successfully saved\n * @api private\n */\n\nfunction Document(obj, fields, skipId, options) {\n  this.$__ = new InternalCache;\n  this.$__.emitter = new EventEmitter();\n  this.isNew = true;\n  this.errors = undefined;\n  this.$__.$options = options || {};\n\n  if (obj != null && typeof obj !== 'object') {\n    throw new ObjectParameterError(obj, 'obj', 'Document');\n  }\n\n  var schema = this.schema;\n\n  if (typeof fields === 'boolean') {\n    this.$__.strictMode = fields;\n    fields = undefined;\n  } else {\n    this.$__.strictMode = schema.options && schema.options.strict;\n    this.$__.selected = fields;\n  }\n\n  var required = schema.requiredPaths(true);\n  for (var i = 0; i < required.length; ++i) {\n    this.$__.activePaths.require(required[i]);\n  }\n\n  this.$__.emitter.setMaxListeners(0);\n  this._doc = this.$__buildDoc(obj, fields, skipId);\n\n  if (obj) {\n    if (obj instanceof Document) {\n      this.isNew = obj.isNew;\n    }\n    // Skip set hooks\n    if (this.$__original_set) {\n      this.$__original_set(obj, undefined, true);\n    } else {\n      this.$set(obj, undefined, true);\n    }\n  }\n\n  this.$__._id = this._id;\n\n  if (!schema.options.strict && obj) {\n    var _this = this,\n        keys = Object.keys(this._doc);\n\n    keys.forEach(function(key) {\n      if (!(key in schema.tree)) {\n        defineKey(key, null, _this);\n      }\n    });\n  }\n\n  applyQueue(this);\n}\n\n/*!\n * Document exposes the NodeJS event emitter API, so you can use\n * `on`, `once`, etc.\n */\nutils.each(\n    ['on', 'once', 'emit', 'listeners', 'removeListener', 'setMaxListeners',\n      'removeAllListeners', 'addListener'],\n    function(emitterFn) {\n      Document.prototype[emitterFn] = function() {\n        return this.$__.emitter[emitterFn].apply(this.$__.emitter, arguments);\n      };\n    });\n\nDocument.prototype.constructor = Document;\n\n/**\n * The documents schema.\n *\n * @api public\n * @property schema\n */\n\nDocument.prototype.schema;\n\n/**\n * Boolean flag specifying if the document is new.\n *\n * @api public\n * @property isNew\n */\n\nDocument.prototype.isNew;\n\n/**\n * The string version of this documents _id.\n *\n * ####Note:\n *\n * This getter exists on all documents by default. The getter can be disabled by setting the `id` [option](/docs/guide.html#id) of its `Schema` to false at construction time.\n *\n *     new Schema({ name: String }, { id: false });\n *\n * @api public\n * @see Schema options /docs/guide.html#options\n * @property id\n */\n\nDocument.prototype.id;\n\n/**\n * Hash containing current validation errors.\n *\n * @api public\n * @property errors\n */\n\nDocument.prototype.errors;\n\n/**\n * Builds the default doc structure\n *\n * @param {Object} obj\n * @param {Object} [fields]\n * @param {Boolean} [skipId]\n * @return {Object}\n * @api private\n * @method $__buildDoc\n * @memberOf Document\n */\n\nDocument.prototype.$__buildDoc = function(obj, fields, skipId) {\n  var doc = {};\n  var exclude = null;\n  var keys;\n  var ki;\n  var _this = this;\n\n  // determine if this doc is a result of a query with\n  // excluded fields\n\n  if (fields && utils.getFunctionName(fields.constructor) === 'Object') {\n    keys = Object.keys(fields);\n    ki = keys.length;\n\n    if (ki === 1 && keys[0] === '_id') {\n      exclude = !!fields[keys[ki]];\n    } else {\n      while (ki--) {\n        // Does this projection explicitly define inclusion/exclusion?\n        // Explicitly avoid `$meta` and `$slice`\n        if (keys[ki] !== '_id' && isDefiningProjection(fields[keys[ki]])) {\n          exclude = !fields[keys[ki]];\n          break;\n        }\n      }\n    }\n  }\n\n  var paths = Object.keys(this.schema.paths);\n  var plen = paths.length;\n  var ii = 0;\n\n  var hasIncludedChildren = {};\n  if (exclude === false && fields) {\n    keys = Object.keys(fields);\n    for (var j = 0; j < keys.length; ++j) {\n      var parts = keys[j].split('.');\n      var c = [];\n      for (var k = 0; k < parts.length; ++k) {\n        c.push(parts[k]);\n        hasIncludedChildren[c.join('.')] = 1;\n      }\n    }\n  }\n\n  for (; ii < plen; ++ii) {\n    var p = paths[ii];\n\n    if (p === '_id') {\n      if (skipId) {\n        continue;\n      }\n      if (obj && '_id' in obj) {\n        continue;\n      }\n    }\n\n    var type = this.schema.paths[p];\n    var path = p.split('.');\n    var len = path.length;\n    var last = len - 1;\n    var curPath = '';\n    var doc_ = doc;\n    var i = 0;\n    var included = false;\n\n    for (; i < len; ++i) {\n      var piece = path[i],\n          def;\n\n      curPath += (!curPath.length ? '' : '.') + piece;\n\n      // support excluding intermediary levels\n      if (exclude === true) {\n        if (curPath in fields) {\n          break;\n        }\n      } else if (exclude === false && fields && !included) {\n        if (curPath in fields) {\n          included = true;\n        } else if (!hasIncludedChildren[curPath]) {\n          break;\n        }\n      }\n\n      if (i === last) {\n        if (fields && exclude !== null) {\n          if (exclude === true) {\n            // apply defaults to all non-excluded fields\n            if (p in fields) {\n              continue;\n            }\n\n            def = type.getDefault(_this, false);\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              _this.$__.activePaths.default(p);\n            }\n          } else if (included) {\n            // selected field\n            def = type.getDefault(_this, false);\n            if (typeof def !== 'undefined') {\n              doc_[piece] = def;\n              _this.$__.activePaths.default(p);\n            }\n          }\n        } else {\n          def = type.getDefault(_this, false);\n          if (typeof def !== 'undefined') {\n            doc_[piece] = def;\n            _this.$__.activePaths.default(p);\n          }\n        }\n      } else {\n        doc_ = doc_[piece] || (doc_[piece] = {});\n      }\n    }\n  }\n\n  return doc;\n};\n\n/*!\n * Converts to POJO when you use the document for querying\n */\n\nDocument.prototype.toBSON = function() {\n  return this.toObject({\n    transform: false,\n    virtuals: false,\n    _skipDepopulateTopLevel: true,\n    depopulate: true,\n    flattenDecimals: false\n  });\n};\n\n/**\n * Initializes the document without setters or marking anything modified.\n *\n * Called internally after a document is returned from mongodb.\n *\n * @param {Object} doc document returned by mongo\n * @param {Function} fn callback\n * @api public\n */\n\nDocument.prototype.init = function(doc, opts, fn) {\n  // do not prefix this method with $__ since its\n  // used by public hooks\n\n  if (typeof opts === 'function') {\n    fn = opts;\n    opts = null;\n  }\n\n  this.isNew = false;\n  this.$init = true;\n\n  // handle docs with populated paths\n  // If doc._id is not null or undefined\n  if (doc._id !== null && doc._id !== undefined &&\n    opts && opts.populated && opts.populated.length) {\n    var id = String(doc._id);\n    for (var i = 0; i < opts.populated.length; ++i) {\n      var item = opts.populated[i];\n      if (item.isVirtual) {\n        this.populated(item.path, utils.getValue(item.path, doc), item);\n      } else {\n        this.populated(item.path, item._docs[id], item);\n      }\n    }\n  }\n\n  init(this, doc, this._doc);\n\n  this.emit('init', this);\n  this.constructor.emit('init', this);\n\n  this.$__._id = this._id;\n\n  if (fn) {\n    fn(null);\n  }\n  return this;\n};\n\n/*!\n * Init helper.\n *\n * @param {Object} self document instance\n * @param {Object} obj raw mongodb doc\n * @param {Object} doc object we are initializing\n * @api private\n */\n\nfunction init(self, obj, doc, prefix) {\n  prefix = prefix || '';\n\n  var keys = Object.keys(obj);\n  var len = keys.length;\n  var schema;\n  var path;\n  var i;\n  var index = 0;\n\n  if (self.schema.options.retainKeyOrder) {\n    while (index < len) {\n      _init(index++);\n    }\n  } else {\n    while (len--) {\n      _init(len);\n    }\n  }\n\n  function _init(index) {\n    i = keys[index];\n    path = prefix + i;\n    schema = self.schema.path(path);\n\n    // Should still work if not a model-level discriminator, but should not be\n    // necessary. This is *only* to catch the case where we queried using the\n    // base model and the discriminated model has a projection\n    if (self.schema.$isRootDiscriminator && !self.isSelected(path)) {\n      return;\n    }\n\n    if (!schema && utils.isObject(obj[i]) &&\n        (!obj[i].constructor || utils.getFunctionName(obj[i].constructor) === 'Object')) {\n      // assume nested object\n      if (!doc[i]) {\n        doc[i] = {};\n      }\n      init(self, obj[i], doc[i], path + '.');\n    } else if (!schema) {\n      doc[i] = obj[i];\n    } else {\n      if (obj[i] === null) {\n        doc[i] = null;\n      } else if (obj[i] !== undefined) {\n        if (schema) {\n          try {\n            doc[i] = schema.cast(obj[i], self, true);\n          } catch (e) {\n            self.invalidate(e.path, new ValidatorError({\n              path: e.path,\n              message: e.message,\n              type: 'cast',\n              value: e.value\n            }));\n          }\n        } else {\n          doc[i] = obj[i];\n        }\n      }\n      // mark as hydrated\n      if (!self.isModified(path)) {\n        self.$__.activePaths.init(path);\n      }\n    }\n  }\n}\n\n/*!\n * Set up middleware support\n */\n\nfor (var k in hooks) {\n  if (k === 'post') {\n    Document.prototype['$' + k] = Document['$' + k] = hooks[k];\n  } else if (k === 'pre') {\n    Document.prototype.$pre = Document.$pre = function mongoosePreWrapper() {\n      if (arguments[0] === 'set') {\n        // Make set hooks also work for `$set`\n        var $setArgs = Array.prototype.slice.call(arguments);\n        $setArgs[0] = '$set';\n        hooks.pre.apply(this, $setArgs);\n      }\n      return hooks.pre.apply(this, arguments);\n    };\n  } else {\n    Document.prototype[k] = Document[k] = hooks[k];\n  }\n}\n\n/**\n * Sends an update command with this document `_id` as the query selector.\n *\n * ####Example:\n *\n *     weirdCar.update({$inc: {wheels:1}}, { w: 1 }, callback);\n *\n * ####Valid options:\n *\n *  - same as in [Model.update](#model_Model.update)\n *\n * @see Model.update #model_Model.update\n * @param {Object} doc\n * @param {Object} options\n * @param {Function} callback\n * @return {Query}\n * @api public\n */\n\nDocument.prototype.update = function update() {\n  var args = utils.args(arguments);\n  args.unshift({_id: this._id});\n  return this.constructor.update.apply(this.constructor, args);\n};\n\n/**\n * Alias for `set()`, used internally to avoid conflicts\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @method $set\n * @api public\n */\n\nDocument.prototype.$set = function $set(path, val, type, options) {\n  if (type && utils.getFunctionName(type.constructor) === 'Object') {\n    options = type;\n    type = undefined;\n  }\n\n  options = options || {};\n  var merge = options.merge;\n  var adhoc = type && type !== true;\n  var constructing = type === true;\n  var adhocs;\n\n  var strict = 'strict' in options\n      ? options.strict\n      : this.$__.strictMode;\n\n  if (adhoc) {\n    adhocs = this.$__.adhocPaths || (this.$__.adhocPaths = {});\n    adhocs[path] = Schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  if (typeof path !== 'string') {\n    // new Document({ key: val })\n\n    if (path === null || path === void 0) {\n      var _ = path;\n      path = val;\n      val = _;\n    } else {\n      var prefix = val\n          ? val + '.'\n          : '';\n\n      if (path instanceof Document) {\n        if (path.$__isNested) {\n          path = path.toObject();\n        } else {\n          path = path._doc;\n        }\n      }\n\n      var keys = Object.keys(path);\n      var len = keys.length;\n      var i = 0;\n      var pathtype;\n      var key;\n\n      if (len === 0 && !this.schema.options.minimize) {\n        if (val) {\n          this.$set(val, {});\n        }\n        return this;\n      }\n\n      if (this.schema.options.retainKeyOrder) {\n        while (i < len) {\n          _handleIndex.call(this, i++);\n        }\n      } else {\n        while (len--) {\n          _handleIndex.call(this, len);\n        }\n      }\n\n      return this;\n    }\n  }\n\n  function _handleIndex(i) {\n    key = keys[i];\n    var pathName = prefix + key;\n    pathtype = this.schema.pathType(pathName);\n\n    if (path[key] !== null\n        && path[key] !== void 0\n          // need to know if plain object - no Buffer, ObjectId, ref, etc\n        && utils.isObject(path[key])\n        && (!path[key].constructor || utils.getFunctionName(path[key].constructor) === 'Object')\n        && pathtype !== 'virtual'\n        && pathtype !== 'real'\n        && !(this.$__path(pathName) instanceof MixedSchema)\n        && !(this.schema.paths[pathName] &&\n        this.schema.paths[pathName].options &&\n        this.schema.paths[pathName].options.ref)) {\n      this.$set(path[key], prefix + key, constructing);\n    } else if (strict) {\n      // Don't overwrite defaults with undefined keys (gh-3981)\n      if (constructing && path[key] === void 0 &&\n          this.get(key) !== void 0) {\n        return;\n      }\n\n      if (pathtype === 'real' || pathtype === 'virtual') {\n        // Check for setting single embedded schema to document (gh-3535)\n        var p = path[key];\n        if (this.schema.paths[pathName] &&\n            this.schema.paths[pathName].$isSingleNested &&\n            path[key] instanceof Document) {\n          p = p.toObject({ virtuals: false, transform: false });\n        }\n        this.$set(prefix + key, p, constructing);\n      } else if (pathtype === 'nested' && path[key] instanceof Document) {\n        this.$set(prefix + key,\n            path[key].toObject({transform: false}), constructing);\n      } else if (strict === 'throw') {\n        if (pathtype === 'nested') {\n          throw new ObjectExpectedError(key, path[key]);\n        } else {\n          throw new StrictModeError(key);\n        }\n      }\n    } else if (path[key] !== void 0) {\n      this.$set(prefix + key, path[key], constructing);\n    }\n  }\n\n  var pathType = this.schema.pathType(path);\n  if (pathType === 'nested' && val) {\n    if (utils.isObject(val) &&\n        (!val.constructor || utils.getFunctionName(val.constructor) === 'Object')) {\n      if (!merge) {\n        this.setValue(path, null);\n        cleanModifiedSubpaths(this, path);\n      }\n\n      if (Object.keys(val).length === 0) {\n        this.setValue(path, {});\n        this.markModified(path);\n        cleanModifiedSubpaths(this, path);\n      } else {\n        this.$set(val, path, constructing);\n      }\n      return this;\n    }\n    this.invalidate(path, new MongooseError.CastError('Object', val, path));\n    return this;\n  }\n\n  var schema;\n  var parts = path.split('.');\n\n  if (pathType === 'adhocOrUndefined' && strict) {\n    // check for roots that are Mixed types\n    var mixed;\n\n    for (i = 0; i < parts.length; ++i) {\n      var subpath = parts.slice(0, i + 1).join('.');\n      schema = this.schema.path(subpath);\n      if (schema instanceof MixedSchema) {\n        // allow changes to sub paths of mixed types\n        mixed = true;\n        break;\n      }\n\n      // If path is underneath a virtual, bypass everything and just set it.\n      if (i + 1 < parts.length && this.schema.pathType(subpath) === 'virtual') {\n        mpath.set(path, val, this);\n        return this;\n      }\n    }\n\n    if (!mixed) {\n      if (strict === 'throw') {\n        throw new StrictModeError(path);\n      }\n      return this;\n    }\n  } else if (pathType === 'virtual') {\n    schema = this.schema.virtualpath(path);\n    schema.applySetters(val, this);\n    return this;\n  } else {\n    schema = this.$__path(path);\n  }\n\n  // gh-4578, if setting a deeply nested path that doesn't exist yet, create it\n  var cur = this._doc;\n  var curPath = '';\n  for (i = 0; i < parts.length - 1; ++i) {\n    cur = cur[parts[i]];\n    curPath += (curPath.length > 0 ? '.' : '') + parts[i];\n    if (!cur) {\n      this.$set(curPath, {});\n      // Hack re: gh-5800. If nested field is not selected, it probably exists\n      // so `MongoError: cannot use the part (nested of nested.num) to\n      // traverse the element ({nested: null})` is not likely. If user gets\n      // that error, its their fault for now. We should reconsider disallowing\n      // modifying not selected paths for v5.\n      if (!this.isSelected(curPath)) {\n        this.unmarkModified(curPath);\n      }\n      cur = this.getValue(curPath);\n    }\n  }\n\n  var pathToMark;\n\n  // When using the $set operator the path to the field must already exist.\n  // Else mongodb throws: \"LEFT_SUBFIELD only supports Object\"\n\n  if (parts.length <= 1) {\n    pathToMark = path;\n  } else {\n    for (i = 0; i < parts.length; ++i) {\n      subpath = parts.slice(0, i + 1).join('.');\n      if (this.isDirectModified(subpath) // earlier prefixes that are already\n            // marked as dirty have precedence\n          || this.get(subpath) === null) {\n        pathToMark = subpath;\n        break;\n      }\n    }\n\n    if (!pathToMark) {\n      pathToMark = path;\n    }\n  }\n\n  // if this doc is being constructed we should not trigger getters\n  var priorVal = constructing ?\n    undefined :\n    this.getValue(path);\n\n  if (!schema) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n    return this;\n  }\n\n  var shouldSet = true;\n  try {\n    // If the user is trying to set a ref path to a document with\n    // the correct model name, treat it as populated\n    var didPopulate = false;\n    if (schema.options &&\n        schema.options.ref &&\n        val instanceof Document &&\n        (schema.options.ref === val.constructor.modelName || schema.options.ref === val.constructor.baseModelName)) {\n      if (this.ownerDocument) {\n        this.ownerDocument().populated(this.$__fullPath(path),\n          val._id, {model: val.constructor});\n      } else {\n        this.populated(path, val._id, {model: val.constructor});\n      }\n      didPopulate = true;\n    }\n\n    var popOpts;\n    if (schema.options &&\n        Array.isArray(schema.options[this.schema.options.typeKey]) &&\n        schema.options[this.schema.options.typeKey].length &&\n        schema.options[this.schema.options.typeKey][0].ref &&\n        Array.isArray(val) &&\n        val.length > 0 &&\n        val[0] instanceof Document &&\n        val[0].constructor.modelName &&\n        (schema.options[this.schema.options.typeKey][0].ref === val[0].constructor.baseModelName || schema.options[this.schema.options.typeKey][0].ref === val[0].constructor.modelName)) {\n      if (this.ownerDocument) {\n        popOpts = { model: val[0].constructor };\n        this.ownerDocument().populated(this.$__fullPath(path),\n          val.map(function(v) { return v._id; }), popOpts);\n      } else {\n        popOpts = { model: val[0].constructor };\n        this.populated(path, val.map(function(v) { return v._id; }), popOpts);\n      }\n      didPopulate = true;\n    }\n\n    var setterContext = constructing && this.$__.$options.priorDoc ?\n      this.$__.$options.priorDoc :\n      this;\n    val = schema.applySetters(val, setterContext, false, priorVal);\n\n    if (!didPopulate && this.$__.populated) {\n      delete this.$__.populated[path];\n    }\n\n    this.$markValid(path);\n  } catch (e) {\n    this.invalidate(path,\n      new MongooseError.CastError(schema.instance, val, path, e));\n    shouldSet = false;\n  }\n\n  if (shouldSet) {\n    this.$__set(pathToMark, path, constructing, parts, schema, val, priorVal);\n  }\n\n  if (schema.$isSingleNested && (this.isDirectModified(path) || val == null)) {\n    cleanModifiedSubpaths(this, path);\n  }\n\n  return this;\n};\n\n/**\n * Sets the value of a path, or many paths.\n *\n * ####Example:\n *\n *     // path, value\n *     doc.set(path, value)\n *\n *     // object\n *     doc.set({\n *         path  : value\n *       , path2 : {\n *            path  : value\n *         }\n *     })\n *\n *     // on-the-fly cast to number\n *     doc.set(path, value, Number)\n *\n *     // on-the-fly cast to string\n *     doc.set(path, value, String)\n *\n *     // changing strict mode behavior\n *     doc.set(path, value, { strict: false });\n *\n * @param {String|Object} path path or object of key/vals to set\n * @param {Any} val the value to set\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for \"on-the-fly\" attributes\n * @param {Object} [options] optionally specify options that modify the behavior of the set\n * @api public\n */\n\nDocument.prototype.set = Document.prototype.$set;\n\n/**\n * Determine if we should mark this change as modified.\n *\n * @return {Boolean}\n * @api private\n * @method $__shouldModify\n * @memberOf Document\n */\n\nDocument.prototype.$__shouldModify = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  if (this.isNew) {\n    return true;\n  }\n\n  if (undefined === val && !this.isSelected(path)) {\n    // when a path is not selected in a query, its initial\n    // value will be undefined.\n    return true;\n  }\n\n  if (undefined === val && path in this.$__.activePaths.states.default) {\n    // we're just unsetting the default value which was never saved\n    return false;\n  }\n\n  // gh-3992: if setting a populated field to a doc, don't mark modified\n  // if they have the same _id\n  if (this.populated(path) &&\n      val instanceof Document &&\n      deepEqual(val._id, priorVal)) {\n    return false;\n  }\n\n  if (!deepEqual(val, priorVal || this.get(path))) {\n    return true;\n  }\n\n  if (!constructing &&\n      val !== null &&\n      val !== undefined &&\n      path in this.$__.activePaths.states.default &&\n      deepEqual(val, schema.getDefault(this, constructing))) {\n    // a path with a default was $unset on the server\n    // and the user is setting it to the same value again\n    return true;\n  }\n  return false;\n};\n\n/**\n * Handles the actual setting of the value and marking the path modified if appropriate.\n *\n * @api private\n * @method $__set\n * @memberOf Document\n */\n\nDocument.prototype.$__set = function(pathToMark, path, constructing, parts, schema, val, priorVal) {\n  Embedded = Embedded || require('./types/embedded');\n\n  var shouldModify = this.$__shouldModify(pathToMark, path, constructing, parts,\n    schema, val, priorVal);\n  var _this = this;\n\n  if (shouldModify) {\n    this.markModified(pathToMark);\n\n    // handle directly setting arrays (gh-1126)\n    MongooseArray || (MongooseArray = require('./types/array'));\n    if (val && val.isMongooseArray) {\n      val._registerAtomic('$set', val);\n\n      // Update embedded document parent references (gh-5189)\n      if (val.isMongooseDocumentArray) {\n        val.forEach(function(item) {\n          item && item.__parentArray && (item.__parentArray = val);\n        });\n      }\n\n      // Small hack for gh-1638: if we're overwriting the entire array, ignore\n      // paths that were modified before the array overwrite\n      this.$__.activePaths.forEach(function(modifiedPath) {\n        if (modifiedPath.indexOf(path + '.') === 0) {\n          _this.$__.activePaths.ignore(modifiedPath);\n        }\n      });\n    }\n  }\n\n  var obj = this._doc;\n  var i = 0;\n  var l = parts.length;\n  var cur = '';\n\n  for (; i < l; i++) {\n    var next = i + 1;\n    var last = next === l;\n    cur += (cur ? '.' + parts[i] : parts[i]);\n    if (specialProperties.indexOf(parts[i]) !== -1) {\n      return;\n    }\n\n    if (last) {\n      obj[parts[i]] = val;\n    } else {\n      if (obj[parts[i]] && utils.getFunctionName(obj[parts[i]].constructor) === 'Object') {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]] instanceof Embedded) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && obj[parts[i]].$isSingleNested) {\n        obj = obj[parts[i]];\n      } else if (obj[parts[i]] && Array.isArray(obj[parts[i]])) {\n        obj = obj[parts[i]];\n      } else {\n        obj[parts[i]] = obj[parts[i]] || {};\n        obj = obj[parts[i]];\n      }\n    }\n  }\n};\n\n/**\n * Gets a raw value from a path (no getters)\n *\n * @param {String} path\n * @api private\n */\n\nDocument.prototype.getValue = function(path) {\n  return utils.getValue(path, this._doc);\n};\n\n/**\n * Sets a raw value for a path (no casting, setters, transformations)\n *\n * @param {String} path\n * @param {Object} value\n * @api private\n */\n\nDocument.prototype.setValue = function(path, val) {\n  utils.setValue(path, val, this._doc);\n  return this;\n};\n\n/**\n * Returns the value of a path.\n *\n * ####Example\n *\n *     // path\n *     doc.get('age') // 47\n *\n *     // dynamic casting to a string\n *     doc.get('age', String) // \"47\"\n *\n * @param {String} path\n * @param {Schema|String|Number|Buffer|*} [type] optionally specify a type for on-the-fly attributes\n * @api public\n */\n\nDocument.prototype.get = function(path, type) {\n  var adhoc;\n  if (type) {\n    adhoc = Schema.interpretAsType(path, type, this.schema.options);\n  }\n\n  var schema = this.$__path(path) || this.schema.virtualpath(path);\n  var pieces = path.split('.');\n  var obj = this._doc;\n\n  if (schema instanceof VirtualType) {\n    if (schema.getters.length === 0) {\n      return void 0;\n    }\n    return schema.applyGetters(null, this);\n  }\n\n  for (var i = 0, l = pieces.length; i < l; i++) {\n    obj = obj === null || obj === void 0\n        ? undefined\n        : obj[pieces[i]];\n  }\n\n  if (adhoc) {\n    obj = adhoc.cast(obj);\n  }\n\n  if (schema) {\n    obj = schema.applyGetters(obj, this);\n  }\n\n  return obj;\n};\n\n/**\n * Returns the schematype for the given `path`.\n *\n * @param {String} path\n * @api private\n * @method $__path\n * @memberOf Document\n */\n\nDocument.prototype.$__path = function(path) {\n  var adhocs = this.$__.adhocPaths,\n      adhocType = adhocs && adhocs[path];\n\n  if (adhocType) {\n    return adhocType;\n  }\n  return this.schema.path(path);\n};\n\n/**\n * Marks the path as having pending changes to write to the db.\n *\n * _Very helpful when using [Mixed](./schematypes.html#mixed) types._\n *\n * ####Example:\n *\n *     doc.mixed.type = 'changed';\n *     doc.markModified('mixed.type');\n *     doc.save() // changes to mixed.type are now persisted\n *\n * @param {String} path the path to mark modified\n * @param {Document} [scope] the scope to run validators with\n * @api public\n */\n\nDocument.prototype.markModified = function(path, scope) {\n  this.$__.activePaths.modify(path);\n  if (scope != null && !this.ownerDocument) {\n    this.$__.pathsToScopes[path] = scope;\n  }\n};\n\n/**\n * Clears the modified state on the specified path.\n *\n * ####Example:\n *\n *     doc.foo = 'bar';\n *     doc.unmarkModified('foo');\n *     doc.save() // changes to foo will not be persisted\n *\n * @param {String} path the path to unmark modified\n * @api public\n */\n\nDocument.prototype.unmarkModified = function(path) {\n  this.$__.activePaths.init(path);\n  delete this.$__.pathsToScopes[path];\n};\n\n/**\n * Don't run validation on this path or persist changes to this path.\n *\n * ####Example:\n *\n *     doc.foo = null;\n *     doc.$ignore('foo');\n *     doc.save() // changes to foo will not be persisted and validators won't be run\n *\n * @memberOf Document\n * @method $ignore\n * @param {String} path the path to ignore\n * @api public\n */\n\nDocument.prototype.$ignore = function(path) {\n  this.$__.activePaths.ignore(path);\n};\n\n/**\n * Returns the list of paths that have been modified.\n *\n * @return {Array}\n * @api public\n */\n\nDocument.prototype.modifiedPaths = function() {\n  var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n  return directModifiedPaths.reduce(function(list, path) {\n    var parts = path.split('.');\n    return list.concat(parts.reduce(function(chains, part, i) {\n      return chains.concat(parts.slice(0, i).concat(part).join('.'));\n    }, []).filter(function(chain) {\n      return (list.indexOf(chain) === -1);\n    }));\n  }, []);\n};\n\n/**\n * Returns true if this document was modified, else false.\n *\n * If `path` is given, checks if a path or any full path containing `path` as part of its path chain has been modified.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isModified()                      // true\n *     doc.isModified('documents')           // true\n *     doc.isModified('documents.0.title')   // true\n *     doc.isModified('documents otherProp') // true\n *     doc.isDirectModified('documents')     // false\n *\n * @param {String} [path] optional\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isModified = function(paths) {\n  if (paths) {\n    if (!Array.isArray(paths)) {\n      paths = paths.split(' ');\n    }\n    var modified = this.modifiedPaths();\n    var directModifiedPaths = Object.keys(this.$__.activePaths.states.modify);\n    var isModifiedChild = paths.some(function(path) {\n      return !!~modified.indexOf(path);\n    });\n    return isModifiedChild || paths.some(function(path) {\n      return directModifiedPaths.some(function(mod) {\n        return mod === path || path.indexOf(mod + '.') === 0;\n      });\n    });\n  }\n  return this.$__.activePaths.some('modify');\n};\n\n/**\n * Checks if a path is set to its default.\n *\n * ####Example\n *\n *     MyModel = mongoose.model('test', { name: { type: String, default: 'Val '} });\n *     var m = new MyModel();\n *     m.$isDefault('name'); // true\n *\n * @memberOf Document\n * @method $isDefault\n * @param {String} [path]\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.$isDefault = function(path) {\n  return (path in this.$__.activePaths.states.default);\n};\n\n/**\n * Getter/setter, determines whether the document was removed or not.\n *\n * ####Example:\n *     product.remove(function (err, product) {\n *       product.isDeleted(); // true\n *       product.remove(); // no-op, doesn't send anything to the db\n *\n *       product.isDeleted(false);\n *       product.isDeleted(); // false\n *       product.remove(); // will execute a remove against the db\n *     })\n *\n * @param {Boolean} [val] optional, overrides whether mongoose thinks the doc is deleted\n * @return {Boolean} whether mongoose thinks this doc is deleted.\n * @method $isDeleted\n * @api public\n */\n\nDocument.prototype.$isDeleted = function(val) {\n  if (arguments.length === 0) {\n    return !!this.$__.isDeleted;\n  }\n\n  this.$__.isDeleted = !!val;\n  return this;\n};\n\n/**\n * Returns true if `path` was directly set and modified, else false.\n *\n * ####Example\n *\n *     doc.set('documents.0.title', 'changed');\n *     doc.isDirectModified('documents.0.title') // true\n *     doc.isDirectModified('documents') // false\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectModified = function(path) {\n  return (path in this.$__.activePaths.states.modify);\n};\n\n/**\n * Checks if `path` was initialized.\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isInit = function(path) {\n  return (path in this.$__.activePaths.states.init);\n};\n\n/**\n * Checks if `path` was selected in the source query which initialized this document.\n *\n * ####Example\n *\n *     Thing.findOne().select('name').exec(function (err, doc) {\n *        doc.isSelected('name') // true\n *        doc.isSelected('age')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isSelected = function isSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    var paths = Object.keys(this.$__.selected);\n    var i = paths.length;\n    var inclusive = null;\n    var cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    i = paths.length;\n    var pathDot = path + '.';\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n\n      if (cur.indexOf(pathDot) === 0) {\n        return inclusive || cur !== pathDot;\n      }\n\n      if (pathDot.indexOf(cur + '.') === 0) {\n        return inclusive;\n      }\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n\n/**\n * Checks if `path` was explicitly selected. If no projection, always returns\n * true.\n *\n * ####Example\n *\n *     Thing.findOne().select('nested.name').exec(function (err, doc) {\n *        doc.isDirectSelected('nested.name') // true\n *        doc.isDirectSelected('nested.otherName') // false\n *        doc.isDirectSelected('nested')  // false\n *     })\n *\n * @param {String} path\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.isDirectSelected = function isDirectSelected(path) {\n  if (this.$__.selected) {\n    if (path === '_id') {\n      return this.$__.selected._id !== 0;\n    }\n\n    var paths = Object.keys(this.$__.selected);\n    var i = paths.length;\n    var inclusive = null;\n    var cur;\n\n    if (i === 1 && paths[0] === '_id') {\n      // only _id was selected.\n      return this.$__.selected._id === 0;\n    }\n\n    while (i--) {\n      cur = paths[i];\n      if (cur === '_id') {\n        continue;\n      }\n      if (!isDefiningProjection(this.$__.selected[cur])) {\n        continue;\n      }\n      inclusive = !!this.$__.selected[cur];\n      break;\n    }\n\n    if (inclusive === null) {\n      return true;\n    }\n\n    if (path in this.$__.selected) {\n      return inclusive;\n    }\n\n    return !inclusive;\n  }\n\n  return true;\n};\n\n/**\n * Executes registered validation rules for this document.\n *\n * ####Note:\n *\n * This method is called `pre` save and if a validation rule is violated, [save](#model_Model-save) is aborted and the error is returned to your `callback`.\n *\n * ####Example:\n *\n *     doc.validate(function (err) {\n *       if (err) handleError(err);\n *       else // validation passed\n *     });\n *\n * @param {Object} optional options internal options\n * @param {Function} callback optional callback called after validation completes, passing an error if one occurred\n * @return {Promise} Promise\n * @api public\n */\n\nDocument.prototype.validate = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = null;\n  }\n\n  this.$__validate(callback || function() {});\n};\n\n/*!\n * ignore\n */\n\nfunction _getPathsToValidate(doc) {\n  var i;\n  var len;\n\n  // only validate required fields when necessary\n  var paths = Object.keys(doc.$__.activePaths.states.require).filter(function(path) {\n    if (!doc.isSelected(path) && !doc.isModified(path)) {\n      return false;\n    }\n    var p = doc.schema.path(path);\n    if (typeof p.originalRequiredValue === 'function') {\n      return p.originalRequiredValue.call(doc);\n    }\n    return true;\n  });\n\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.init));\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.modify));\n  paths = paths.concat(Object.keys(doc.$__.activePaths.states.default));\n\n  if (!doc.ownerDocument) {\n    var subdocs = doc.$__getAllSubdocs();\n    var subdoc;\n    len = subdocs.length;\n    for (i = 0; i < len; ++i) {\n      subdoc = subdocs[i];\n      if (doc.isModified(subdoc.$basePath) &&\n          !doc.isDirectModified(subdoc.$basePath)) {\n        // Remove child paths for now, because we'll be validating the whole\n        // subdoc\n        paths = paths.filter(function(p) {\n          return p != null && p.indexOf(subdoc.$basePath + '.') !== 0;\n        });\n        paths.push(subdoc.$basePath);\n      }\n    }\n  }\n\n  // gh-661: if a whole array is modified, make sure to run validation on all\n  // the children as well\n  len = paths.length;\n  for (i = 0; i < len; ++i) {\n    var path = paths[i];\n\n    var _pathType = doc.schema.path(path);\n    if (!_pathType || !_pathType.$isMongooseArray || _pathType.$isMongooseDocumentArray) {\n      continue;\n    }\n\n    var val = doc.getValue(path);\n    if (val) {\n      var numElements = val.length;\n      for (var j = 0; j < numElements; ++j) {\n        paths.push(path + '.' + j);\n      }\n    }\n  }\n\n  var flattenOptions = { skipArrays: true };\n  len = paths.length;\n  for (i = 0; i < len; ++i) {\n    var pathToCheck = paths[i];\n    if (doc.schema.nested[pathToCheck]) {\n      var _v = doc.getValue(pathToCheck);\n      if (isMongooseObject(_v)) {\n        _v = _v.toObject({ transform: false });\n      }\n      var flat = flatten(_v, '', flattenOptions);\n      var _subpaths = Object.keys(flat).map(function(p) {\n        return pathToCheck + '.' + p;\n      });\n      paths = paths.concat(_subpaths);\n    }\n  }\n\n  return paths;\n}\n\n/*!\n * ignore\n */\n\nDocument.prototype.$__validate = function(callback) {\n  var _this = this;\n  var _complete = function() {\n    var err = _this.$__.validationError;\n    _this.$__.validationError = undefined;\n    _this.emit('validate', _this);\n    _this.constructor.emit('validate', _this);\n    if (err) {\n      for (var key in err.errors) {\n        // Make sure cast errors persist\n        if (!_this.__parent && err.errors[key] instanceof MongooseError.CastError) {\n          _this.invalidate(key, err.errors[key]);\n        }\n      }\n\n      return err;\n    }\n  };\n\n  // only validate required fields when necessary\n  var paths = _getPathsToValidate(this);\n\n  if (paths.length === 0) {\n    return process.nextTick(function() {\n      var error = _complete();\n      if (error) {\n        return _this.schema.s.hooks.execPost('validate:error', _this, [ _this], { error: error }, function(error) {\n          callback(error);\n        });\n      }\n      callback();\n    });\n  }\n\n  var validated = {};\n  var total = 0;\n\n  var complete = function() {\n    var error = _complete();\n    if (error) {\n      return _this.schema.s.hooks.execPost('validate:error', _this, [ _this], { error: error }, function(error) {\n        callback(error);\n      });\n    }\n    callback();\n  };\n\n  var validatePath = function(path) {\n    if (path == null || validated[path]) {\n      return;\n    }\n\n    validated[path] = true;\n    total++;\n\n    process.nextTick(function() {\n      var p = _this.schema.path(path);\n      if (!p) {\n        return --total || complete();\n      }\n\n      // If user marked as invalid or there was a cast error, don't validate\n      if (!_this.$isValid(path)) {\n        --total || complete();\n        return;\n      }\n\n      var val = _this.getValue(path);\n      var scope = path in _this.$__.pathsToScopes ?\n        _this.$__.pathsToScopes[path] :\n        _this;\n      p.doValidate(val, function(err) {\n        if (err) {\n          _this.invalidate(path, err, undefined, true);\n        }\n        --total || complete();\n      }, scope);\n    });\n  };\n\n  var numPaths = paths.length;\n  for (var i = 0; i < numPaths; ++i) {\n    validatePath(paths[i]);\n  }\n};\n\n/**\n * Executes registered validation rules (skipping asynchronous validators) for this document.\n *\n * ####Note:\n *\n * This method is useful if you need synchronous validation.\n *\n * ####Example:\n *\n *     var err = doc.validateSync();\n *     if ( err ){\n *       handleError( err );\n *     } else {\n *       // validation passed\n *     }\n *\n * @param {Array|string} pathsToValidate only validate the given paths\n * @return {MongooseError|undefined} MongooseError if there are errors during validation, or undefined if there is no error.\n * @api public\n */\n\nDocument.prototype.validateSync = function(pathsToValidate) {\n  var _this = this;\n\n  if (typeof pathsToValidate === 'string') {\n    pathsToValidate = pathsToValidate.split(' ');\n  }\n\n  // only validate required fields when necessary\n  var paths = _getPathsToValidate(this);\n\n  if (pathsToValidate && pathsToValidate.length) {\n    var tmp = [];\n    for (var i = 0; i < paths.length; ++i) {\n      if (pathsToValidate.indexOf(paths[i]) !== -1) {\n        tmp.push(paths[i]);\n      }\n    }\n    paths = tmp;\n  }\n\n  var validating = {};\n\n  paths.forEach(function(path) {\n    if (validating[path]) {\n      return;\n    }\n\n    validating[path] = true;\n\n    var p = _this.schema.path(path);\n    if (!p) {\n      return;\n    }\n    if (!_this.$isValid(path)) {\n      return;\n    }\n\n    var val = _this.getValue(path);\n    var err = p.doValidateSync(val, _this);\n    if (err) {\n      _this.invalidate(path, err, undefined, true);\n    }\n  });\n\n  var err = _this.$__.validationError;\n  _this.$__.validationError = undefined;\n  _this.emit('validate', _this);\n  _this.constructor.emit('validate', _this);\n\n  if (err) {\n    for (var key in err.errors) {\n      // Make sure cast errors persist\n      if (err.errors[key] instanceof MongooseError.CastError) {\n        _this.invalidate(key, err.errors[key]);\n      }\n    }\n  }\n\n  return err;\n};\n\n/**\n * Marks a path as invalid, causing validation to fail.\n *\n * The `errorMsg` argument will become the message of the `ValidationError`.\n *\n * The `value` argument (if passed) will be available through the `ValidationError.value` property.\n *\n *     doc.invalidate('size', 'must be less than 20', 14);\n\n *     doc.validate(function (err) {\n *       console.log(err)\n *       // prints\n *       { message: 'Validation failed',\n *         name: 'ValidationError',\n *         errors:\n *          { size:\n *             { message: 'must be less than 20',\n *               name: 'ValidatorError',\n *               path: 'size',\n *               type: 'user defined',\n *               value: 14 } } }\n *     })\n *\n * @param {String} path the field to invalidate\n * @param {String|Error} errorMsg the error which states the reason `path` was invalid\n * @param {Object|String|Number|any} value optional invalid value\n * @param {String} [kind] optional `kind` property for the error\n * @return {ValidationError} the current ValidationError, with all currently invalidated paths\n * @api public\n */\n\nDocument.prototype.invalidate = function(path, err, val, kind) {\n  if (!this.$__.validationError) {\n    this.$__.validationError = new ValidationError(this);\n  }\n\n  if (this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  if (!err || typeof err === 'string') {\n    err = new ValidatorError({\n      path: path,\n      message: err,\n      type: kind || 'user defined',\n      value: val\n    });\n  }\n\n  if (this.$__.validationError === err) {\n    return this.$__.validationError;\n  }\n\n  this.$__.validationError.addError(path, err);\n  return this.$__.validationError;\n};\n\n/**\n * Marks a path as valid, removing existing validation errors.\n *\n * @param {String} path the field to mark as valid\n * @api public\n * @method $markValid\n * @receiver Document\n */\n\nDocument.prototype.$markValid = function(path) {\n  if (!this.$__.validationError || !this.$__.validationError.errors[path]) {\n    return;\n  }\n\n  delete this.$__.validationError.errors[path];\n  if (Object.keys(this.$__.validationError.errors).length === 0) {\n    this.$__.validationError = null;\n  }\n};\n\n/**\n * Saves this document.\n *\n * ####Example:\n *\n *     product.sold = Date.now();\n *     product.save(function (err, product, numAffected) {\n *       if (err) ..\n *     })\n *\n * The callback will receive three parameters\n *\n * 1. `err` if an error occurred\n * 2. `product` which is the saved `product`\n * 3. `numAffected` will be 1 when the document was successfully persisted to MongoDB, otherwise 0. Unless you tweak mongoose's internals, you don't need to worry about checking this parameter for errors - checking `err` is sufficient to make sure your document was properly saved.\n *\n * As an extra measure of flow control, save will return a Promise.\n * ####Example:\n *     product.save().then(function(product) {\n *        ...\n *     });\n *\n * For legacy reasons, mongoose stores object keys in reverse order on initial\n * save. That is, `{ a: 1, b: 2 }` will be saved as `{ b: 2, a: 1 }` in\n * MongoDB. To override this behavior, set\n * [the `toObject.retainKeyOrder` option](http://mongoosejs.com/docs/api.html#document_Document-toObject)\n * to true on your schema.\n *\n * @param {Object} [options] options optional options\n * @param {Object} [options.safe] overrides [schema's safe option](http://mongoosejs.com//docs/guide.html#safe)\n * @param {Boolean} [options.validateBeforeSave] set to false to save without validating.\n * @param {Function} [fn] optional callback\n * @method save\n * @return {Promise} Promise\n * @api public\n * @see middleware http://mongoosejs.com/docs/middleware.html\n */\n\n/**\n * Checks if a path is invalid\n *\n * @param {String} path the field to check\n * @method $isValid\n * @api private\n * @receiver Document\n */\n\nDocument.prototype.$isValid = function(path) {\n  return !this.$__.validationError || !this.$__.validationError.errors[path];\n};\n\n/**\n * Resets the internal modified state of this document.\n *\n * @api private\n * @return {Document}\n * @method $__reset\n * @memberOf Document\n */\n\nDocument.prototype.$__reset = function reset() {\n  var _this = this;\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  this.$__.activePaths\n  .map('init', 'modify', function(i) {\n    return _this.getValue(i);\n  })\n  .filter(function(val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  })\n  .forEach(function(array) {\n    var i = array.length;\n    while (i--) {\n      var doc = array[i];\n      if (!doc) {\n        continue;\n      }\n      doc.$__reset();\n    }\n  });\n\n  this.$__.activePaths.\n    map('init', 'modify', function(i) {\n      return _this.getValue(i);\n    }).\n    filter(function(val) {\n      return val && val.$isSingleNested;\n    }).\n    forEach(function(doc) {\n      doc.$__reset();\n    });\n\n  // clear atomics\n  this.$__dirty().forEach(function(dirt) {\n    var type = dirt.value;\n    if (type && type._atomics) {\n      type._atomics = {};\n    }\n  });\n\n  // Clear 'dirty' cache\n  this.$__.activePaths.clear('modify');\n  this.$__.activePaths.clear('default');\n  this.$__.validationError = undefined;\n  this.errors = undefined;\n  _this = this;\n  this.schema.requiredPaths().forEach(function(path) {\n    _this.$__.activePaths.require(path);\n  });\n\n  return this;\n};\n\n/**\n * Returns this documents dirty paths / vals.\n *\n * @api private\n * @method $__dirty\n * @memberOf Document\n */\n\nDocument.prototype.$__dirty = function() {\n  var _this = this;\n\n  var all = this.$__.activePaths.map('modify', function(path) {\n    return {\n      path: path,\n      value: _this.getValue(path),\n      schema: _this.$__path(path)\n    };\n  });\n\n  // gh-2558: if we had to set a default and the value is not undefined,\n  // we have to save as well\n  all = all.concat(this.$__.activePaths.map('default', function(path) {\n    if (path === '_id' || !_this.getValue(path)) {\n      return;\n    }\n    return {\n      path: path,\n      value: _this.getValue(path),\n      schema: _this.$__path(path)\n    };\n  }));\n\n  // Sort dirty paths in a flat hierarchy.\n  all.sort(function(a, b) {\n    return (a.path < b.path ? -1 : (a.path > b.path ? 1 : 0));\n  });\n\n  // Ignore \"foo.a\" if \"foo\" is dirty already.\n  var minimal = [],\n      lastPath,\n      top;\n\n  all.forEach(function(item) {\n    if (!item) {\n      return;\n    }\n    if (item.path.indexOf(lastPath) !== 0) {\n      lastPath = item.path + '.';\n      minimal.push(item);\n      top = item;\n    } else {\n      // special case for top level MongooseArrays\n      if (top.value && top.value._atomics && top.value.hasAtomics()) {\n        // the `top` array itself and a sub path of `top` are being modified.\n        // the only way to honor all of both modifications is through a $set\n        // of entire array.\n        top.value._atomics = {};\n        top.value._atomics.$set = top.value;\n      }\n    }\n  });\n\n  top = lastPath = null;\n  return minimal;\n};\n\n/**\n * Assigns/compiles `schema` into this documents prototype.\n *\n * @param {Schema} schema\n * @api private\n * @method $__setSchema\n * @memberOf Document\n */\n\nDocument.prototype.$__setSchema = function(schema) {\n  schema.plugin(idGetter, { deduplicate: true });\n  compile(schema.tree, this, undefined, schema.options);\n  this.schema = schema;\n};\n\n\n/**\n * Get active path that were changed and are arrays\n *\n * @api private\n * @method $__getArrayPathsToValidate\n * @memberOf Document\n */\n\nDocument.prototype.$__getArrayPathsToValidate = function() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n\n  // validate all document arrays.\n  return this.$__.activePaths\n  .map('init', 'modify', function(i) {\n    return this.getValue(i);\n  }.bind(this))\n  .filter(function(val) {\n    return val && val instanceof Array && val.isMongooseDocumentArray && val.length;\n  }).reduce(function(seed, array) {\n    return seed.concat(array);\n  }, [])\n  .filter(function(doc) {\n    return doc;\n  });\n};\n\n\n/**\n * Get all subdocs (by bfs)\n *\n * @api private\n * @method $__getAllSubdocs\n * @memberOf Document\n */\n\nDocument.prototype.$__getAllSubdocs = function() {\n  DocumentArray || (DocumentArray = require('./types/documentarray'));\n  Embedded = Embedded || require('./types/embedded');\n\n  function docReducer(doc, seed, path) {\n    var val = doc[path];\n\n    if (val instanceof Embedded) {\n      seed.push(val);\n    }\n    if (val && val.$isSingleNested) {\n      seed = Object.keys(val._doc).reduce(function(seed, path) {\n        return docReducer(val._doc, seed, path);\n      }, seed);\n      seed.push(val);\n    }\n    if (val && val.isMongooseDocumentArray) {\n      val.forEach(function _docReduce(doc) {\n        if (!doc || !doc._doc) {\n          return;\n        }\n        if (doc instanceof Embedded) {\n          seed.push(doc);\n        }\n        seed = Object.keys(doc._doc).reduce(function(seed, path) {\n          return docReducer(doc._doc, seed, path);\n        }, seed);\n      });\n    } else if (val instanceof Document && val.$__isNested) {\n      if (val) {\n        seed = Object.keys(val).reduce(function(seed, path) {\n          return docReducer(val, seed, path);\n        }, seed);\n      }\n    }\n    return seed;\n  }\n\n  var _this = this;\n  var subDocs = Object.keys(this._doc).reduce(function(seed, path) {\n    return docReducer(_this, seed, path);\n  }, []);\n\n  return subDocs;\n};\n\n/*!\n * Runs queued functions\n */\n\nfunction applyQueue(doc) {\n  var q = doc.schema && doc.schema.callQueue;\n  if (!q.length) {\n    return;\n  }\n  var pair;\n\n  for (var i = 0; i < q.length; ++i) {\n    pair = q[i];\n    if (pair[0] !== 'pre' && pair[0] !== 'post' && pair[0] !== 'on') {\n      doc[pair[0]].apply(doc, pair[1]);\n    }\n  }\n}\n\nDocument.prototype.$__handleReject = function handleReject(err) {\n  // emit on the Model if listening\n  if (this.listeners('error').length) {\n    this.emit('error', err);\n  } else if (this.constructor.listeners && this.constructor.listeners('error').length) {\n    this.constructor.emit('error', err);\n  } else if (this.listeners && this.listeners('error').length) {\n    this.emit('error', err);\n  }\n};\n\n/**\n * Internal helper for toObject() and toJSON() that doesn't manipulate options\n *\n * @api private\n * @method $toObject\n * @memberOf Document\n */\n\nDocument.prototype.$toObject = function(options, json) {\n  var defaultOptions = {\n    transform: true,\n    json: json,\n    retainKeyOrder: this.schema.options.retainKeyOrder,\n    flattenDecimals: true\n  };\n\n  // _isNested will only be true if this is not the top level document, we\n  // should never depopulate\n  if (options && options.depopulate && options._isNested && this.$__.wasPopulated) {\n    // populated paths that we set to a document\n    return clone(this._id, options);\n  }\n\n  // When internally saving this document we always pass options,\n  // bypassing the custom schema options.\n  if (!(options && utils.getFunctionName(options.constructor) === 'Object') ||\n      (options && options._useSchemaOptions)) {\n    if (json) {\n      options = this.schema.options.toJSON ?\n        clone(this.schema.options.toJSON) :\n        {};\n      options.json = true;\n      options._useSchemaOptions = true;\n    } else {\n      options = this.schema.options.toObject ?\n        clone(this.schema.options.toObject) :\n        {};\n      options.json = false;\n      options._useSchemaOptions = true;\n    }\n  }\n\n  for (var key in defaultOptions) {\n    if (options[key] === undefined) {\n      options[key] = defaultOptions[key];\n    }\n  }\n\n  ('minimize' in options) || (options.minimize = this.schema.options.minimize);\n\n  // remember the root transform function\n  // to save it from being overwritten by sub-transform functions\n  var originalTransform = options.transform;\n\n  options._isNested = true;\n\n  var ret = clone(this._doc, options) || {};\n\n  if (options.getters) {\n    applyGetters(this, ret, 'paths', options);\n    // applyGetters for paths will add nested empty objects;\n    // if minimize is set, we need to remove them.\n    if (options.minimize) {\n      ret = minimize(ret) || {};\n    }\n  }\n\n  if (options.virtuals || options.getters && options.virtuals !== false) {\n    applyGetters(this, ret, 'virtuals', options);\n  }\n\n  if (options.versionKey === false && this.schema.options.versionKey) {\n    delete ret[this.schema.options.versionKey];\n  }\n\n  var transform = options.transform;\n\n  // In the case where a subdocument has its own transform function, we need to\n  // check and see if the parent has a transform (options.transform) and if the\n  // child schema has a transform (this.schema.options.toObject) In this case,\n  // we need to adjust options.transform to be the child schema's transform and\n  // not the parent schema's\n  if (transform === true ||\n      (this.schema.options.toObject && transform)) {\n    var opts = options.json ? this.schema.options.toJSON : this.schema.options.toObject;\n\n    if (opts) {\n      transform = (typeof options.transform === 'function' ? options.transform : opts.transform);\n    }\n  } else {\n    options.transform = originalTransform;\n  }\n\n  if (typeof transform === 'function') {\n    var xformed = transform(this, ret, options);\n    if (typeof xformed !== 'undefined') {\n      ret = xformed;\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Converts this document into a plain javascript object, ready for storage in MongoDB.\n *\n * Buffers are converted to instances of [mongodb.Binary](http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html) for proper storage.\n *\n * ####Options:\n *\n * - `getters` apply all getters (path and virtual getters)\n * - `virtuals` apply virtual getters (can override `getters` option)\n * - `minimize` remove empty objects (defaults to true)\n * - `transform` a transform function to apply to the resulting document before returning\n * - `depopulate` depopulate any populated paths, replacing them with their original refs (defaults to false)\n * - `versionKey` whether to include the version key (defaults to true)\n * - `retainKeyOrder` keep the order of object keys. If this is set to true, `Object.keys(new Doc({ a: 1, b: 2}).toObject())` will always produce `['a', 'b']` (defaults to false)\n *\n * ####Getters/Virtuals\n *\n * Example of only applying path getters\n *\n *     doc.toObject({ getters: true, virtuals: false })\n *\n * Example of only applying virtual getters\n *\n *     doc.toObject({ virtuals: true })\n *\n * Example of applying both path and virtual getters\n *\n *     doc.toObject({ getters: true })\n *\n * To apply these options to every document of your schema by default, set your [schemas](#schema_Schema) `toObject` option to the same argument.\n *\n *     schema.set('toObject', { virtuals: true })\n *\n * ####Transform\n *\n * We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional `transform` function.\n *\n * Transform functions receive three arguments\n *\n *     function (doc, ret, options) {}\n *\n * - `doc` The mongoose document which is being converted\n * - `ret` The plain object representation which has been converted\n * - `options` The options in use (either schema options or the options passed inline)\n *\n * ####Example\n *\n *     // specify the transform schema option\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       // remove the _id of every document before returning the result\n *       delete ret._id;\n *       return ret;\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { name: 'Wreck-it Ralph' }\n *\n * With transformations we can do a lot more than remove properties. We can even return completely new customized objects:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       return { movie: ret.name }\n *     }\n *\n *     // without the transformation in the schema\n *     doc.toObject(); // { _id: 'anId', name: 'Wreck-it Ralph' }\n *\n *     // with the transformation\n *     doc.toObject(); // { movie: 'Wreck-it Ralph' }\n *\n * _Note: if a transform function returns `undefined`, the return value will be ignored._\n *\n * Transformations may also be applied inline, overridding any transform set in the options:\n *\n *     function xform (doc, ret, options) {\n *       return { inline: ret.name, custom: true }\n *     }\n *\n *     // pass the transform as an inline option\n *     doc.toObject({ transform: xform }); // { inline: 'Wreck-it Ralph', custom: true }\n *\n * If you want to skip transformations, use `transform: false`:\n *\n *     if (!schema.options.toObject) schema.options.toObject = {};\n *     schema.options.toObject.hide = '_id';\n *     schema.options.toObject.transform = function (doc, ret, options) {\n *       if (options.hide) {\n *         options.hide.split(' ').forEach(function (prop) {\n *           delete ret[prop];\n *         });\n *       }\n *       return ret;\n *     }\n *\n *     var doc = new Doc({ _id: 'anId', secret: 47, name: 'Wreck-it Ralph' });\n *     doc.toObject();                                        // { secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: false });// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }\n *     doc.toObject({ hide: 'secret _id', transform: true }); // { name: 'Wreck-it Ralph' }\n *\n * Transforms are applied _only to the document and are not applied to sub-documents_.\n *\n * Transforms, like all of these options, are also available for `toJSON`.\n *\n * See [schema options](/docs/guide.html#toObject) for some more details.\n *\n * _During save, no custom options are applied to the document before being sent to the database._\n *\n * @param {Object} [options]\n * @return {Object} js object\n * @see mongodb.Binary http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\n * @api public\n */\n\nDocument.prototype.toObject = function(options) {\n  return this.$toObject(options);\n};\n\n/*!\n * Minimizes an object, removing undefined values and empty objects\n *\n * @param {Object} object to minimize\n * @return {Object}\n */\n\nfunction minimize(obj) {\n  var keys = Object.keys(obj),\n      i = keys.length,\n      hasKeys,\n      key,\n      val;\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    if (utils.isObject(val) && !Buffer.isBuffer(val)) {\n      obj[key] = minimize(val);\n    }\n\n    if (undefined === obj[key]) {\n      delete obj[key];\n      continue;\n    }\n\n    hasKeys = true;\n  }\n\n  return hasKeys\n      ? obj\n      : undefined;\n}\n\n/*!\n * Applies virtuals properties to `json`.\n *\n * @param {Document} self\n * @param {Object} json\n * @param {String} type either `virtuals` or `paths`\n * @return {Object} `json`\n */\n\nfunction applyGetters(self, json, type, options) {\n  var schema = self.schema;\n  var paths = Object.keys(schema[type]);\n  var i = paths.length;\n  var numPaths = i;\n  var path;\n  var cur = self._doc;\n  var v;\n\n  if (!cur) {\n    return json;\n  }\n\n  if (type === 'virtuals') {\n    for (i = 0; i < numPaths; ++i) {\n      path = paths[i];\n      parts = path.split('.');\n      v = clone(self.get(path), options);\n      if (v === void 0) {\n        continue;\n      }\n      plen = parts.length;\n      cur = json;\n      for (var j = 0; j < plen - 1; ++j) {\n        cur[parts[j]] = cur[parts[j]] || {};\n        cur = cur[parts[j]];\n      }\n      cur[parts[plen - 1]] = v;\n    }\n\n    return json;\n  }\n\n  while (i--) {\n    path = paths[i];\n\n    var parts = path.split('.');\n    var plen = parts.length;\n    var last = plen - 1;\n    var branch = json;\n    var part;\n    cur = self._doc;\n\n    for (var ii = 0; ii < plen; ++ii) {\n      part = parts[ii];\n      v = cur[part];\n      if (ii === last) {\n        branch[part] = clone(self.get(path), options);\n      } else if (v == null) {\n        if (part in cur) {\n          branch[part] = v;\n        }\n        break;\n      } else {\n        branch = branch[part] || (branch[part] = {});\n      }\n      cur = v;\n    }\n  }\n\n  return json;\n}\n\n/**\n * The return value of this method is used in calls to JSON.stringify(doc).\n *\n * This method accepts the same options as [Document#toObject](#document_Document-toObject). To apply the options to every document of your schema by default, set your [schemas](#schema_Schema) `toJSON` option to the same argument.\n *\n *     schema.set('toJSON', { virtuals: true })\n *\n * See [schema options](/docs/guide.html#toJSON) for details.\n *\n * @param {Object} options\n * @return {Object}\n * @see Document#toObject #document_Document-toObject\n * @api public\n */\n\nDocument.prototype.toJSON = function(options) {\n  return this.$toObject(options, true);\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n */\n\nDocument.prototype.inspect = function(options) {\n  var isPOJO = options &&\n    utils.getFunctionName(options.constructor) === 'Object';\n  var opts;\n  if (isPOJO) {\n    opts = options;\n    opts.minimize = false;\n    opts.retainKeyOrder = true;\n  }\n  return this.toObject(opts);\n};\n\n/**\n * Helper for console.log\n *\n * @api public\n * @method toString\n */\n\nDocument.prototype.toString = function() {\n  return inspect(this.inspect());\n};\n\n/**\n * Returns true if the Document stores the same data as doc.\n *\n * Documents are considered equal when they have matching `_id`s, unless neither\n * document has an `_id`, in which case this function falls back to using\n * `deepEqual()`.\n *\n * @param {Document} doc a document to compare\n * @return {Boolean}\n * @api public\n */\n\nDocument.prototype.equals = function(doc) {\n  if (!doc) {\n    return false;\n  }\n\n  var tid = this.get('_id');\n  var docid = doc.get ? doc.get('_id') : doc;\n  if (!tid && !docid) {\n    return deepEqual(this, doc);\n  }\n  return tid && tid.equals\n      ? tid.equals(docid)\n      : tid === docid;\n};\n\n/**\n * Populates document references, executing the `callback` when complete.\n * If you want to use promises instead, use this function with\n * [`execPopulate()`](#document_Document-execPopulate)\n *\n * ####Example:\n *\n *     doc\n *     .populate('company')\n *     .populate({\n *       path: 'notes',\n *       match: /airline/,\n *       select: 'text',\n *       model: 'modelName'\n *       options: opts\n *     }, function (err, user) {\n *       assert(doc._id === user._id) // the document itself is passed\n *     })\n *\n *     // summary\n *     doc.populate(path)                   // not executed\n *     doc.populate(options);               // not executed\n *     doc.populate(path, callback)         // executed\n *     doc.populate(options, callback);     // executed\n *     doc.populate(callback);              // executed\n *     doc.populate(options).execPopulate() // executed, returns promise\n *\n *\n * ####NOTE:\n *\n * Population does not occur unless a `callback` is passed *or* you explicitly\n * call `execPopulate()`.\n * Passing the same path a second time will overwrite the previous path options.\n * See [Model.populate()](#model_Model.populate) for explaination of options.\n *\n * @see Model.populate #model_Model.populate\n * @see Document.execPopulate #document_Document-execPopulate\n * @param {String|Object} [path] The path to populate or an options object\n * @param {Function} [callback] When passed, population is invoked\n * @api public\n * @return {Document} this\n */\n\nDocument.prototype.populate = function populate() {\n  if (arguments.length === 0) {\n    return this;\n  }\n\n  var pop = this.$__.populate || (this.$__.populate = {});\n  var args = utils.args(arguments);\n  var fn;\n\n  if (typeof args[args.length - 1] === 'function') {\n    fn = args.pop();\n  }\n\n  // allow `doc.populate(callback)`\n  if (args.length) {\n    // use hash to remove duplicate paths\n    var res = utils.populate.apply(null, args);\n    for (var i = 0; i < res.length; ++i) {\n      pop[res[i].path] = res[i];\n    }\n  }\n\n  if (fn) {\n    var paths = utils.object.vals(pop);\n    this.$__.populate = undefined;\n    paths.__noPromise = true;\n    var topLevelModel = this.constructor;\n    if (this.$__isNested) {\n      topLevelModel = this.$__.scope.constructor;\n      var nestedPath = this.$__.nestedPath;\n      paths.forEach(function(populateOptions) {\n        populateOptions.path = nestedPath + '.' + populateOptions.path;\n      });\n    }\n    topLevelModel.populate(this, paths, fn);\n  }\n\n  return this;\n};\n\n/**\n * Explicitly executes population and returns a promise. Useful for ES2015\n * integration.\n *\n * ####Example:\n *\n *     var promise = doc.\n *       populate('company').\n *       populate({\n *         path: 'notes',\n *         match: /airline/,\n *         select: 'text',\n *         model: 'modelName'\n *         options: opts\n *       }).\n *       execPopulate();\n *\n *     // summary\n *     doc.execPopulate().then(resolve, reject);\n *\n *\n * @see Document.populate #document_Document-populate\n * @api public\n * @return {Promise} promise that resolves to the document when population is done\n */\n\nDocument.prototype.execPopulate = function() {\n  var Promise = PromiseProvider.get();\n  var _this = this;\n  return new Promise.ES6(function(resolve, reject) {\n    _this.populate(function(error, res) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(res);\n      }\n    });\n  });\n};\n\n/**\n * Gets _id(s) used during population of the given `path`.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name)         // Dr.Seuss\n *       console.log(doc.populated('author')) // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, undefined is returned.\n *\n * @param {String} path\n * @return {Array|ObjectId|Number|Buffer|String|undefined}\n * @api public\n */\n\nDocument.prototype.populated = function(path, val, options) {\n  // val and options are internal\n\n  if (val === null || val === void 0) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    var v = this.$__.populated[path];\n    if (v) {\n      return v.value;\n    }\n    return undefined;\n  }\n\n  // internal\n\n  if (val === true) {\n    if (!this.$__.populated) {\n      return undefined;\n    }\n    return this.$__.populated[path];\n  }\n\n  this.$__.populated || (this.$__.populated = {});\n  this.$__.populated[path] = {value: val, options: options};\n  return val;\n};\n\n/**\n * Takes a populated field and returns it to its unpopulated state.\n *\n * ####Example:\n *\n *     Model.findOne().populate('author').exec(function (err, doc) {\n *       console.log(doc.author.name); // Dr.Seuss\n *       console.log(doc.depopulate('author'));\n *       console.log(doc.author); // '5144cf8050f071d979c118a7'\n *     })\n *\n * If the path was not populated, this is a no-op.\n *\n * @param {String} path\n * @return {Document} this\n * @see Document.populate #document_Document-populate\n * @api public\n */\n\nDocument.prototype.depopulate = function(path) {\n  if (typeof path === 'string') {\n    path = path.split(' ');\n  }\n  for (var i = 0; i < path.length; i++) {\n    var populatedIds = this.populated(path[i]);\n    if (!populatedIds) {\n      continue;\n    }\n    delete this.$__.populated[path[i]];\n    this.$set(path[i], populatedIds);\n  }\n  return this;\n};\n\n\n/**\n * Returns the full path to this document.\n *\n * @param {String} [path]\n * @return {String}\n * @api private\n * @method $__fullPath\n * @memberOf Document\n */\n\nDocument.prototype.$__fullPath = function(path) {\n  // overridden in SubDocuments\n  return path || '';\n};\n\n/*!\n * Module exports.\n */\n\nDocument.ValidationError = ValidationError;\nmodule.exports = exports = Document;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar handleBitwiseOperator = require('./operators/bitwise');\n\nvar utils = require('../utils');\n\nvar MongooseBuffer = require('../types/buffer');\n\nvar SchemaType = require('../schematype');\n\nvar Binary = MongooseBuffer.Binary;\nvar CastError = SchemaType.CastError;\nvar Document;\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaBuffer.schemaName = 'Buffer';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function (value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  return !!(value && value.length);\n};\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\n\nSchemaBuffer.prototype.cast = function (value, doc, init) {\n  var ret;\n\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (Buffer.isBuffer(value)) {\n      return value;\n    } else if (!utils.isObject(value)) {\n      throw new CastError('buffer', value, this.path);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  } // documents\n\n\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n\n      if (this.options.subtype != null) {\n        value._subtype = this.options.subtype;\n      }\n    }\n\n    return value;\n  } else if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('buffer', value, this.path);\n    }\n\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n  var type = typeof value;\n\n  if (type === 'string' || type === 'number' || Array.isArray(value)) {\n    if (type === 'number') {\n      value = [value];\n    }\n\n    ret = new MongooseBuffer(value, [this.path, doc]);\n\n    if (this.options.subtype != null) {\n      ret._subtype = this.options.subtype;\n    }\n\n    return ret;\n  }\n\n  throw new CastError('buffer', value, this.path);\n};\n/**\n * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)\n * for this buffer. You can find a [list of allowed subtypes here](http://api.mongodb.com/python/current/api/bson/binary.html).\n *\n * ####Example:\n *\n *     var s = new Schema({ uuid: { type: Buffer, subtype: 4 });\n *     var M = db.model('M', s);\n *     var m = new M({ uuid: 'test string' });\n *     m.uuid._subtype; // 4\n *\n * @param {Number} subtype the default subtype\n * @return {SchemaType} this\n * @api public\n */\n\n\nSchemaBuffer.prototype.subtype = function (subtype) {\n  this.options.subtype = subtype;\n  return this;\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $bitsAllClear: handleBitwiseOperator,\n  $bitsAnyClear: handleBitwiseOperator,\n  $bitsAllSet: handleBitwiseOperator,\n  $bitsAnySet: handleBitwiseOperator,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  var casted = this._castForQuery(val);\n\n  return casted ? casted.toObject({\n    transform: false,\n    virtuals: false\n  }) : casted;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaBuffer;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/schema/buffer.js"],"names":["handleBitwiseOperator","require","utils","MongooseBuffer","SchemaType","Binary","CastError","Document","SchemaBuffer","key","options","call","schemaName","prototype","Object","create","constructor","checkRequired","value","doc","_isRef","length","cast","init","ret","undefined","$__","wasPopulated","Buffer","isBuffer","isObject","path","$__fullPath","owner","ownerDocument","pop","populated","model","_id","isMongooseBuffer","subtype","_subtype","sub_type","type","Array","isArray","handleSingle","val","castForQuery","$conditionalHandlers","$bitsAllClear","$bitsAnyClear","$bitsAllSet","$bitsAnySet","$gt","$gte","$lt","$lte","$conditional","handler","arguments","Error","casted","_castForQuery","toObject","transform","virtuals","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar handleBitwiseOperator = require('./operators/bitwise');\nvar utils = require('../utils');\n\nvar MongooseBuffer = require('../types/buffer');\nvar SchemaType = require('../schematype');\n\nvar Binary = MongooseBuffer.Binary;\nvar CastError = SchemaType.CastError;\nvar Document;\n\n/**\n * Buffer SchemaType constructor\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBuffer(key, options) {\n  SchemaType.call(this, key, options, 'Buffer');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBuffer.schemaName = 'Buffer';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBuffer.prototype = Object.create(SchemaType.prototype);\nSchemaBuffer.prototype.constructor = SchemaBuffer;\n\n/**\n * Check if the given value satisfies a required validator. To satisfy a\n * required validator, a buffer must not be null or undefined and have\n * non-zero length.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaBuffer.prototype.checkRequired = function(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return !!(value && value.length);\n};\n\n/**\n * Casts contents\n *\n * @param {Object} value\n * @param {Document} doc document that triggers the casting\n * @param {Boolean} init\n * @api private\n */\n\nSchemaBuffer.prototype.cast = function(value, doc, init) {\n  var ret;\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (Buffer.isBuffer(value)) {\n      return value;\n    } else if (!utils.isObject(value)) {\n      throw new CastError('buffer', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // documents\n  if (value && value._id) {\n    value = value._id;\n  }\n\n  if (value && value.isMongooseBuffer) {\n    return value;\n  }\n\n  if (Buffer.isBuffer(value)) {\n    if (!value || !value.isMongooseBuffer) {\n      value = new MongooseBuffer(value, [this.path, doc]);\n      if (this.options.subtype != null) {\n        value._subtype = this.options.subtype;\n      }\n    }\n\n    return value;\n  } else if (value instanceof Binary) {\n    ret = new MongooseBuffer(value.value(true), [this.path, doc]);\n    if (typeof value.sub_type !== 'number') {\n      throw new CastError('buffer', value, this.path);\n    }\n    ret._subtype = value.sub_type;\n    return ret;\n  }\n\n  if (value === null) {\n    return value;\n  }\n\n  var type = typeof value;\n  if (type === 'string' || type === 'number' || Array.isArray(value)) {\n    if (type === 'number') {\n      value = [value];\n    }\n    ret = new MongooseBuffer(value, [this.path, doc]);\n    if (this.options.subtype != null) {\n      ret._subtype = this.options.subtype;\n    }\n    return ret;\n  }\n\n  throw new CastError('buffer', value, this.path);\n};\n\n/**\n * Sets the default [subtype](https://studio3t.com/whats-new/best-practices-uuid-mongodb/)\n * for this buffer. You can find a [list of allowed subtypes here](http://api.mongodb.com/python/current/api/bson/binary.html).\n *\n * ####Example:\n *\n *     var s = new Schema({ uuid: { type: Buffer, subtype: 4 });\n *     var M = db.model('M', s);\n *     var m = new M({ uuid: 'test string' });\n *     m.uuid._subtype; // 4\n *\n * @param {Number} subtype the default subtype\n * @return {SchemaType} this\n * @api public\n */\n\nSchemaBuffer.prototype.subtype = function(subtype) {\n  this.options.subtype = subtype;\n  return this;\n};\n\n/*!\n * ignore\n */\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nSchemaBuffer.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $bitsAllClear: handleBitwiseOperator,\n      $bitsAnyClear: handleBitwiseOperator,\n      $bitsAllSet: handleBitwiseOperator,\n      $bitsAnySet: handleBitwiseOperator,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [value]\n * @api private\n */\n\nSchemaBuffer.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with Buffer.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  var casted = this._castForQuery(val);\n  return casted ? casted.toObject({ transform: false, virtuals: false }) : casted;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBuffer;\n"]},"metadata":{},"sourceType":"script"}
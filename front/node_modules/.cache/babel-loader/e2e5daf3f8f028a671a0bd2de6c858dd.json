{"ast":null,"code":"/*\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\nvar winston = exports; //\n// use require method for webpack bundle\n//\n\nwinston.version = require('../package.json').version; //\n// Include transports defined by default by winston\n//\n\nwinston.transports = require('./winston/transports'); //\n// Expose utility methods\n//\n\nvar common = require('./winston/common');\n\nwinston.hash = common.hash;\nwinston.clone = common.clone;\nwinston.longestElement = common.longestElement;\nwinston.exception = require('./winston/exception');\nwinston.config = require('./winston/config');\nwinston.addColors = winston.config.addColors; //\n// Expose core Logging-related prototypes.\n//\n\nwinston.Container = require('./winston/container').Container;\nwinston.Logger = require('./winston/logger').Logger;\nwinston.Transport = require('./winston/transports/transport').Transport; //\n// We create and expose a default `Container` to `winston.loggers` so that the\n// programmer may manage multiple `winston.Logger` instances without any additional overhead.\n//\n// ### some-file1.js\n//\n//     var logger = require('winston').loggers.get('something');\n//\n// ### some-file2.js\n//\n//     var logger = require('winston').loggers.get('something');\n//\n\nwinston.loggers = new winston.Container(); //\n// We create and expose a 'defaultLogger' so that the programmer may do the\n// following without the need to create an instance of winston.Logger directly:\n//\n//     var winston = require('winston');\n//     winston.log('info', 'some message');\n//     winston.error('some error');\n//\n\nvar defaultLogger = new winston.Logger({\n  transports: [new winston.transports.Console()]\n}); //\n// Pass through the target methods onto `winston`.\n//\n\nvar methods = ['log', 'query', 'stream', 'add', 'remove', 'clear', 'profile', 'startTimer', 'extend', 'cli', 'handleExceptions', 'unhandleExceptions', 'configure'];\nwinston.padLevels = false;\ncommon.setLevels(winston, null, defaultLogger.levels);\nmethods.forEach(function (method) {\n  winston[method] = function () {\n    return defaultLogger[method].apply(defaultLogger, arguments);\n  };\n}); //\n// ### function cli ()\n// Configures the default winston logger to have the\n// settings for command-line interfaces: no timestamp,\n// colors enabled, padded output, and additional levels.\n//\n\nwinston.cli = function () {\n  winston.padLevels = true;\n  common.setLevels(winston, defaultLogger.levels, winston.config.cli.levels);\n  defaultLogger.setLevels(winston.config.cli.levels);\n  winston.config.addColors(winston.config.cli.colors);\n\n  if (defaultLogger.transports.console) {\n    defaultLogger.transports.console.colorize = true;\n    defaultLogger.transports.console.timestamp = false;\n  }\n\n  return winston;\n}; //\n// ### function setLevels (target)\n// #### @target {Object} Target levels to use\n// Sets the `target` levels specified on the default winston logger.\n//\n\n\nwinston.setLevels = function (target) {\n  common.setLevels(winston, defaultLogger.levels, target);\n  defaultLogger.setLevels(target);\n}; //\n// Define getter / setter for the default logger level\n// which need to be exposed by winston.\n//\n\n\nObject.defineProperty(winston, 'level', {\n  get: function () {\n    return defaultLogger.level;\n  },\n  set: function (val) {\n    defaultLogger.level = val;\n    Object.keys(defaultLogger.transports).forEach(function (key) {\n      defaultLogger.transports[key].level = val;\n    });\n  }\n}); //\n// Define getters / setters for appropriate properties of the\n// default logger which need to be exposed by winston.\n//\n\n['emitErrs', 'exitOnError', 'padLevels', 'levelLength', 'stripColors'].forEach(function (prop) {\n  Object.defineProperty(winston, prop, {\n    get: function () {\n      return defaultLogger[prop];\n    },\n    set: function (val) {\n      defaultLogger[prop] = val;\n    }\n  });\n}); //\n// @default {Object}\n// The default transports and exceptionHandlers for\n// the default winston logger.\n//\n\nObject.defineProperty(winston, 'default', {\n  get: function () {\n    return {\n      transports: defaultLogger.transports,\n      exceptionHandlers: defaultLogger.exceptionHandlers\n    };\n  }\n});","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/winston/lib/winston.js"],"names":["winston","exports","version","require","transports","common","hash","clone","longestElement","exception","config","addColors","Container","Logger","Transport","loggers","defaultLogger","Console","methods","padLevels","setLevels","levels","forEach","method","apply","arguments","cli","colors","console","colorize","timestamp","target","Object","defineProperty","get","level","set","val","keys","key","prop","exceptionHandlers"],"mappings":"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","sourcesContent":["/*\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar winston = exports;\n\n//\n// use require method for webpack bundle\n//\nwinston.version = require('../package.json').version\n\n//\n// Include transports defined by default by winston\n//\nwinston.transports = require('./winston/transports');\n\n//\n// Expose utility methods\n//\nvar common             = require('./winston/common');\nwinston.hash           = common.hash;\nwinston.clone          = common.clone;\nwinston.longestElement = common.longestElement;\nwinston.exception      = require('./winston/exception');\nwinston.config         = require('./winston/config');\nwinston.addColors      = winston.config.addColors;\n\n//\n// Expose core Logging-related prototypes.\n//\nwinston.Container      = require('./winston/container').Container;\nwinston.Logger         = require('./winston/logger').Logger;\nwinston.Transport      = require('./winston/transports/transport').Transport;\n\n//\n// We create and expose a default `Container` to `winston.loggers` so that the\n// programmer may manage multiple `winston.Logger` instances without any additional overhead.\n//\n// ### some-file1.js\n//\n//     var logger = require('winston').loggers.get('something');\n//\n// ### some-file2.js\n//\n//     var logger = require('winston').loggers.get('something');\n//\nwinston.loggers = new winston.Container();\n\n//\n// We create and expose a 'defaultLogger' so that the programmer may do the\n// following without the need to create an instance of winston.Logger directly:\n//\n//     var winston = require('winston');\n//     winston.log('info', 'some message');\n//     winston.error('some error');\n//\nvar defaultLogger = new winston.Logger({\n  transports: [new winston.transports.Console()]\n});\n\n//\n// Pass through the target methods onto `winston`.\n//\nvar methods = [\n  'log',\n  'query',\n  'stream',\n  'add',\n  'remove',\n  'clear',\n  'profile',\n  'startTimer',\n  'extend',\n  'cli',\n  'handleExceptions',\n  'unhandleExceptions',\n  'configure'\n];\nwinston.padLevels = false;\ncommon.setLevels(winston, null, defaultLogger.levels);\nmethods.forEach(function (method) {\n  winston[method] = function () {\n    return defaultLogger[method].apply(defaultLogger, arguments);\n  };\n});\n\n//\n// ### function cli ()\n// Configures the default winston logger to have the\n// settings for command-line interfaces: no timestamp,\n// colors enabled, padded output, and additional levels.\n//\nwinston.cli = function () {\n  winston.padLevels = true;\n  common.setLevels(winston, defaultLogger.levels, winston.config.cli.levels);\n  defaultLogger.setLevels(winston.config.cli.levels);\n  winston.config.addColors(winston.config.cli.colors);\n\n  if (defaultLogger.transports.console) {\n    defaultLogger.transports.console.colorize = true;\n    defaultLogger.transports.console.timestamp = false;\n  }\n\n  return winston;\n};\n\n//\n// ### function setLevels (target)\n// #### @target {Object} Target levels to use\n// Sets the `target` levels specified on the default winston logger.\n//\nwinston.setLevels = function (target) {\n  common.setLevels(winston, defaultLogger.levels, target);\n  defaultLogger.setLevels(target);\n};\n\n//\n// Define getter / setter for the default logger level\n// which need to be exposed by winston.\n//\nObject.defineProperty(winston, 'level', {\n  get: function () {\n    return defaultLogger.level;\n  },\n  set: function (val) {\n    defaultLogger.level = val;\n\n    Object.keys(defaultLogger.transports).forEach(function(key) {\n      defaultLogger.transports[key].level = val;\n    });\n  }\n});\n\n//\n// Define getters / setters for appropriate properties of the\n// default logger which need to be exposed by winston.\n//\n['emitErrs', 'exitOnError', 'padLevels', 'levelLength', 'stripColors'].forEach(function (prop) {\n  Object.defineProperty(winston, prop, {\n    get: function () {\n      return defaultLogger[prop];\n    },\n    set: function (val) {\n      defaultLogger[prop] = val;\n    }\n  });\n});\n\n//\n// @default {Object}\n// The default transports and exceptionHandlers for\n// the default winston logger.\n//\nObject.defineProperty(winston, 'default', {\n  get: function () {\n    return {\n      transports: defaultLogger.transports,\n      exceptionHandlers: defaultLogger.exceptionHandlers\n    };\n  }\n});\n"]},"metadata":{},"sourceType":"script"}
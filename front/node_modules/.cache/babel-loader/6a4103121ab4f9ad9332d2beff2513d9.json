{"ast":null,"code":"'use strict';\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\nvar util = require('util');\n/*!\n * OverwriteModel Error constructor.\n *\n * @inherits MongooseError\n */\n\n\nfunction DocumentNotFoundError(query) {\n  var msg;\n  var messages = MongooseError.messages;\n\n  if (messages.DocumentNotFoundError != null) {\n    msg = typeof messages.DocumentNotFoundError === 'function' ? messages.DocumentNotFoundError(query) : messages.DocumentNotFoundError;\n  } else {\n    msg = 'No document found for query \"' + util.inspect(query) + '\"';\n  }\n\n  MongooseError.call(this, msg);\n  this.name = 'DocumentNotFoundError';\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n\n  this.query = query;\n}\n/*!\n * Inherits from MongooseError.\n */\n\n\nDocumentNotFoundError.prototype = Object.create(MongooseError.prototype);\nDocumentNotFoundError.prototype.constructor = MongooseError;\n/*!\n * exports\n */\n\nmodule.exports = DocumentNotFoundError;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/error/notFound.js"],"names":["MongooseError","require","util","DocumentNotFoundError","query","msg","messages","inspect","call","name","Error","captureStackTrace","stack","prototype","Object","create","constructor","module","exports"],"mappings":"AAAA;AAEA;AACA;AACA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,IAAD,CAA3B;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,qBAAT,CAA+BC,KAA/B,EAAsC;AACpC,MAAIC,GAAJ;AACA,MAAIC,QAAQ,GAAGN,aAAa,CAACM,QAA7B;;AACA,MAAIA,QAAQ,CAACH,qBAAT,IAAkC,IAAtC,EAA4C;AAC1CE,IAAAA,GAAG,GAAG,OAAOC,QAAQ,CAACH,qBAAhB,KAA0C,UAA1C,GACJG,QAAQ,CAACH,qBAAT,CAA+BC,KAA/B,CADI,GAEJE,QAAQ,CAACH,qBAFX;AAGD,GAJD,MAIO;AACLE,IAAAA,GAAG,GAAG,kCAAkCH,IAAI,CAACK,OAAL,CAAaH,KAAb,CAAlC,GAAwD,GAA9D;AACD;;AAEDJ,EAAAA,aAAa,CAACQ,IAAd,CAAmB,IAAnB,EAAyBH,GAAzB;AAEA,OAAKI,IAAL,GAAY,uBAAZ;;AACA,MAAIC,KAAK,CAACC,iBAAV,EAA6B;AAC3BD,IAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB;AACD,GAFD,MAEO;AACL,SAAKC,KAAL,GAAa,IAAIF,KAAJ,GAAYE,KAAzB;AACD;;AAED,OAAKR,KAAL,GAAaA,KAAb;AACD;AAED;AACA;AACA;;;AAEAD,qBAAqB,CAACU,SAAtB,GAAkCC,MAAM,CAACC,MAAP,CAAcf,aAAa,CAACa,SAA5B,CAAlC;AACAV,qBAAqB,CAACU,SAAtB,CAAgCG,WAAhC,GAA8ChB,aAA9C;AAEA;AACA;AACA;;AAEAiB,MAAM,CAACC,OAAP,GAAiBf,qBAAjB","sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\nvar util = require('util');\n\n/*!\n * OverwriteModel Error constructor.\n *\n * @inherits MongooseError\n */\n\nfunction DocumentNotFoundError(query) {\n  var msg;\n  var messages = MongooseError.messages;\n  if (messages.DocumentNotFoundError != null) {\n    msg = typeof messages.DocumentNotFoundError === 'function' ?\n      messages.DocumentNotFoundError(query) :\n      messages.DocumentNotFoundError;\n  } else {\n    msg = 'No document found for query \"' + util.inspect(query) + '\"';\n  }\n\n  MongooseError.call(this, msg);\n\n  this.name = 'DocumentNotFoundError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n\n  this.query = query;\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nDocumentNotFoundError.prototype = Object.create(MongooseError.prototype);\nDocumentNotFoundError.prototype.constructor = MongooseError;\n\n/*!\n * exports\n */\n\nmodule.exports = DocumentNotFoundError;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     var fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @parma {Object} options\n * @api public\n */\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = options || {};\n}\n/**\n * Defines a getter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.get(function () {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\n\nVirtualType.prototype.get = function (fn) {\n  this.getters.push(fn);\n  return this;\n};\n/**\n * Defines a setter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.set(function (v) {\n *       var parts = v.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\n\nVirtualType.prototype.set = function (fn) {\n  this.setters.push(fn);\n  return this;\n};\n/**\n * Applies getters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all getters\n * @api public\n */\n\n\nVirtualType.prototype.applyGetters = function (value, scope) {\n  var v = value;\n\n  for (var l = this.getters.length - 1; l >= 0; l--) {\n    v = this.getters[l].call(scope, v, this);\n  }\n\n  return v;\n};\n/**\n * Applies setters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all setters\n * @api public\n */\n\n\nVirtualType.prototype.applySetters = function (value, scope) {\n  var v = value;\n\n  for (var l = this.setters.length - 1; l >= 0; l--) {\n    v = this.setters[l].call(scope, v, this);\n  }\n\n  return v;\n};\n/*!\n * exports\n */\n\n\nmodule.exports = VirtualType;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/virtualtype.js"],"names":["VirtualType","options","name","path","getters","setters","prototype","get","fn","push","set","applyGetters","value","scope","v","l","length","call","applySetters","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoC;AAClC,OAAKC,IAAL,GAAYD,IAAZ;AACA,OAAKE,OAAL,GAAe,EAAf;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKJ,OAAL,GAAeA,OAAO,IAAI,EAA1B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAD,WAAW,CAACM,SAAZ,CAAsBC,GAAtB,GAA4B,UAASC,EAAT,EAAa;AACvC,OAAKJ,OAAL,CAAaK,IAAb,CAAkBD,EAAlB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAR,WAAW,CAACM,SAAZ,CAAsBI,GAAtB,GAA4B,UAASF,EAAT,EAAa;AACvC,OAAKH,OAAL,CAAaI,IAAb,CAAkBD,EAAlB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAR,WAAW,CAACM,SAAZ,CAAsBK,YAAtB,GAAqC,UAASC,KAAT,EAAgBC,KAAhB,EAAuB;AAC1D,MAAIC,CAAC,GAAGF,KAAR;;AACA,OAAK,IAAIG,CAAC,GAAG,KAAKX,OAAL,CAAaY,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjDD,IAAAA,CAAC,GAAG,KAAKV,OAAL,CAAaW,CAAb,EAAgBE,IAAhB,CAAqBJ,KAArB,EAA4BC,CAA5B,EAA+B,IAA/B,CAAJ;AACD;;AACD,SAAOA,CAAP;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,WAAW,CAACM,SAAZ,CAAsBY,YAAtB,GAAqC,UAASN,KAAT,EAAgBC,KAAhB,EAAuB;AAC1D,MAAIC,CAAC,GAAGF,KAAR;;AACA,OAAK,IAAIG,CAAC,GAAG,KAAKV,OAAL,CAAaW,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjDD,IAAAA,CAAC,GAAG,KAAKT,OAAL,CAAaU,CAAb,EAAgBE,IAAhB,CAAqBJ,KAArB,EAA4BC,CAA5B,EAA+B,IAA/B,CAAJ;AACD;;AACD,SAAOA,CAAP;AACD,CAND;AAQA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiBpB,WAAjB","sourcesContent":["\n/**\n * VirtualType constructor\n *\n * This is what mongoose uses to define virtual attributes via `Schema.prototype.virtual`.\n *\n * ####Example:\n *\n *     var fullname = schema.virtual('fullname');\n *     fullname instanceof mongoose.VirtualType // true\n *\n * @parma {Object} options\n * @api public\n */\n\nfunction VirtualType(options, name) {\n  this.path = name;\n  this.getters = [];\n  this.setters = [];\n  this.options = options || {};\n}\n\n/**\n * Defines a getter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.get(function () {\n *       return this.name.first + ' ' + this.name.last;\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.get = function(fn) {\n  this.getters.push(fn);\n  return this;\n};\n\n/**\n * Defines a setter.\n *\n * ####Example:\n *\n *     var virtual = schema.virtual('fullname');\n *     virtual.set(function (v) {\n *       var parts = v.split(' ');\n *       this.name.first = parts[0];\n *       this.name.last = parts[1];\n *     });\n *\n * @param {Function} fn\n * @return {VirtualType} this\n * @api public\n */\n\nVirtualType.prototype.set = function(fn) {\n  this.setters.push(fn);\n  return this;\n};\n\n/**\n * Applies getters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all getters\n * @api public\n */\n\nVirtualType.prototype.applyGetters = function(value, scope) {\n  var v = value;\n  for (var l = this.getters.length - 1; l >= 0; l--) {\n    v = this.getters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/**\n * Applies setters to `value` using optional `scope`.\n *\n * @param {Object} value\n * @param {Object} scope\n * @return {any} the value after applying all setters\n * @api public\n */\n\nVirtualType.prototype.applySetters = function(value, scope) {\n  var v = value;\n  for (var l = this.setters.length - 1; l >= 0; l--) {\n    v = this.setters[l].call(scope, v, this);\n  }\n  return v;\n};\n\n/*!\n * exports\n */\n\nmodule.exports = VirtualType;\n"]},"metadata":{},"sourceType":"script"}
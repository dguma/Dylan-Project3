{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar MongooseError = require('./');\n\nvar util = require('util');\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\n\nfunction CastError(type, value, path, reason) {\n  var stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'/, '\"').replace(/'$/, '\"');\n\n  if (stringValue.charAt(0) !== '\"') {\n    stringValue = '\"' + stringValue + '\"';\n  }\n\n  MongooseError.call(this, 'Cast to ' + type + ' failed for value ' + stringValue + ' at path \"' + path + '\"');\n  this.name = 'CastError';\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n\n  this.stringValue = stringValue;\n  this.kind = type;\n  this.value = value;\n  this.path = path;\n  this.reason = reason;\n}\n/*!\n * Inherits from MongooseError.\n */\n\n\nCastError.prototype = Object.create(MongooseError.prototype);\nCastError.prototype.constructor = MongooseError;\n/*!\n * ignore\n */\n\nCastError.prototype.setModel = function (model) {\n  this.model = model;\n  this.message = 'Cast to ' + this.kind + ' failed for value ' + this.stringValue + ' at path \"' + this.path + '\"' + ' for model \"' + model.modelName + '\"';\n};\n/*!\n * exports\n */\n\n\nmodule.exports = CastError;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/error/cast.js"],"names":["MongooseError","require","util","CastError","type","value","path","reason","stringValue","inspect","replace","charAt","call","name","Error","captureStackTrace","stack","kind","prototype","Object","create","constructor","setModel","model","message","modelName","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,IAAD,CAA3B;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,MAAtC,EAA8C;AAC5C,MAAIC,WAAW,GAAGN,IAAI,CAACO,OAAL,CAAaJ,KAAb,CAAlB;AACAG,EAAAA,WAAW,GAAGA,WAAW,CAACE,OAAZ,CAAoB,IAApB,EAA0B,GAA1B,EAA+BA,OAA/B,CAAuC,IAAvC,EAA6C,GAA7C,CAAd;;AACA,MAAIF,WAAW,CAACG,MAAZ,CAAmB,CAAnB,MAA0B,GAA9B,EAAmC;AACjCH,IAAAA,WAAW,GAAG,MAAMA,WAAN,GAAoB,GAAlC;AACD;;AACDR,EAAAA,aAAa,CAACY,IAAd,CAAmB,IAAnB,EAAyB,aAAaR,IAAb,GAAoB,oBAApB,GACvBI,WADuB,GACT,YADS,GACMF,IADN,GACa,GADtC;AAEA,OAAKO,IAAL,GAAY,WAAZ;;AACA,MAAIC,KAAK,CAACC,iBAAV,EAA6B;AAC3BD,IAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB;AACD,GAFD,MAEO;AACL,SAAKC,KAAL,GAAa,IAAIF,KAAJ,GAAYE,KAAzB;AACD;;AACD,OAAKR,WAAL,GAAmBA,WAAnB;AACA,OAAKS,IAAL,GAAYb,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD;AAED;AACA;AACA;;;AAEAJ,SAAS,CAACe,SAAV,GAAsBC,MAAM,CAACC,MAAP,CAAcpB,aAAa,CAACkB,SAA5B,CAAtB;AACAf,SAAS,CAACe,SAAV,CAAoBG,WAApB,GAAkCrB,aAAlC;AAEA;AACA;AACA;;AAEAG,SAAS,CAACe,SAAV,CAAoBI,QAApB,GAA+B,UAASC,KAAT,EAAgB;AAC7C,OAAKA,KAAL,GAAaA,KAAb;AACA,OAAKC,OAAL,GAAe,aAAa,KAAKP,IAAlB,GAAyB,oBAAzB,GACb,KAAKT,WADQ,GACM,YADN,GACqB,KAAKF,IAD1B,GACiC,GADjC,GACuC,cADvC,GAEbiB,KAAK,CAACE,SAFO,GAEK,GAFpB;AAGD,CALD;AAOA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiBxB,SAAjB","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\nvar util = require('util');\n\n/**\n * Casting Error constructor.\n *\n * @param {String} type\n * @param {String} value\n * @inherits MongooseError\n * @api private\n */\n\nfunction CastError(type, value, path, reason) {\n  var stringValue = util.inspect(value);\n  stringValue = stringValue.replace(/^'/, '\"').replace(/'$/, '\"');\n  if (stringValue.charAt(0) !== '\"') {\n    stringValue = '\"' + stringValue + '\"';\n  }\n  MongooseError.call(this, 'Cast to ' + type + ' failed for value ' +\n    stringValue + ' at path \"' + path + '\"');\n  this.name = 'CastError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n  this.stringValue = stringValue;\n  this.kind = type;\n  this.value = value;\n  this.path = path;\n  this.reason = reason;\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nCastError.prototype = Object.create(MongooseError.prototype);\nCastError.prototype.constructor = MongooseError;\n\n/*!\n * ignore\n */\n\nCastError.prototype.setModel = function(model) {\n  this.model = model;\n  this.message = 'Cast to ' + this.kind + ' failed for value ' +\n    this.stringValue + ' at path \"' + this.path + '\"' + ' for model \"' +\n    model.modelName + '\"';\n};\n\n/*!\n * exports\n */\n\nmodule.exports = CastError;\n"]},"metadata":{},"sourceType":"script"}
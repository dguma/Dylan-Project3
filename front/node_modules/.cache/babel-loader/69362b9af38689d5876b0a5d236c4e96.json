{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\n\nvar CastError = SchemaType.CastError;\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaBoolean.schemaName = 'Boolean';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function (value) {\n  return value === true || value === false;\n};\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\n\nSchemaBoolean.prototype.cast = function (value, model) {\n  if (value === null) {\n    return value;\n  }\n\n  if (this.options.strictBool || model && model.schema.options.strictBool && this.options.strictBool !== false) {\n    // strict mode (throws if value is not a boolean, instead of converting)\n    if (value === true || value === 'true' || value === 1 || value === '1') {\n      return true;\n    }\n\n    if (value === false || value === 'false' || value === 0 || value === '0') {\n      return false;\n    }\n\n    throw new CastError('boolean', value, this.path);\n  } else {\n    // legacy mode\n    if (value === '0') {\n      return false;\n    }\n\n    if (value === 'true') {\n      return true;\n    }\n\n    if (value === 'false') {\n      return false;\n    }\n\n    return !!value;\n  }\n};\n\nSchemaBoolean.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaBoolean;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/schema/boolean.js"],"names":["utils","require","SchemaType","CastError","SchemaBoolean","path","options","call","schemaName","prototype","Object","create","constructor","checkRequired","value","cast","model","strictBool","schema","$conditionalHandlers","castForQuery","$conditional","val","handler","arguments","length","_castForQuery","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar utils = require('../utils');\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\n\n/**\n * Boolean SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaBoolean(path, options) {\n  SchemaType.call(this, path, options, 'Boolean');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaBoolean.schemaName = 'Boolean';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaBoolean.prototype = Object.create(SchemaType.prototype);\nSchemaBoolean.prototype.constructor = SchemaBoolean;\n\n/**\n * Check if the given value satisfies a required validator. For a boolean\n * to satisfy a required validator, it must be strictly equal to true or to\n * false.\n *\n * @param {Any} value\n * @return {Boolean}\n * @api public\n */\n\nSchemaBoolean.prototype.checkRequired = function(value) {\n  return value === true || value === false;\n};\n\n/**\n * Casts to boolean\n *\n * @param {Object} value\n * @param {Object} model - this value is optional\n * @api private\n */\n\nSchemaBoolean.prototype.cast = function(value, model) {\n  if (value === null) {\n    return value;\n  }\n\n  if (this.options.strictBool || (model && model.schema.options.strictBool && this.options.strictBool !== false)) {\n    // strict mode (throws if value is not a boolean, instead of converting)\n    if (value === true || value === 'true' || value === 1 || value === '1') {\n      return true;\n    }\n    if (value === false || value === 'false' || value === 0 || value === '0') {\n      return false;\n    }\n    throw new CastError('boolean', value, this.path);\n  } else {\n    // legacy mode\n    if (value === '0') {\n      return false;\n    }\n    if (value === 'true') {\n      return true;\n    }\n    if (value === 'false') {\n      return false;\n    }\n    return !!value;\n  }\n};\n\nSchemaBoolean.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {});\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} val\n * @api private\n */\n\nSchemaBoolean.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = SchemaBoolean.$conditionalHandlers[$conditional];\n\n    if (handler) {\n      return handler.call(this, val);\n    }\n\n    return this._castForQuery(val);\n  }\n\n  return this._castForQuery($conditional);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaBoolean;\n"]},"metadata":{},"sourceType":"script"}
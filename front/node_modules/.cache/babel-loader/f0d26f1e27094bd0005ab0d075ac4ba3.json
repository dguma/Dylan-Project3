{"ast":null,"code":"/*\n * env.js: Simple memory-based store for environment variables\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\nvar util = require('util'),\n    common = require('../common'),\n    Memory = require('./memory').Memory; //\n// ### function Env (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Env nconf store, a simple abstraction\n// around the Memory store that can read process environment variables.\n//\n\n\nvar Env = exports.Env = function (options) {\n  Memory.call(this, options);\n  options = options || {};\n  this.type = 'env';\n  this.readOnly = true;\n  this.whitelist = options.whitelist || [];\n  this.separator = options.separator || '';\n  this.lowerCase = options.lowerCase || false;\n\n  if ({}.toString.call(options.match) === '[object RegExp]' && typeof options !== 'string') {\n    this.match = options.match;\n  }\n\n  if (options instanceof Array) {\n    this.whitelist = options;\n  }\n\n  if (typeof options === 'string') {\n    this.separator = options;\n  }\n}; // Inherit from the Memory store\n\n\nutil.inherits(Env, Memory); //\n// ### function loadSync ()\n// Loads the data passed in from `process.env` into this instance.\n//\n\nEnv.prototype.loadSync = function () {\n  this.loadEnv();\n  return this.store;\n}; //\n// ### function loadEnv ()\n// Loads the data passed in from `process.env` into this instance.\n//\n\n\nEnv.prototype.loadEnv = function () {\n  var self = this;\n  var env = process.env;\n\n  if (this.lowerCase) {\n    env = {};\n    Object.keys(process.env).forEach(function (key) {\n      env[key.toLowerCase()] = process.env[key];\n    });\n  }\n\n  this.readOnly = false;\n  Object.keys(env).filter(function (key) {\n    if (self.match && self.whitelist.length) {\n      return key.match(self.match) || self.whitelist.indexOf(key) !== -1;\n    } else if (self.match) {\n      return key.match(self.match);\n    } else {\n      return !self.whitelist.length || self.whitelist.indexOf(key) !== -1;\n    }\n  }).forEach(function (key) {\n    if (self.separator) {\n      self.set(common.key.apply(common, key.split(self.separator)), env[key]);\n    } else {\n      self.set(key, env[key]);\n    }\n  });\n  this.readOnly = true;\n  return this.store;\n};","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/nconf/lib/nconf/stores/env.js"],"names":["util","require","common","Memory","Env","exports","options","call","type","readOnly","whitelist","separator","lowerCase","toString","match","Array","inherits","prototype","loadSync","loadEnv","store","self","env","process","Object","keys","forEach","key","toLowerCase","filter","length","indexOf","set","apply","split"],"mappings":"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","sourcesContent":["/*\n * env.js: Simple memory-based store for environment variables\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar util = require('util'),\n    common = require('../common'),\n    Memory = require('./memory').Memory;\n\n//\n// ### function Env (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Env nconf store, a simple abstraction\n// around the Memory store that can read process environment variables.\n//\nvar Env = exports.Env = function (options) {\n  Memory.call(this, options);\n\n  options        = options || {};\n  this.type      = 'env';\n  this.readOnly  = true;\n  this.whitelist = options.whitelist || [];\n  this.separator = options.separator || '';\n  this.lowerCase = options.lowerCase || false;\n\n  if (({}).toString.call(options.match) === '[object RegExp]'\n      && typeof options !== 'string') {\n    this.match = options.match;\n  }\n\n  if (options instanceof Array) {\n    this.whitelist = options;\n  }\n  if (typeof(options) === 'string') {\n    this.separator = options;\n  }\n};\n\n// Inherit from the Memory store\nutil.inherits(Env, Memory);\n\n//\n// ### function loadSync ()\n// Loads the data passed in from `process.env` into this instance.\n//\nEnv.prototype.loadSync = function () {\n  this.loadEnv();\n  return this.store;\n};\n\n//\n// ### function loadEnv ()\n// Loads the data passed in from `process.env` into this instance.\n//\nEnv.prototype.loadEnv = function () {\n  var self = this;\n\n  var env = process.env;\n\n  if (this.lowerCase) {\n    env = {};\n    Object.keys(process.env).forEach(function (key) {\n      env[key.toLowerCase()] = process.env[key];\n    });\n  }\n\n  this.readOnly = false;\n  Object.keys(env).filter(function (key) {\n    if (self.match && self.whitelist.length) {\n      return key.match(self.match) || self.whitelist.indexOf(key) !== -1\n    }\n    else if (self.match) {\n      return key.match(self.match);\n    }\n    else {\n      return !self.whitelist.length || self.whitelist.indexOf(key) !== -1\n    }\n  }).forEach(function (key) {\n    if (self.separator) {\n      self.set(common.key.apply(common, key.split(self.separator)), env[key]);\n    }\n    else {\n      self.set(key, env[key]);\n    }\n  });\n\n  this.readOnly = true;\n  return this.store;\n};\n\n"]},"metadata":{},"sourceType":"script"}
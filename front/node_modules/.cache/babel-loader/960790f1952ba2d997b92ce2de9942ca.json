{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar MongooseError = require('./');\n/**\n * Constructor for errors that happen when a parameter that's expected to be\n * an object isn't an object\n *\n * @param {Any} value\n * @param {String} paramName\n * @param {String} fnName\n * @inherits MongooseError\n * @api private\n */\n\n\nfunction ObjectParameterError(value, paramName, fnName) {\n  MongooseError.call(this, 'Parameter \"' + paramName + '\" to ' + fnName + '() must be an object, got ' + value.toString());\n  this.name = 'ObjectParameterError';\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n/*!\n * Inherits from MongooseError.\n */\n\n\nObjectParameterError.prototype = Object.create(MongooseError.prototype);\nObjectParameterError.prototype.constructor = MongooseError;\nmodule.exports = ObjectParameterError;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/error/objectParameter.js"],"names":["MongooseError","require","ObjectParameterError","value","paramName","fnName","call","toString","name","Error","captureStackTrace","stack","prototype","Object","create","constructor","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,IAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,SAArC,EAAgDC,MAAhD,EAAwD;AACtDL,EAAAA,aAAa,CAACM,IAAd,CAAmB,IAAnB,EAAyB,gBAAgBF,SAAhB,GAA4B,OAA5B,GAAsCC,MAAtC,GACvB,4BADuB,GACQF,KAAK,CAACI,QAAN,EADjC;AAEA,OAAKC,IAAL,GAAY,sBAAZ;;AACA,MAAIC,KAAK,CAACC,iBAAV,EAA6B;AAC3BD,IAAAA,KAAK,CAACC,iBAAN,CAAwB,IAAxB;AACD,GAFD,MAEO;AACL,SAAKC,KAAL,GAAa,IAAIF,KAAJ,GAAYE,KAAzB;AACD;AACF;AAED;AACA;AACA;;;AAEAT,oBAAoB,CAACU,SAArB,GAAiCC,MAAM,CAACC,MAAP,CAAcd,aAAa,CAACY,SAA5B,CAAjC;AACAV,oBAAoB,CAACU,SAArB,CAA+BG,WAA/B,GAA6Cf,aAA7C;AAEAgB,MAAM,CAACC,OAAP,GAAiBf,oBAAjB","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar MongooseError = require('./');\n\n/**\n * Constructor for errors that happen when a parameter that's expected to be\n * an object isn't an object\n *\n * @param {Any} value\n * @param {String} paramName\n * @param {String} fnName\n * @inherits MongooseError\n * @api private\n */\n\nfunction ObjectParameterError(value, paramName, fnName) {\n  MongooseError.call(this, 'Parameter \"' + paramName + '\" to ' + fnName +\n    '() must be an object, got ' + value.toString());\n  this.name = 'ObjectParameterError';\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this);\n  } else {\n    this.stack = new Error().stack;\n  }\n}\n\n/*!\n * Inherits from MongooseError.\n */\n\nObjectParameterError.prototype = Object.create(MongooseError.prototype);\nObjectParameterError.prototype.constructor = MongooseError;\n\nmodule.exports = ObjectParameterError;\n"]},"metadata":{},"sourceType":"script"}
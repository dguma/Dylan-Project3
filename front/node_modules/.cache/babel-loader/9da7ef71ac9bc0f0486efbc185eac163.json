{"ast":null,"code":"/*\n * utils.js: Utility functions for the nconf module.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\nvar fs = require('fs'),\n    async = require('async'),\n    formats = require('./formats'),\n    Memory = require('./stores/memory').Memory;\n\nvar common = exports; //\n// ### function path (key)\n// #### @key {string} The ':' delimited key to split\n// Returns a fully-qualified path to a nested nconf key.\n// If given null or undefined it should return an empty path.\n// '' should still be respected as a path.\n//\n\ncommon.path = function (key, separator) {\n  separator = separator || ':';\n  return key == null ? [] : key.split(separator);\n}; //\n// ### function key (arguments)\n// Returns a `:` joined string from the `arguments`.\n//\n\n\ncommon.key = function () {\n  return Array.prototype.slice.call(arguments).join(':');\n}; //\n// ### function key (arguments)\n// Returns a joined string from the `arguments`,\n// first argument is the join delimiter.\n//\n\n\ncommon.keyed = function () {\n  return Array.prototype.slice.call(arguments, 1).join(arguments[0]);\n}; //\n// ### function loadFiles (files, callback)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// #### @callback {function} Continuation to respond to when complete.\n// Loads all the data in the specified `files`.\n//\n\n\ncommon.loadFiles = function (files, callback) {\n  if (!files) {\n    return callback(null, {});\n  }\n\n  var options = Array.isArray(files) ? {\n    files: files\n  } : files; //\n  // Set the default JSON format if not already\n  // specified\n  //\n\n  options.format = options.format || formats.json;\n\n  function parseFile(file, next) {\n    fs.readFile(file, function (err, data) {\n      return !err ? next(null, options.format.parse(data.toString())) : next(err);\n    });\n  }\n\n  async.map(options.files, parseFile, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n}; //\n// ### function loadFilesSync (files)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// Loads all the data in the specified `files` synchronously.\n//\n\n\ncommon.loadFilesSync = function (files) {\n  if (!files) {\n    return;\n  } //\n  // Set the default JSON format if not already\n  // specified\n  //\n\n\n  var options = Array.isArray(files) ? {\n    files: files\n  } : files;\n  options.format = options.format || formats.json;\n  return common.merge(options.files.map(function (file) {\n    return options.format.parse(fs.readFileSync(file, 'utf8'));\n  }));\n}; //\n// ### function merge (objs)\n// #### @objs {Array} Array of object literals to merge\n// Merges the specified `objs` using a temporary instance\n// of `stores.Memory`.\n//\n\n\ncommon.merge = function (objs) {\n  var store = new Memory();\n  objs.forEach(function (obj) {\n    Object.keys(obj).forEach(function (key) {\n      store.merge(key, obj[key]);\n    });\n  });\n  return store.store;\n}; //\n// ### function capitalize (str)\n// #### @str {string} String to capitalize\n// Capitalizes the specified `str`.\n//\n\n\ncommon.capitalize = function (str) {\n  return str && str[0].toUpperCase() + str.slice(1);\n};","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/nconf/lib/nconf/common.js"],"names":["fs","require","async","formats","Memory","common","exports","path","key","separator","split","Array","prototype","slice","call","arguments","join","keyed","loadFiles","files","callback","options","isArray","format","json","parseFile","file","next","readFile","err","data","parse","toString","map","objs","merge","loadFilesSync","readFileSync","store","forEach","obj","Object","keys","capitalize","str","toUpperCase"],"mappings":"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","sourcesContent":["/*\n * utils.js: Utility functions for the nconf module.\n *\n * (C) 2011, Charlie Robbins and the Contributors.\n *\n */\n\nvar fs = require('fs'),\n    async = require('async'),\n    formats = require('./formats'),\n    Memory = require('./stores/memory').Memory;\n\nvar common = exports;\n\n//\n// ### function path (key)\n// #### @key {string} The ':' delimited key to split\n// Returns a fully-qualified path to a nested nconf key.\n// If given null or undefined it should return an empty path.\n// '' should still be respected as a path.\n//\ncommon.path = function (key, separator) {\n  separator = separator || ':';\n  return key == null ? [] : key.split(separator);\n};\n\n//\n// ### function key (arguments)\n// Returns a `:` joined string from the `arguments`.\n//\ncommon.key = function () {\n  return Array.prototype.slice.call(arguments).join(':');\n};\n\n//\n// ### function key (arguments)\n// Returns a joined string from the `arguments`,\n// first argument is the join delimiter.\n//\ncommon.keyed = function () {\n  return Array.prototype.slice.call(arguments, 1).join(arguments[0]);\n};\n\n//\n// ### function loadFiles (files, callback)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// #### @callback {function} Continuation to respond to when complete.\n// Loads all the data in the specified `files`.\n//\ncommon.loadFiles = function (files, callback) {\n  if (!files) {\n    return callback(null, {});\n  }\n\n  var options = Array.isArray(files) ? { files: files } : files;\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  options.format = options.format || formats.json;\n\n  function parseFile (file, next) {\n    fs.readFile(file, function (err, data) {\n      return !err\n        ? next(null, options.format.parse(data.toString()))\n        : next(err);\n    });\n  }\n\n  async.map(options.files, parseFile, function (err, objs) {\n    return err ? callback(err) : callback(null, common.merge(objs));\n  });\n};\n\n//\n// ### function loadFilesSync (files)\n// #### @files {Object|Array} List of files (or settings object) to load.\n// Loads all the data in the specified `files` synchronously.\n//\ncommon.loadFilesSync = function (files) {\n  if (!files) {\n    return;\n  }\n\n  //\n  // Set the default JSON format if not already\n  // specified\n  //\n  var options = Array.isArray(files) ? { files: files } : files;\n  options.format = options.format || formats.json;\n\n  return common.merge(options.files.map(function (file) {\n    return options.format.parse(fs.readFileSync(file, 'utf8'));\n  }));\n};\n\n//\n// ### function merge (objs)\n// #### @objs {Array} Array of object literals to merge\n// Merges the specified `objs` using a temporary instance\n// of `stores.Memory`.\n//\ncommon.merge = function (objs) {\n  var store = new Memory();\n\n  objs.forEach(function (obj) {\n    Object.keys(obj).forEach(function (key) {\n      store.merge(key, obj[key]);\n    });\n  });\n\n  return store.store;\n};\n\n//\n// ### function capitalize (str)\n// #### @str {string} String to capitalize\n// Capitalizes the specified `str`.\n//\ncommon.capitalize = function (str) {\n  return str && str[0].toUpperCase() + str.slice(1);\n};\n"]},"metadata":{},"sourceType":"script"}
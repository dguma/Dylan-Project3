{"ast":null,"code":"/*!\n * Module requirements.\n */\nvar CastError = require('../../error/cast');\n/*!\n * ignore\n */\n\n\nfunction handleBitwiseOperator(val) {\n  var _this = this;\n\n  if (Array.isArray(val)) {\n    return val.map(function (v) {\n      return _castNumber(_this.path, v);\n    });\n  } else if (Buffer.isBuffer(val)) {\n    return val;\n  } // Assume trying to cast to number\n\n\n  return _castNumber(_this.path, val);\n}\n/*!\n * ignore\n */\n\n\nfunction _castNumber(path, num) {\n  var v = Number(num);\n\n  if (isNaN(v)) {\n    throw new CastError('number', num, path);\n  }\n\n  return v;\n}\n\nmodule.exports = handleBitwiseOperator;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/schema/operators/bitwise.js"],"names":["CastError","require","handleBitwiseOperator","val","_this","Array","isArray","map","v","_castNumber","path","Buffer","isBuffer","num","Number","isNaN","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;;;AAEA,SAASC,qBAAT,CAA+BC,GAA/B,EAAoC;AAClC,MAAIC,KAAK,GAAG,IAAZ;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AACtB,WAAOA,GAAG,CAACI,GAAJ,CAAQ,UAASC,CAAT,EAAY;AACzB,aAAOC,WAAW,CAACL,KAAK,CAACM,IAAP,EAAaF,CAAb,CAAlB;AACD,KAFM,CAAP;AAGD,GAJD,MAIO,IAAIG,MAAM,CAACC,QAAP,CAAgBT,GAAhB,CAAJ,EAA0B;AAC/B,WAAOA,GAAP;AACD,GARiC,CASlC;;;AACA,SAAOM,WAAW,CAACL,KAAK,CAACM,IAAP,EAAaP,GAAb,CAAlB;AACD;AAED;AACA;AACA;;;AAEA,SAASM,WAAT,CAAqBC,IAArB,EAA2BG,GAA3B,EAAgC;AAC9B,MAAIL,CAAC,GAAGM,MAAM,CAACD,GAAD,CAAd;;AACA,MAAIE,KAAK,CAACP,CAAD,CAAT,EAAc;AACZ,UAAM,IAAIR,SAAJ,CAAc,QAAd,EAAwBa,GAAxB,EAA6BH,IAA7B,CAAN;AACD;;AACD,SAAOF,CAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBf,qBAAjB","sourcesContent":["/*!\n * Module requirements.\n */\n\nvar CastError = require('../../error/cast');\n\n/*!\n * ignore\n */\n\nfunction handleBitwiseOperator(val) {\n  var _this = this;\n  if (Array.isArray(val)) {\n    return val.map(function(v) {\n      return _castNumber(_this.path, v);\n    });\n  } else if (Buffer.isBuffer(val)) {\n    return val;\n  }\n  // Assume trying to cast to number\n  return _castNumber(_this.path, val);\n}\n\n/*!\n * ignore\n */\n\nfunction _castNumber(path, num) {\n  var v = Number(num);\n  if (isNaN(v)) {\n    throw new CastError('number', num, path);\n  }\n  return v;\n}\n\nmodule.exports = handleBitwiseOperator;\n"]},"metadata":{},"sourceType":"script"}
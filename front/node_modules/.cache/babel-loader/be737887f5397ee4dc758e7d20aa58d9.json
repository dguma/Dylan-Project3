{"ast":null,"code":"/*\n * logger.js: Core logger object used by winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\nvar events = require('events'),\n    util = require('util'),\n    async = require('async'),\n    config = require('./config'),\n    common = require('./common'),\n    exception = require('./exception'),\n    Stream = require('stream').Stream;\n\nvar formatRegExp = /%[sdj%]/g; //\n// ### function Logger (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Logger object responsible\n// for persisting log messages and metadata to one or more transports.\n//\n\nvar Logger = exports.Logger = function (options) {\n  events.EventEmitter.call(this);\n  this.configure(options);\n}; //\n// Inherit from `events.EventEmitter`.\n//\n\n\nutil.inherits(Logger, events.EventEmitter); //\n// ### function configure (options)\n// This will wholesale reconfigure this instance by:\n// 1. Resetting all transports. Older transports will be removed implicitly.\n// 2. Set all other options including levels, colors, rewriters, filters,\n//    exceptionHandlers, etc.\n//\n\nLogger.prototype.configure = function (options) {\n  var self = this; //\n  // If we have already been setup with transports\n  // then remove them before proceeding.\n  //\n\n  if (Array.isArray(this._names) && this._names.length) {\n    this.clear();\n  }\n\n  options = options || {};\n  this.transports = {};\n  this._names = [];\n\n  if (options.transports) {\n    options.transports.forEach(function (transport) {\n      self.add(transport, null, true);\n    });\n  } //\n  // Set Levels and default logging level\n  //\n\n\n  this.padLevels = options.padLevels || false;\n  this.setLevels(options.levels);\n\n  if (options.colors) {\n    config.addColors(options.colors);\n  } //\n  // Hoist other options onto this instance.\n  //\n\n\n  this.id = options.id || null;\n  this.level = options.level || 'info';\n  this.emitErrs = options.emitErrs || false;\n  this.stripColors = options.stripColors || false;\n  this.exitOnError = typeof options.exitOnError !== 'undefined' ? options.exitOnError : true; //\n  // Setup internal state as empty Objects even though it is\n  // defined lazily later to ensure a strong existential API contract.\n  //\n\n  this.exceptionHandlers = {};\n  this.profilers = {};\n  ['rewriters', 'filters'].forEach(function (kind) {\n    self[kind] = Array.isArray(options[kind]) ? options[kind] : [];\n  });\n\n  if (options.exceptionHandlers) {\n    this.handleExceptions(options.exceptionHandlers);\n  }\n}; //\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\n\n\nLogger.prototype.log = function (level) {\n  var args = Array.prototype.slice.call(arguments, 1),\n      self = this,\n      transports;\n\n  while (args[args.length - 1] === null) {\n    args.pop();\n  } //\n  // Determining what is `meta` and what are arguments for string interpolation\n  // turns out to be VERY tricky. e.g. in the cases like this:\n  //\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\n  //\n\n\n  var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null; //\n  // Handle errors appropriately.\n  //\n\n  function onError(err) {\n    if (callback) {\n      callback(err);\n    } else if (self.emitErrs) {\n      self.emit('error', err);\n    }\n  }\n\n  if (this._names.length === 0) {\n    return onError(new Error('Cannot log with no transports.'));\n  } else if (typeof self.levels[level] === 'undefined') {\n    return onError(new Error('Unknown log level: ' + level));\n  } //\n  // If there are no transports that match the level\n  // then be eager and return. This could potentially be calculated\n  // during `setLevels` for more performance gains.\n  //\n\n\n  var targets = this._names.filter(function (name) {\n    var transport = self.transports[name];\n    return transport.level && self.levels[transport.level] >= self.levels[level] || !transport.level && self.levels[self.level] >= self.levels[level];\n  });\n\n  if (!targets.length) {\n    if (callback) {\n      callback();\n    }\n\n    return;\n  } //\n  // Determining what is `meta` and what are arguments for string interpolation\n  // turns out to be VERY tricky. e.g. in the cases like this:\n  //\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\n  //\n\n\n  var msg,\n      meta = {},\n      validMeta = false;\n  var hasFormat = args && args[0] && args[0].match && args[0].match(formatRegExp) !== null;\n  var tokens = hasFormat ? args[0].match(formatRegExp) : [];\n  var ptokens = tokens.filter(function (t) {\n    return t === '%%';\n  });\n\n  if (args.length - 1 - (tokens.length - ptokens.length) > 0 || args.length === 1) {\n    // last arg is meta\n    meta = args[args.length - 1] || args;\n    var metaType = Object.prototype.toString.call(meta);\n    validMeta = metaType === '[object Object]' || metaType === '[object Error]' || metaType === '[object Array]';\n    meta = validMeta ? args.pop() : {};\n  }\n\n  msg = util.format.apply(null, args); //\n  // Respond to the callback.\n  //\n\n  function finish(err) {\n    if (callback) {\n      if (err) return callback(err);\n      callback(null, level, msg, meta);\n    }\n\n    callback = null;\n\n    if (!err) {\n      self.emit('logged', level, msg, meta);\n    }\n  } // If we should pad for levels, do so\n\n\n  if (this.padLevels) {\n    msg = new Array(this.levelLength - level.length + 1).join(' ') + msg;\n  }\n\n  this.rewriters.forEach(function (rewriter) {\n    meta = rewriter(level, msg, meta, self);\n  });\n  this.filters.forEach(function (filter) {\n    var filtered = filter(level, msg, meta, self);\n    if (typeof filtered === 'string') msg = filtered;else {\n      msg = filtered.msg;\n      meta = filtered.meta;\n    }\n  }); //\n  // For consideration of terminal 'color\" programs like colors.js,\n  // which can add ANSI escape color codes to strings, we destyle the\n  // ANSI color escape codes when `this.stripColors` is set.\n  //\n  // see: http://en.wikipedia.org/wiki/ANSI_escape_code\n  //\n\n  if (this.stripColors) {\n    var code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n    msg = ('' + msg).replace(code, '');\n  } //\n  // Log for each transport and emit 'logging' event\n  //\n\n\n  function transportLog(name, next) {\n    var transport = self.transports[name];\n    transport.log(level, msg, meta, function (err) {\n      if (err) {\n        err.transport = transport;\n        finish(err);\n        return next();\n      }\n\n      self.emit('logging', transport, level, msg, meta);\n      next();\n    });\n  }\n\n  async.forEach(targets, transportLog, finish);\n  return this;\n}; //\n// ### function query (options, callback)\n// #### @options {Object} Query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Queries the all transports for this instance with the specified `options`.\n// This will aggregate each transport's results into one object containing\n// a property per transport.\n//\n\n\nLogger.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var self = this,\n      options = options || {},\n      results = {},\n      query = common.clone(options.query) || {},\n      transports; //\n  // Helper function to query a single transport\n  //\n\n  function queryTransport(transport, next) {\n    if (options.query) {\n      options.query = transport.formatQuery(query);\n    }\n\n    transport.query(options, function (err, results) {\n      if (err) {\n        return next(err);\n      }\n\n      next(null, transport.formatResults(results, options.format));\n    });\n  } //\n  // Helper function to accumulate the results from\n  // `queryTransport` into the `results`.\n  //\n\n\n  function addResults(transport, next) {\n    queryTransport(transport, function (err, result) {\n      //\n      // queryTransport could potentially invoke the callback\n      // multiple times since Transport code can be unpredictable.\n      //\n      if (next) {\n        result = err || result;\n\n        if (result) {\n          results[transport.name] = result;\n        }\n\n        next();\n      }\n\n      next = null;\n    });\n  } //\n  // If an explicit transport is being queried then\n  // respond with the results from only that transport\n  //\n\n\n  if (options.transport) {\n    options.transport = options.transport.toLowerCase();\n    return queryTransport(this.transports[options.transport], callback);\n  } //\n  // Create a list of all transports for this instance.\n  //\n\n\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.query;\n  }); //\n  // Iterate over the transports in parallel setting the\n  // appropriate key in the `results`\n  //\n\n  async.forEach(transports, addResults, function () {\n    callback(null, results);\n  });\n}; //\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for all transports. Options object is optional.\n//\n\n\nLogger.prototype.stream = function (options) {\n  var self = this,\n      options = options || {},\n      out = new Stream(),\n      streams = [],\n      transports;\n\n  if (options.transport) {\n    var transport = this.transports[options.transport];\n    delete options.transport;\n\n    if (transport && transport.stream) {\n      return transport.stream(options);\n    }\n  }\n\n  out._streams = streams;\n\n  out.destroy = function () {\n    var i = streams.length;\n\n    while (i--) streams[i].destroy();\n  }; //\n  // Create a list of all transports for this instance.\n  //\n\n\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.stream;\n  });\n  transports.forEach(function (transport) {\n    var stream = transport.stream(options);\n    if (!stream) return;\n    streams.push(stream);\n    stream.on('log', function (log) {\n      log.transport = log.transport || [];\n      log.transport.push(transport.name);\n      out.emit('log', log);\n    });\n    stream.on('error', function (err) {\n      err.transport = err.transport || [];\n      err.transport.push(transport.name);\n      out.emit('error', err);\n    });\n  });\n  return out;\n}; //\n// ### function close ()\n// Cleans up resources (streams, event listeners) for all\n// transports associated with this instance (if necessary).\n//\n\n\nLogger.prototype.close = function () {\n  var self = this;\n\n  this._names.forEach(function (name) {\n    var transport = self.transports[name];\n\n    if (transport && transport.close) {\n      transport.close();\n    }\n  });\n\n  this.emit('close');\n}; //\n// ### function handleExceptions ([tr0, tr1...] || tr0, tr1, ...)\n// Handles `uncaughtException` events for the current process by\n// ADDING any handlers passed in.\n//\n\n\nLogger.prototype.handleExceptions = function () {\n  var args = Array.prototype.slice.call(arguments),\n      handlers = [],\n      self = this;\n  args.forEach(function (a) {\n    if (Array.isArray(a)) {\n      handlers = handlers.concat(a);\n    } else {\n      handlers.push(a);\n    }\n  });\n  this.exceptionHandlers = this.exceptionHandlers || {};\n  handlers.forEach(function (handler) {\n    self.exceptionHandlers[handler.name] = handler;\n  });\n  this._hnames = Object.keys(self.exceptionHandlers);\n\n  if (!this.catchExceptions) {\n    this.catchExceptions = this._uncaughtException.bind(this);\n    process.on('uncaughtException', this.catchExceptions);\n  }\n}; //\n// ### function unhandleExceptions ()\n// Removes any handlers to `uncaughtException` events\n// for the current process\n//\n\n\nLogger.prototype.unhandleExceptions = function () {\n  var self = this;\n\n  if (this.catchExceptions) {\n    Object.keys(this.exceptionHandlers).forEach(function (name) {\n      var handler = self.exceptionHandlers[name];\n\n      if (handler.close) {\n        handler.close();\n      }\n    });\n    this.exceptionHandlers = {};\n    Object.keys(this.transports).forEach(function (name) {\n      var transport = self.transports[name];\n\n      if (transport.handleExceptions) {\n        transport.handleExceptions = false;\n      }\n    });\n    process.removeListener('uncaughtException', this.catchExceptions);\n    this.catchExceptions = false;\n  }\n}; //\n// ### function add (transport, [options])\n// #### @transport {Transport} Prototype of the Transport object to add.\n// #### @options {Object} **Optional** Options for the Transport to add.\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\n// Adds a transport of the specified type to this instance.\n//\n\n\nLogger.prototype.add = function (transport, options, created) {\n  var instance = created ? transport : new transport(options);\n\n  if (!instance.name && !instance.log) {\n    throw new Error('Unknown transport with no log() method');\n  } else if (this.transports[instance.name]) {\n    throw new Error('Transport already attached: ' + instance.name + \", assign a different name\");\n  }\n\n  this.transports[instance.name] = instance;\n  this._names = Object.keys(this.transports); //\n  // Listen for the `error` event on the new Transport\n  //\n\n  instance._onError = this._onError.bind(this, instance);\n\n  if (!created) {\n    instance.on('error', instance._onError);\n  } //\n  // If this transport has `handleExceptions` set to `true`\n  // and we are not already handling exceptions, do so.\n  //\n\n\n  if (instance.handleExceptions && !this.catchExceptions) {\n    this.handleExceptions();\n  }\n\n  return this;\n}; //\n// ### function clear ()\n// Remove all transports from this instance\n//\n\n\nLogger.prototype.clear = function () {\n  Object.keys(this.transports).forEach(function (name) {\n    this.remove({\n      name: name\n    });\n  }, this);\n}; //\n// ### function remove (transport)\n// #### @transport {Transport|String} Transport or Name to remove.\n// Removes a transport of the specified type from this instance.\n//\n\n\nLogger.prototype.remove = function (transport) {\n  var name = typeof transport !== 'string' ? transport.name || transport.prototype.name : transport;\n\n  if (!this.transports[name]) {\n    throw new Error('Transport ' + name + ' not attached to this instance');\n  }\n\n  var instance = this.transports[name];\n  delete this.transports[name];\n  this._names = Object.keys(this.transports);\n\n  if (instance.close) {\n    instance.close();\n  }\n\n  if (instance._onError) {\n    instance.removeListener('error', instance._onError);\n  }\n\n  return this;\n}; //\n// ### function startTimer ()\n// Returns an object corresponding to a specific timing. When done\n// is called the timer will finish and log the duration. e.g.:\n//\n//    timer = winston.startTimer()\n//    setTimeout(function(){\n//      timer.done(\"Logging message\");\n//    }, 1000);\n//\n\n\nLogger.prototype.startTimer = function () {\n  return new ProfileHandler(this);\n}; //\n// ### function profile (id, [msg, meta, callback])\n// #### @id {string} Unique id of the profiler\n// #### @msg {string} **Optional** Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Tracks the time inbetween subsequent calls to this method\n// with the same `id` parameter. The second call to this method\n// will log the difference in milliseconds along with the message.\n//\n\n\nLogger.prototype.profile = function (id) {\n  var now = Date.now(),\n      then,\n      args,\n      msg,\n      meta,\n      callback;\n\n  if (this.profilers[id]) {\n    then = this.profilers[id];\n    delete this.profilers[id]; // Support variable arguments: msg, meta, callback\n\n    args = Array.prototype.slice.call(arguments);\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    meta = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n    msg = args.length === 2 ? args[1] : id; // Set the duration property of the metadata\n\n    meta.durationMs = now - then;\n    return this.info(msg, meta, callback);\n  } else {\n    this.profilers[id] = now;\n  }\n\n  return this;\n}; //\n// ### function setLevels (target)\n// #### @target {Object} Target levels to use on this instance\n// Sets the `target` levels specified on this instance.\n//\n\n\nLogger.prototype.setLevels = function (target) {\n  return common.setLevels(this, this.levels, target);\n}; //\n// ### function cli ()\n// Configures this instance to have the default\n// settings for command-line interfaces: no timestamp,\n// colors enabled, padded output, and additional levels.\n//\n\n\nLogger.prototype.cli = function () {\n  this.padLevels = true;\n  this.setLevels(config.cli.levels);\n  config.addColors(config.cli.colors);\n\n  if (this.transports.console) {\n    this.transports.console.colorize = this.transports.console.colorize || true;\n    this.transports.console.timestamp = this.transports.console.timestamp || false;\n  }\n\n  return this;\n}; //\n// ### @private function _uncaughtException (err)\n// #### @err {Error} Error to handle\n// Logs all relevant information around the `err` and\n// exits the current process.\n//\n\n\nLogger.prototype._uncaughtException = function (err) {\n  var self = this,\n      responded = false,\n      info = exception.getAllInfo(err),\n      handlers = this._getExceptionHandlers(),\n      timeout,\n      doExit; //\n  // Calculate if we should exit on this error\n  //\n\n\n  doExit = typeof this.exitOnError === 'function' ? this.exitOnError(err) : this.exitOnError;\n\n  function logAndWait(transport, next) {\n    transport.logException('uncaughtException: ' + (err.message || err), info, next, err);\n  }\n\n  function gracefulExit() {\n    if (doExit && !responded) {\n      //\n      // Remark: Currently ignoring any exceptions from transports\n      //         when catching uncaught exceptions.\n      //\n      clearTimeout(timeout);\n      responded = true;\n      process.exit(1);\n    }\n  }\n\n  if (!handlers || handlers.length === 0) {\n    return gracefulExit();\n  } //\n  // Log to all transports and allow the operation to take\n  // only up to `3000ms`.\n  //\n\n\n  async.forEach(handlers, logAndWait, gracefulExit);\n\n  if (doExit) {\n    timeout = setTimeout(gracefulExit, 3000);\n  }\n}; //\n// ### @private function _getExceptionHandlers ()\n// Returns the list of transports and exceptionHandlers\n// for this instance.\n//\n\n\nLogger.prototype._getExceptionHandlers = function () {\n  var self = this;\n  return this._hnames.map(function (name) {\n    return self.exceptionHandlers[name];\n  }).concat(this._names.map(function (name) {\n    return self.transports[name].handleExceptions && self.transports[name];\n  })).filter(Boolean);\n}; //\n// ### @private function _onError (transport, err)\n// #### @transport {Object} Transport on which the error occured\n// #### @err {Error} Error that occurred on the transport\n// Bubbles the error, `err`, that occured on the specified `transport`\n// up from this instance if `emitErrs` has been set.\n//\n\n\nLogger.prototype._onError = function (transport, err) {\n  if (this.emitErrs) {\n    this.emit('error', err, transport);\n  }\n}; //\n// ### @private ProfileHandler\n// Constructor function for the ProfileHandler instance used by\n// `Logger.prototype.startTimer`. When done is called the timer\n// will finish and log the duration.\n//\n\n\nfunction ProfileHandler(logger) {\n  this.logger = logger;\n  this.start = Date.now();\n} //\n// ### function done (msg)\n// Ends the current timer (i.e. ProfileHandler) instance and\n// logs the `msg` along with the duration since creation.\n//\n\n\nProfileHandler.prototype.done = function (msg) {\n  var args = Array.prototype.slice.call(arguments),\n      callback = typeof args[args.length - 1] === 'function' ? args.pop() : null,\n      meta = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n  meta.duration = Date.now() - this.start + 'ms';\n  return this.logger.info(msg, meta, callback);\n};","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/winston/lib/winston/logger.js"],"names":["events","require","util","async","config","common","exception","Stream","formatRegExp","Logger","exports","options","EventEmitter","call","configure","inherits","prototype","self","Array","isArray","_names","length","clear","transports","forEach","transport","add","padLevels","setLevels","levels","colors","addColors","id","level","emitErrs","stripColors","exitOnError","exceptionHandlers","profilers","kind","handleExceptions","log","args","slice","arguments","pop","callback","onError","err","emit","Error","targets","filter","name","msg","meta","validMeta","hasFormat","match","tokens","ptokens","t","metaType","Object","toString","format","apply","finish","levelLength","join","rewriters","rewriter","filters","filtered","code","replace","transportLog","next","query","results","clone","queryTransport","formatQuery","formatResults","addResults","result","toLowerCase","map","stream","out","streams","_streams","destroy","i","push","on","close","handlers","a","concat","handler","_hnames","keys","catchExceptions","_uncaughtException","bind","process","unhandleExceptions","removeListener","created","instance","_onError","remove","startTimer","ProfileHandler","profile","now","Date","then","durationMs","info","target","cli","console","colorize","timestamp","responded","getAllInfo","_getExceptionHandlers","timeout","doExit","logAndWait","logException","message","gracefulExit","clearTimeout","exit","setTimeout","Boolean","logger","start","done","duration"],"mappings":"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","sourcesContent":["/*\n * logger.js: Core logger object used by winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n *\n */\n\nvar events = require('events'),\n    util = require('util'),\n    async = require('async'),\n    config = require('./config'),\n    common = require('./common'),\n    exception = require('./exception'),\n    Stream = require('stream').Stream;\n\nvar formatRegExp = /%[sdj%]/g;\n\n//\n// ### function Logger (options)\n// #### @options {Object} Options for this instance.\n// Constructor function for the Logger object responsible\n// for persisting log messages and metadata to one or more transports.\n//\nvar Logger = exports.Logger = function (options) {\n  events.EventEmitter.call(this);\n  this.configure(options);\n};\n\n//\n// Inherit from `events.EventEmitter`.\n//\nutil.inherits(Logger, events.EventEmitter);\n\n//\n// ### function configure (options)\n// This will wholesale reconfigure this instance by:\n// 1. Resetting all transports. Older transports will be removed implicitly.\n// 2. Set all other options including levels, colors, rewriters, filters,\n//    exceptionHandlers, etc.\n//\nLogger.prototype.configure = function (options) {\n  var self = this;\n\n  //\n  // If we have already been setup with transports\n  // then remove them before proceeding.\n  //\n  if (Array.isArray(this._names) && this._names.length) {\n    this.clear();\n  }\n\n  options = options || {};\n  this.transports = {};\n  this._names     = [];\n\n  if (options.transports) {\n    options.transports.forEach(function (transport) {\n      self.add(transport, null, true);\n    });\n  }\n\n  //\n  // Set Levels and default logging level\n  //\n  this.padLevels = options.padLevels || false;\n  this.setLevels(options.levels);\n  if (options.colors) {\n    config.addColors(options.colors);\n  }\n\n  //\n  // Hoist other options onto this instance.\n  //\n  this.id          = options.id || null;\n  this.level       = options.level || 'info';\n  this.emitErrs    = options.emitErrs || false;\n  this.stripColors = options.stripColors || false;\n  this.exitOnError = typeof options.exitOnError !== 'undefined'\n    ? options.exitOnError\n    : true;\n\n  //\n  // Setup internal state as empty Objects even though it is\n  // defined lazily later to ensure a strong existential API contract.\n  //\n  this.exceptionHandlers = {};\n  this.profilers         = {};\n\n  ['rewriters', 'filters'].forEach(function (kind) {\n    self[kind] = Array.isArray(options[kind])\n      ? options[kind]\n      : [];\n  });\n\n  if (options.exceptionHandlers) {\n    this.handleExceptions(options.exceptionHandlers);\n  }\n};\n\n//\n// ### function log (level, msg, [meta], callback)\n// #### @level {string} Level at which to log the message.\n// #### @msg {string} Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} Continuation to respond to when complete.\n// Core logging method exposed to Winston. Metadata is optional.\n//\nLogger.prototype.log = function (level) {\n  var args = Array.prototype.slice.call(arguments, 1),\n      self = this,\n      transports;\n\n  while (args[args.length - 1] === null) {\n    args.pop();\n  }\n\n  //\n  // Determining what is `meta` and what are arguments for string interpolation\n  // turns out to be VERY tricky. e.g. in the cases like this:\n  //\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\n  //\n  var callback  = typeof args[args.length - 1] === 'function'\n    ? args.pop()\n    : null;\n\n  //\n  // Handle errors appropriately.\n  //\n  function onError(err) {\n    if (callback) {\n      callback(err);\n    }\n    else if (self.emitErrs) {\n      self.emit('error', err);\n    }\n  }\n\n  if (this._names.length === 0) {\n    return onError(new Error('Cannot log with no transports.'));\n  }\n  else if (typeof self.levels[level] === 'undefined') {\n    return onError(new Error('Unknown log level: ' + level));\n  }\n\n  //\n  // If there are no transports that match the level\n  // then be eager and return. This could potentially be calculated\n  // during `setLevels` for more performance gains.\n  //\n  var targets = this._names.filter(function (name) {\n    var transport = self.transports[name];\n    return (transport.level && self.levels[transport.level] >= self.levels[level])\n      || (!transport.level && self.levels[self.level] >= self.levels[level]);\n  });\n\n  if (!targets.length) {\n    if (callback) { callback(); }\n    return;\n  }\n\n  //\n  // Determining what is `meta` and what are arguments for string interpolation\n  // turns out to be VERY tricky. e.g. in the cases like this:\n  //\n  //    logger.info('No interpolation symbols', 'ok', 'why', { meta: 'is-this' });\n  //\n  var msg, meta = {}, validMeta = false;\n  var hasFormat = args && args[0] && args[0].match && args[0].match(formatRegExp) !== null;\n  var tokens = (hasFormat) ? args[0].match(formatRegExp) : [];\n  var ptokens = tokens.filter(function(t) { return t === '%%' });\n  if (((args.length - 1) - (tokens.length - ptokens.length)) > 0 || args.length === 1) {\n    // last arg is meta\n    meta = args[args.length - 1] || args;\n    var metaType = Object.prototype.toString.call(meta);\n    validMeta = metaType === '[object Object]' ||\n      metaType === '[object Error]' || metaType === '[object Array]';\n    meta = validMeta ? args.pop() : {};\n  }\n  msg = util.format.apply(null, args);\n\n  //\n  // Respond to the callback.\n  //\n  function finish(err) {\n    if (callback) {\n      if (err) return callback(err);\n      callback(null, level, msg, meta);\n    }\n\n    callback = null;\n    if (!err) {\n      self.emit('logged', level, msg, meta);\n    }\n  }\n\n  // If we should pad for levels, do so\n  if (this.padLevels) {\n    msg = new Array(this.levelLength - level.length + 1).join(' ') + msg;\n  }\n\n  this.rewriters.forEach(function (rewriter) {\n    meta = rewriter(level, msg, meta, self);\n  });\n\n  this.filters.forEach(function(filter) {\n    var filtered = filter(level, msg, meta, self);\n    if (typeof filtered === 'string')\n      msg = filtered;\n    else {\n      msg = filtered.msg;\n      meta = filtered.meta;\n    }\n  });\n\n  //\n  // For consideration of terminal 'color\" programs like colors.js,\n  // which can add ANSI escape color codes to strings, we destyle the\n  // ANSI color escape codes when `this.stripColors` is set.\n  //\n  // see: http://en.wikipedia.org/wiki/ANSI_escape_code\n  //\n  if (this.stripColors) {\n    var code = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n    msg = ('' + msg).replace(code, '');\n  }\n\n  //\n  // Log for each transport and emit 'logging' event\n  //\n  function transportLog(name, next) {\n    var transport = self.transports[name];\n    transport.log(level, msg, meta, function (err) {\n      if (err) {\n        err.transport = transport;\n        finish(err);\n        return next();\n      }\n\n      self.emit('logging', transport, level, msg, meta);\n      next();\n    });\n  }\n\n  async.forEach(targets, transportLog, finish);\n  return this;\n};\n\n//\n// ### function query (options, callback)\n// #### @options {Object} Query options for this instance.\n// #### @callback {function} Continuation to respond to when complete.\n// Queries the all transports for this instance with the specified `options`.\n// This will aggregate each transport's results into one object containing\n// a property per transport.\n//\nLogger.prototype.query = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  var self = this,\n      options = options || {},\n      results = {},\n      query = common.clone(options.query) || {},\n      transports;\n\n  //\n  // Helper function to query a single transport\n  //\n  function queryTransport(transport, next) {\n    if (options.query) {\n      options.query = transport.formatQuery(query);\n    }\n\n    transport.query(options, function (err, results) {\n      if (err) {\n        return next(err);\n      }\n\n      next(null, transport.formatResults(results, options.format));\n    });\n  }\n\n  //\n  // Helper function to accumulate the results from\n  // `queryTransport` into the `results`.\n  //\n  function addResults(transport, next) {\n    queryTransport(transport, function (err, result) {\n      //\n      // queryTransport could potentially invoke the callback\n      // multiple times since Transport code can be unpredictable.\n      //\n      if (next) {\n        result = err || result;\n        if (result) {\n          results[transport.name] = result;\n        }\n\n        next();\n      }\n\n      next = null;\n    });\n  }\n\n  //\n  // If an explicit transport is being queried then\n  // respond with the results from only that transport\n  //\n  if (options.transport) {\n    options.transport = options.transport.toLowerCase();\n    return queryTransport(this.transports[options.transport], callback);\n  }\n\n  //\n  // Create a list of all transports for this instance.\n  //\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.query;\n  });\n\n  //\n  // Iterate over the transports in parallel setting the\n  // appropriate key in the `results`\n  //\n  async.forEach(transports, addResults, function () {\n    callback(null, results);\n  });\n};\n\n//\n// ### function stream (options)\n// #### @options {Object} Stream options for this instance.\n// Returns a log stream for all transports. Options object is optional.\n//\nLogger.prototype.stream = function (options) {\n  var self = this,\n      options = options || {},\n      out = new Stream,\n      streams = [],\n      transports;\n\n  if (options.transport) {\n    var transport = this.transports[options.transport];\n    delete options.transport;\n    if (transport && transport.stream) {\n      return transport.stream(options);\n    }\n  }\n\n  out._streams = streams;\n  out.destroy = function () {\n    var i = streams.length;\n    while (i--) streams[i].destroy();\n  };\n\n  //\n  // Create a list of all transports for this instance.\n  //\n  transports = this._names.map(function (name) {\n    return self.transports[name];\n  }).filter(function (transport) {\n    return !!transport.stream;\n  });\n\n  transports.forEach(function (transport) {\n    var stream = transport.stream(options);\n    if (!stream) return;\n\n    streams.push(stream);\n\n    stream.on('log', function (log) {\n      log.transport = log.transport || [];\n      log.transport.push(transport.name);\n      out.emit('log', log);\n    });\n\n    stream.on('error', function (err) {\n      err.transport = err.transport || [];\n      err.transport.push(transport.name);\n      out.emit('error', err);\n    });\n  });\n\n  return out;\n};\n\n//\n// ### function close ()\n// Cleans up resources (streams, event listeners) for all\n// transports associated with this instance (if necessary).\n//\nLogger.prototype.close = function () {\n  var self = this;\n\n  this._names.forEach(function (name) {\n    var transport = self.transports[name];\n    if (transport && transport.close) {\n      transport.close();\n    }\n  });\n\n  this.emit('close');\n};\n\n//\n// ### function handleExceptions ([tr0, tr1...] || tr0, tr1, ...)\n// Handles `uncaughtException` events for the current process by\n// ADDING any handlers passed in.\n//\nLogger.prototype.handleExceptions = function () {\n  var args = Array.prototype.slice.call(arguments),\n      handlers = [],\n      self = this;\n\n  args.forEach(function (a) {\n    if (Array.isArray(a)) {\n      handlers = handlers.concat(a);\n    }\n    else {\n      handlers.push(a);\n    }\n  });\n\n  this.exceptionHandlers = this.exceptionHandlers || {};\n  handlers.forEach(function (handler) {\n    self.exceptionHandlers[handler.name] = handler;\n  });\n\n  this._hnames = Object.keys(self.exceptionHandlers);\n\n  if (!this.catchExceptions) {\n    this.catchExceptions = this._uncaughtException.bind(this);\n    process.on('uncaughtException', this.catchExceptions);\n  }\n};\n\n//\n// ### function unhandleExceptions ()\n// Removes any handlers to `uncaughtException` events\n// for the current process\n//\nLogger.prototype.unhandleExceptions = function () {\n  var self = this;\n\n  if (this.catchExceptions) {\n    Object.keys(this.exceptionHandlers).forEach(function (name) {\n      var handler = self.exceptionHandlers[name];\n      if (handler.close) {\n        handler.close();\n      }\n    });\n\n    this.exceptionHandlers = {};\n    Object.keys(this.transports).forEach(function (name) {\n      var transport = self.transports[name];\n      if (transport.handleExceptions) {\n        transport.handleExceptions = false;\n      }\n    })\n\n    process.removeListener('uncaughtException', this.catchExceptions);\n    this.catchExceptions = false;\n  }\n};\n\n//\n// ### function add (transport, [options])\n// #### @transport {Transport} Prototype of the Transport object to add.\n// #### @options {Object} **Optional** Options for the Transport to add.\n// #### @instance {Boolean} **Optional** Value indicating if `transport` is already instantiated.\n// Adds a transport of the specified type to this instance.\n//\nLogger.prototype.add = function (transport, options, created) {\n  var instance = created ? transport : (new (transport)(options));\n\n  if (!instance.name && !instance.log) {\n    throw new Error('Unknown transport with no log() method');\n  }\n  else if (this.transports[instance.name]) {\n    throw new Error('Transport already attached: ' + instance.name + \", assign a different name\");\n  }\n\n  this.transports[instance.name] = instance;\n  this._names = Object.keys(this.transports);\n\n  //\n  // Listen for the `error` event on the new Transport\n  //\n  instance._onError = this._onError.bind(this, instance)\n  if (!created) {\n    instance.on('error', instance._onError);\n  }\n\n  //\n  // If this transport has `handleExceptions` set to `true`\n  // and we are not already handling exceptions, do so.\n  //\n  if (instance.handleExceptions && !this.catchExceptions) {\n    this.handleExceptions();\n  }\n\n  return this;\n};\n\n//\n// ### function clear ()\n// Remove all transports from this instance\n//\nLogger.prototype.clear = function () {\n  Object.keys(this.transports).forEach(function (name) {\n    this.remove({ name: name });\n  }, this);\n};\n\n//\n// ### function remove (transport)\n// #### @transport {Transport|String} Transport or Name to remove.\n// Removes a transport of the specified type from this instance.\n//\nLogger.prototype.remove = function (transport) {\n  var name = typeof transport !== 'string'\n    ? transport.name || transport.prototype.name\n    : transport;\n\n  if (!this.transports[name]) {\n    throw new Error('Transport ' + name + ' not attached to this instance');\n  }\n\n  var instance = this.transports[name];\n  delete this.transports[name];\n  this._names = Object.keys(this.transports);\n\n  if (instance.close) {\n    instance.close();\n  }\n\n  if (instance._onError) {\n    instance.removeListener('error', instance._onError);\n  }\n  return this;\n};\n\n//\n// ### function startTimer ()\n// Returns an object corresponding to a specific timing. When done\n// is called the timer will finish and log the duration. e.g.:\n//\n//    timer = winston.startTimer()\n//    setTimeout(function(){\n//      timer.done(\"Logging message\");\n//    }, 1000);\n//\nLogger.prototype.startTimer = function () {\n  return new ProfileHandler(this);\n};\n\n//\n// ### function profile (id, [msg, meta, callback])\n// #### @id {string} Unique id of the profiler\n// #### @msg {string} **Optional** Message to log\n// #### @meta {Object} **Optional** Additional metadata to attach\n// #### @callback {function} **Optional** Continuation to respond to when complete.\n// Tracks the time inbetween subsequent calls to this method\n// with the same `id` parameter. The second call to this method\n// will log the difference in milliseconds along with the message.\n//\nLogger.prototype.profile = function (id) {\n  var now = Date.now(), then, args,\n      msg, meta, callback;\n\n  if (this.profilers[id]) {\n    then = this.profilers[id];\n    delete this.profilers[id];\n\n    // Support variable arguments: msg, meta, callback\n    args     = Array.prototype.slice.call(arguments);\n    callback = typeof args[args.length - 1] === 'function' ? args.pop() : null;\n    meta     = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n    msg      = args.length === 2 ? args[1] : id;\n\n    // Set the duration property of the metadata\n    meta.durationMs = now - then;\n    return this.info(msg, meta, callback);\n  }\n  else {\n    this.profilers[id] = now;\n  }\n\n  return this;\n};\n\n//\n// ### function setLevels (target)\n// #### @target {Object} Target levels to use on this instance\n// Sets the `target` levels specified on this instance.\n//\nLogger.prototype.setLevels = function (target) {\n  return common.setLevels(this, this.levels, target);\n};\n\n//\n// ### function cli ()\n// Configures this instance to have the default\n// settings for command-line interfaces: no timestamp,\n// colors enabled, padded output, and additional levels.\n//\nLogger.prototype.cli = function () {\n  this.padLevels = true;\n  this.setLevels(config.cli.levels);\n  config.addColors(config.cli.colors);\n\n  if (this.transports.console) {\n    this.transports.console.colorize = this.transports.console.colorize || true;\n    this.transports.console.timestamp = this.transports.console.timestamp || false;\n  }\n\n  return this;\n};\n\n//\n// ### @private function _uncaughtException (err)\n// #### @err {Error} Error to handle\n// Logs all relevant information around the `err` and\n// exits the current process.\n//\nLogger.prototype._uncaughtException = function (err) {\n  var self = this,\n      responded = false,\n      info = exception.getAllInfo(err),\n      handlers = this._getExceptionHandlers(),\n      timeout,\n      doExit;\n\n  //\n  // Calculate if we should exit on this error\n  //\n  doExit = typeof this.exitOnError === 'function'\n    ? this.exitOnError(err)\n    : this.exitOnError;\n\n  function logAndWait(transport, next) {\n    transport.logException('uncaughtException: ' + (err.message || err), info, next, err);\n  }\n\n  function gracefulExit() {\n    if (doExit && !responded) {\n      //\n      // Remark: Currently ignoring any exceptions from transports\n      //         when catching uncaught exceptions.\n      //\n      clearTimeout(timeout);\n      responded = true;\n      process.exit(1);\n    }\n  }\n\n  if (!handlers || handlers.length === 0) {\n    return gracefulExit();\n  }\n\n  //\n  // Log to all transports and allow the operation to take\n  // only up to `3000ms`.\n  //\n  async.forEach(handlers, logAndWait, gracefulExit);\n  if (doExit) {\n    timeout = setTimeout(gracefulExit, 3000);\n  }\n};\n\n//\n// ### @private function _getExceptionHandlers ()\n// Returns the list of transports and exceptionHandlers\n// for this instance.\n//\nLogger.prototype._getExceptionHandlers = function () {\n  var self = this;\n\n  return this._hnames.map(function (name) {\n    return self.exceptionHandlers[name];\n  }).concat(this._names.map(function (name) {\n    return self.transports[name].handleExceptions && self.transports[name];\n  })).filter(Boolean);\n};\n\n//\n// ### @private function _onError (transport, err)\n// #### @transport {Object} Transport on which the error occured\n// #### @err {Error} Error that occurred on the transport\n// Bubbles the error, `err`, that occured on the specified `transport`\n// up from this instance if `emitErrs` has been set.\n//\nLogger.prototype._onError = function (transport, err) {\n  if (this.emitErrs) {\n    this.emit('error', err, transport);\n  }\n};\n\n//\n// ### @private ProfileHandler\n// Constructor function for the ProfileHandler instance used by\n// `Logger.prototype.startTimer`. When done is called the timer\n// will finish and log the duration.\n//\nfunction ProfileHandler(logger) {\n  this.logger = logger;\n  this.start = Date.now();\n}\n\n//\n// ### function done (msg)\n// Ends the current timer (i.e. ProfileHandler) instance and\n// logs the `msg` along with the duration since creation.\n//\nProfileHandler.prototype.done = function (msg) {\n  var args     = Array.prototype.slice.call(arguments),\n      callback = typeof args[args.length - 1] === 'function' ? args.pop() : null,\n      meta     = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n\n  meta.duration = (Date.now()) - this.start + 'ms';\n  return this.logger.info(msg, meta, callback);\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar SchemaType = require('../schematype');\n\nvar CastError = SchemaType.CastError;\n\nvar MongooseError = require('../error');\n\nvar utils = require('../utils');\n\nvar Document;\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nSchemaString.schemaName = 'String';\n/*!\n * Inherits from SchemaType.\n */\n\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     var states = ['opening', 'open', 'closing', 'closed']\n *     var s = new Schema({ state: { type: String, enum: states }})\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     var enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     var s = new Schema({ state: { type: String, enum: enum })\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function () {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  var values;\n  var errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    if (undefined !== values[i]) {\n      this.enumValues.push(this.cast(values[i]));\n    }\n  }\n\n  var vals = this.enumValues;\n\n  this.enumValidator = function (v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n  return this;\n};\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ email: { type: String, lowercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *\n * NOTE: Setters do not run on queries by default. Use the `runSettersOnQuery` option:\n *\n *      // Must use `runSettersOnQuery` as shown below, otherwise `email` will\n *      // **not** be lowercased.\n *      M.updateOne({}, { $set: { email: 'SomeEmail@example.COM' } }, { runSettersOnQuery: true });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.lowercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.toLowerCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ caps: { type: String, uppercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *\n * NOTE: Setters do not run on queries by default. Use the `runSettersOnQuery` option:\n *\n *      // Must use `runSettersOnQuery` as shown below, otherwise `email` will\n *      // **not** be lowercased.\n *      M.updateOne({}, { $set: { email: 'SomeEmail@example.COM' } }, { runSettersOnQuery: true });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.uppercase = function (shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.toUpperCase();\n    }\n\n    return v;\n  });\n};\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, trim: true }})\n *     var M = db.model('M', s)\n *     var string = ' some name '\n *     console.log(string.length) // 11\n *     var m = new M({ name: string })\n *     console.log(m.name.length) // 9\n *\n * NOTE: Setters do not run on queries by default. Use the `runSettersOnQuery` option:\n *\n *      // Must use `runSettersOnQuery` as shown below, otherwise `email` will\n *      // **not** be lowercased.\n *      M.updateOne({}, { $set: { email: 'SomeEmail@example.COM' } }, { runSettersOnQuery: true });\n *\n * @api public\n * @return {SchemaType} this\n */\n\n\nSchemaString.prototype.trim = function (shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n\n  return this.set(function (v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n\n    if (v) {\n      return v.trim();\n    }\n\n    return v;\n  });\n};\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     var minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.minlength = function (value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function (v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     var maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.maxlength = function (value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function (v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function (v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, match: /^a/ }})\n *     var M = db.model('M', s)\n *     var m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     var match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     var s = new Schema({ file: { type: String, match: match }})\n *     var M = db.model('M', s);\n *     var m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     var s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n  var msg = message || MongooseError.messages.String.match;\n\n  var matchValidator = function (v) {\n    if (!regExp) {\n      return false;\n    }\n\n    var ret = v != null && v !== '' ? regExp.test(v) : true;\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n\n  return (value instanceof String || typeof value === 'string') && value.length;\n};\n/**\n * Casts to String\n *\n * @api private\n */\n\n\nSchemaString.prototype.cast = function (value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n    if (value === null || value === undefined) {\n      return value;\n    } // lazy load\n\n\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    } // setting a populated path\n\n\n    if (typeof value === 'string') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path);\n    } // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n\n\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  } // If null or undefined\n\n\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (typeof value !== 'undefined') {\n    // handle documents being passed\n    if (value._id && typeof value._id === 'string') {\n      return value._id;\n    } // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n    // **unless** its the default Object.toString, because \"[object Object]\"\n    // doesn't really qualify as useful data\n\n\n    if (value.toString && value.toString !== Object.prototype.toString) {\n      return value.toString();\n    }\n  }\n\n  throw new CastError('string', value, this.path);\n};\n/*!\n * ignore\n */\n\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n\n  return val.map(function (m) {\n    return _this.castForQuery(m);\n  });\n}\n\nSchemaString.prototype.$conditionalHandlers = utils.options(SchemaType.prototype.$conditionalHandlers, {\n  $all: handleArray,\n  $gt: handleSingle,\n  $gte: handleSingle,\n  $lt: handleSingle,\n  $lte: handleSingle,\n  $options: handleSingle,\n  $regex: handleSingle,\n  $not: handleSingle\n});\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function ($conditional, val) {\n  var handler;\n\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n\n    return handler.call(this, val);\n  }\n\n  val = $conditional;\n\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = SchemaString;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/schema/string.js"],"names":["SchemaType","require","CastError","MongooseError","utils","Document","SchemaString","key","options","enumValues","regExp","call","schemaName","prototype","Object","create","constructor","enum","enumValidator","validators","filter","v","validator","arguments","values","errorMessage","isObject","message","messages","String","i","length","undefined","push","cast","vals","indexOf","type","lowercase","shouldApply","set","self","toLowerCase","uppercase","toUpperCase","trim","shouldTrim","minlength","value","minlengthValidator","msg","replace","maxlength","maxlengthValidator","match","matchValidator","ret","test","regexp","checkRequired","doc","_isRef","init","$__","wasPopulated","Buffer","isBuffer","path","$__fullPath","owner","ownerDocument","pop","populated","model","_id","toString","handleSingle","val","castForQuery","handleArray","_this","Array","isArray","map","m","$conditionalHandlers","$all","$gt","$gte","$lt","$lte","$options","$regex","$not","$conditional","handler","Error","_castForQuery","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar CastError = SchemaType.CastError;\nvar MongooseError = require('../error');\nvar utils = require('../utils');\nvar Document;\n\n/**\n * String SchemaType constructor.\n *\n * @param {String} key\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction SchemaString(key, options) {\n  this.enumValues = [];\n  this.regExp = null;\n  SchemaType.call(this, key, options, 'String');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nSchemaString.schemaName = 'String';\n\n/*!\n * Inherits from SchemaType.\n */\nSchemaString.prototype = Object.create(SchemaType.prototype);\nSchemaString.prototype.constructor = SchemaString;\n\n/**\n * Adds an enum validator\n *\n * ####Example:\n *\n *     var states = ['opening', 'open', 'closing', 'closed']\n *     var s = new Schema({ state: { type: String, enum: states }})\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: `invalid` is not a valid enum value for path `state`.\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n *     // or with custom error messages\n *     var enum = {\n *       values: ['opening', 'open', 'closing', 'closed'],\n *       message: 'enum validator failed for path `{PATH}` with value `{VALUE}`'\n *     }\n *     var s = new Schema({ state: { type: String, enum: enum })\n *     var M = db.model('M', s)\n *     var m = new M({ state: 'invalid' })\n *     m.save(function (err) {\n *       console.error(String(err)) // ValidationError: enum validator failed for path `state` with value `invalid`\n *       m.state = 'open'\n *       m.save(callback) // success\n *     })\n *\n * @param {String|Object} [args...] enumeration values\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.enum = function() {\n  if (this.enumValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.enumValidator;\n    }, this);\n    this.enumValidator = false;\n  }\n\n  if (arguments[0] === void 0 || arguments[0] === false) {\n    return this;\n  }\n\n  var values;\n  var errorMessage;\n\n  if (utils.isObject(arguments[0])) {\n    values = arguments[0].values;\n    errorMessage = arguments[0].message;\n  } else {\n    values = arguments;\n    errorMessage = MongooseError.messages.String.enum;\n  }\n\n  for (var i = 0; i < values.length; i++) {\n    if (undefined !== values[i]) {\n      this.enumValues.push(this.cast(values[i]));\n    }\n  }\n\n  var vals = this.enumValues;\n  this.enumValidator = function(v) {\n    return undefined === v || ~vals.indexOf(v);\n  };\n  this.validators.push({\n    validator: this.enumValidator,\n    message: errorMessage,\n    type: 'enum',\n    enumValues: vals\n  });\n\n  return this;\n};\n\n/**\n * Adds a lowercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ email: { type: String, lowercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ email: 'SomeEmail@example.COM' });\n *     console.log(m.email) // someemail@example.com\n *\n * NOTE: Setters do not run on queries by default. Use the `runSettersOnQuery` option:\n *\n *      // Must use `runSettersOnQuery` as shown below, otherwise `email` will\n *      // **not** be lowercased.\n *      M.updateOne({}, { $set: { email: 'SomeEmail@example.COM' } }, { runSettersOnQuery: true });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.lowercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toLowerCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds an uppercase [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * ####Example:\n *\n *     var s = new Schema({ caps: { type: String, uppercase: true }})\n *     var M = db.model('M', s);\n *     var m = new M({ caps: 'an example' });\n *     console.log(m.caps) // AN EXAMPLE\n *\n * NOTE: Setters do not run on queries by default. Use the `runSettersOnQuery` option:\n *\n *      // Must use `runSettersOnQuery` as shown below, otherwise `email` will\n *      // **not** be lowercased.\n *      M.updateOne({}, { $set: { email: 'SomeEmail@example.COM' } }, { runSettersOnQuery: true });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.uppercase = function(shouldApply) {\n  if (arguments.length > 0 && !shouldApply) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.toUpperCase();\n    }\n    return v;\n  });\n};\n\n/**\n * Adds a trim [setter](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set).\n *\n * The string value will be trimmed when set.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, trim: true }})\n *     var M = db.model('M', s)\n *     var string = ' some name '\n *     console.log(string.length) // 11\n *     var m = new M({ name: string })\n *     console.log(m.name.length) // 9\n *\n * NOTE: Setters do not run on queries by default. Use the `runSettersOnQuery` option:\n *\n *      // Must use `runSettersOnQuery` as shown below, otherwise `email` will\n *      // **not** be lowercased.\n *      M.updateOne({}, { $set: { email: 'SomeEmail@example.COM' } }, { runSettersOnQuery: true });\n *\n * @api public\n * @return {SchemaType} this\n */\n\nSchemaString.prototype.trim = function(shouldTrim) {\n  if (arguments.length > 0 && !shouldTrim) {\n    return this;\n  }\n  return this.set(function(v, self) {\n    if (typeof v !== 'string') {\n      v = self.cast(v);\n    }\n    if (v) {\n      return v.trim();\n    }\n    return v;\n  });\n};\n\n/**\n * Sets a minimum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, minlength: 5 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length\n *     var minlength = [5, 'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, minlength: minlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).\n *     })\n *\n * @param {Number} value minimum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.minlength = function(value, message) {\n  if (this.minlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.minlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.minlength;\n    msg = msg.replace(/{MINLENGTH}/, value);\n    this.validators.push({\n      validator: this.minlengthValidator = function(v) {\n        return v === null || v.length >= value;\n      },\n      message: msg,\n      type: 'minlength',\n      minlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a maximum length validator.\n *\n * ####Example:\n *\n *     var schema = new Schema({ postalCode: { type: String, maxlength: 9 })\n *     var Address = db.model('Address', schema)\n *     var address = new Address({ postalCode: '9512512345' })\n *     address.save(function (err) {\n *       console.error(err) // validator error\n *       address.postalCode = '95125';\n *       address.save() // success\n *     })\n *\n *     // custom error messages\n *     // We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length\n *     var maxlength = [9, 'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'];\n *     var schema = new Schema({ postalCode: { type: String, maxlength: maxlength })\n *     var Address = mongoose.model('Address', schema);\n *     var address = new Address({ postalCode: '9512512345' });\n *     address.validate(function (err) {\n *       console.log(String(err)) // ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).\n *     })\n *\n * @param {Number} value maximum string length\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.maxlength = function(value, message) {\n  if (this.maxlengthValidator) {\n    this.validators = this.validators.filter(function(v) {\n      return v.validator !== this.maxlengthValidator;\n    }, this);\n  }\n\n  if (value !== null && value !== undefined) {\n    var msg = message || MongooseError.messages.String.maxlength;\n    msg = msg.replace(/{MAXLENGTH}/, value);\n    this.validators.push({\n      validator: this.maxlengthValidator = function(v) {\n        return v === null || v.length <= value;\n      },\n      message: msg,\n      type: 'maxlength',\n      maxlength: value\n    });\n  }\n\n  return this;\n};\n\n/**\n * Sets a regexp validator.\n *\n * Any value that does not pass `regExp`.test(val) will fail validation.\n *\n * ####Example:\n *\n *     var s = new Schema({ name: { type: String, match: /^a/ }})\n *     var M = db.model('M', s)\n *     var m = new M({ name: 'I am invalid' })\n *     m.validate(function (err) {\n *       console.error(String(err)) // \"ValidationError: Path `name` is invalid (I am invalid).\"\n *       m.name = 'apples'\n *       m.validate(function (err) {\n *         assert.ok(err) // success\n *       })\n *     })\n *\n *     // using a custom error message\n *     var match = [ /\\.html$/, \"That file doesn't end in .html ({VALUE})\" ];\n *     var s = new Schema({ file: { type: String, match: match }})\n *     var M = db.model('M', s);\n *     var m = new M({ file: 'invalid' });\n *     m.validate(function (err) {\n *       console.log(String(err)) // \"ValidationError: That file doesn't end in .html (invalid)\"\n *     })\n *\n * Empty strings, `undefined`, and `null` values always pass the match validator. If you require these values, enable the `required` validator also.\n *\n *     var s = new Schema({ name: { type: String, match: /^a/, required: true }})\n *\n * @param {RegExp} regExp regular expression to test against\n * @param {String} [message] optional custom error message\n * @return {SchemaType} this\n * @see Customized Error Messages #error_messages_MongooseError-messages\n * @api public\n */\n\nSchemaString.prototype.match = function match(regExp, message) {\n  // yes, we allow multiple match validators\n\n  var msg = message || MongooseError.messages.String.match;\n\n  var matchValidator = function(v) {\n    if (!regExp) {\n      return false;\n    }\n\n    var ret = ((v != null && v !== '')\n        ? regExp.test(v)\n        : true);\n    return ret;\n  };\n\n  this.validators.push({\n    validator: matchValidator,\n    message: msg,\n    type: 'regexp',\n    regexp: regExp\n  });\n  return this;\n};\n\n/**\n * Check if the given value satisfies the `required` validator. The value is\n * considered valid if it is a string (that is, not `null` or `undefined`) and\n * has positive length. The `required` validator **will** fail for empty\n * strings.\n *\n * @param {Any} value\n * @param {Document} doc\n * @return {Boolean}\n * @api public\n */\n\nSchemaString.prototype.checkRequired = function checkRequired(value, doc) {\n  if (SchemaType._isRef(this, value, doc, true)) {\n    return !!value;\n  }\n  return (value instanceof String || typeof value === 'string') && value.length;\n};\n\n/**\n * Casts to String\n *\n * @api private\n */\n\nSchemaString.prototype.cast = function(value, doc, init) {\n  if (SchemaType._isRef(this, value, doc, init)) {\n    // wait! we may need to cast this to a document\n\n    if (value === null || value === undefined) {\n      return value;\n    }\n\n    // lazy load\n    Document || (Document = require('./../document'));\n\n    if (value instanceof Document) {\n      value.$__.wasPopulated = true;\n      return value;\n    }\n\n    // setting a populated path\n    if (typeof value === 'string') {\n      return value;\n    } else if (Buffer.isBuffer(value) || !utils.isObject(value)) {\n      throw new CastError('string', value, this.path);\n    }\n\n    // Handle the case where user directly sets a populated\n    // path to a plain object; cast to the Model used in\n    // the population query.\n    var path = doc.$__fullPath(this.path);\n    var owner = doc.ownerDocument ? doc.ownerDocument() : doc;\n    var pop = owner.populated(path, true);\n    var ret = new pop.options.model(value);\n    ret.$__.wasPopulated = true;\n    return ret;\n  }\n\n  // If null or undefined\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (typeof value !== 'undefined') {\n    // handle documents being passed\n    if (value._id && typeof value._id === 'string') {\n      return value._id;\n    }\n\n    // Re: gh-647 and gh-3030, we're ok with casting using `toString()`\n    // **unless** its the default Object.toString, because \"[object Object]\"\n    // doesn't really qualify as useful data\n    if (value.toString && value.toString !== Object.prototype.toString) {\n      return value.toString();\n    }\n  }\n\n  throw new CastError('string', value, this.path);\n};\n\n/*!\n * ignore\n */\n\nfunction handleSingle(val) {\n  return this.castForQuery(val);\n}\n\nfunction handleArray(val) {\n  var _this = this;\n  if (!Array.isArray(val)) {\n    return [this.castForQuery(val)];\n  }\n  return val.map(function(m) {\n    return _this.castForQuery(m);\n  });\n}\n\nSchemaString.prototype.$conditionalHandlers =\n    utils.options(SchemaType.prototype.$conditionalHandlers, {\n      $all: handleArray,\n      $gt: handleSingle,\n      $gte: handleSingle,\n      $lt: handleSingle,\n      $lte: handleSingle,\n      $options: handleSingle,\n      $regex: handleSingle,\n      $not: handleSingle\n    });\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $conditional\n * @param {any} [val]\n * @api private\n */\n\nSchemaString.prototype.castForQuery = function($conditional, val) {\n  var handler;\n  if (arguments.length === 2) {\n    handler = this.$conditionalHandlers[$conditional];\n    if (!handler) {\n      throw new Error('Can\\'t use ' + $conditional + ' with String.');\n    }\n    return handler.call(this, val);\n  }\n  val = $conditional;\n  if (Object.prototype.toString.call(val) === '[object RegExp]') {\n    return val;\n  }\n\n  return this._castForQuery(val);\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = SchemaString;\n"]},"metadata":{},"sourceType":"script"}
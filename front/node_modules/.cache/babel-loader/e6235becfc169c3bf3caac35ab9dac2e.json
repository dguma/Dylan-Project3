{"ast":null,"code":"'use strict';\n\nvar crypto = require('crypto');\n\nvar json = {\n  stringify: function (obj, replacer, spacing) {\n    return JSON.stringify(obj, replacer || null, spacing || 2);\n  },\n  parse: JSON.parse\n};\nmodule.exports = Secure;\n/**\n * @constructor\n * Simple Object used to serialize and deserialize\n */\n\nfunction Secure(opts) {\n  opts = opts || {};\n  this.secret = typeof opts !== 'string' ? opts.secret : opts;\n  this.format = opts.format || json;\n  this.alg = opts.alg || 'aes-256-ctr';\n  if (!this.secret) throw new Error('Secret is a required option');\n}\n\nSecure.prototype.encrypt = function encrypt(data, callback) {\n  var self = this;\n  return Object.keys(data).reduce(function (acc, key) {\n    var value = self.format.stringify(data[key]);\n    acc[key] = {\n      alg: self.alg,\n      value: cipherConvert(value, {\n        alg: self.alg,\n        secret: self.secret,\n        encs: {\n          input: 'utf8',\n          output: 'hex'\n        }\n      })\n    };\n    return acc;\n  }, {});\n};\n\nSecure.prototype.decrypt = function decrypt(data, callback) {\n  var self = this;\n  return Object.keys(data).reduce(function (acc, key) {\n    var decrypted = cipherConvert(data[key].value, {\n      alg: data[key].alg || self.alg,\n      secret: self.secret,\n      encs: {\n        input: 'hex',\n        output: 'utf8'\n      }\n    });\n    acc[key] = self.format.parse(decrypted);\n    return acc;\n  }, {});\n}; //\n// ### function cipherConvert (contents, opts)\n// Returns the result of the cipher operation\n// on the contents contents.\n//\n\n\nfunction cipherConvert(contents, opts) {\n  var encs = opts.encs;\n  var cipher = crypto.createCipher(opts.alg, opts.secret);\n  return cipher.update(contents, encs.input, encs.output) + cipher.final(encs.output);\n}","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/secure-keys/index.js"],"names":["crypto","require","json","stringify","obj","replacer","spacing","JSON","parse","module","exports","Secure","opts","secret","format","alg","Error","prototype","encrypt","data","callback","self","Object","keys","reduce","acc","key","value","cipherConvert","encs","input","output","decrypt","decrypted","contents","cipher","createCipher","update","final"],"mappings":"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","sourcesContent":["'use strict';\n\nvar crypto = require('crypto');\n\nvar json = {\n  stringify: function (obj, replacer, spacing) {\n    return JSON.stringify(obj, replacer || null, spacing || 2)\n  },\n  parse: JSON.parse\n};\n\nmodule.exports = Secure;\n/**\n * @constructor\n * Simple Object used to serialize and deserialize\n */\nfunction Secure(opts) {\n  opts = opts || {};\n  this.secret = typeof opts !== 'string'\n    ? opts.secret\n    : opts;\n\n  this.format = opts.format || json;\n  this.alg = opts.alg || 'aes-256-ctr';\n\n  if (!this.secret) throw new Error('Secret is a required option');\n}\n\nSecure.prototype.encrypt = function encrypt(data, callback) {\n  var self = this;\n\n  return Object.keys(data).reduce(function (acc, key) {\n    var value = self.format.stringify(data[key]);\n    acc[key] = {\n      alg: self.alg,\n      value: cipherConvert(value, {\n        alg: self.alg,\n        secret: self.secret,\n        encs: { input: 'utf8', output: 'hex' }\n      })\n    };\n\n    return acc;\n  }, {});\n\n };\n\nSecure.prototype.decrypt = function decrypt(data, callback) {\n  var self = this;\n\n  return Object.keys(data).reduce(function (acc, key) {\n    var decrypted = cipherConvert(data[key].value, {\n      alg: data[key].alg || self.alg,\n      secret: self.secret,\n      encs: { input: 'hex', output: 'utf8' }\n    });\n\n    acc[key] = self.format.parse(decrypted);\n    return acc;\n  }, {});\n\n };\n\n//\n// ### function cipherConvert (contents, opts)\n// Returns the result of the cipher operation\n// on the contents contents.\n//\nfunction cipherConvert(contents, opts) {\n  var encs = opts.encs;\n  var cipher = crypto.createCipher(opts.alg, opts.secret);\n  return cipher.update(contents, encs.input, encs.output)\n    + cipher.final(encs.output);\n}\n"]},"metadata":{},"sourceType":"script"}
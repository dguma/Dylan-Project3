{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar SchemaType = require('../schematype');\n\nvar utils = require('../utils');\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    var def = options.default;\n\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && utils.isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function () {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n}\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\n\n\nMixed.schemaName = 'Mixed';\n/*!\n * Inherits from SchemaType.\n */\n\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function (val) {\n  return val;\n};\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\n\nMixed.prototype.castForQuery = function ($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n\n  return $cond;\n};\n/*!\n * Module exports.\n */\n\n\nmodule.exports = Mixed;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/schema/mixed.js"],"names":["SchemaType","require","utils","Mixed","path","options","default","def","Array","isArray","length","shared","isObject","Object","keys","call","schemaName","prototype","create","constructor","cast","val","castForQuery","$cond","arguments","module","exports"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASE,KAAT,CAAeC,IAAf,EAAqBC,OAArB,EAA8B;AAC5B,MAAIA,OAAO,IAAIA,OAAO,CAACC,OAAvB,EAAgC;AAC9B,QAAIC,GAAG,GAAGF,OAAO,CAACC,OAAlB;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,CAACG,MAAJ,KAAe,CAAzC,EAA4C;AAC1C;AACAL,MAAAA,OAAO,CAACC,OAAR,GAAkBE,KAAlB;AACD,KAHD,MAGO,IAAI,CAACH,OAAO,CAACM,MAAT,IAAmBT,KAAK,CAACU,QAAN,CAAeL,GAAf,CAAnB,IAA0CM,MAAM,CAACC,IAAP,CAAYP,GAAZ,EAAiBG,MAAjB,KAA4B,CAA1E,EAA6E;AAClF;AACAL,MAAAA,OAAO,CAACC,OAAR,GAAkB,YAAW;AAC3B,eAAO,EAAP;AACD,OAFD;AAGD;AACF;;AAEDN,EAAAA,UAAU,CAACe,IAAX,CAAgB,IAAhB,EAAsBX,IAAtB,EAA4BC,OAA5B,EAAqC,OAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAF,KAAK,CAACa,UAAN,GAAmB,OAAnB;AAEA;AACA;AACA;;AACAb,KAAK,CAACc,SAAN,GAAkBJ,MAAM,CAACK,MAAP,CAAclB,UAAU,CAACiB,SAAzB,CAAlB;AACAd,KAAK,CAACc,SAAN,CAAgBE,WAAhB,GAA8BhB,KAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,KAAK,CAACc,SAAN,CAAgBG,IAAhB,GAAuB,UAASC,GAAT,EAAc;AACnC,SAAOA,GAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAlB,KAAK,CAACc,SAAN,CAAgBK,YAAhB,GAA+B,UAASC,KAAT,EAAgBF,GAAhB,EAAqB;AAClD,MAAIG,SAAS,CAACd,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAOW,GAAP;AACD;;AACD,SAAOE,KAAP;AACD,CALD;AAOA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiBvB,KAAjB","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar SchemaType = require('../schematype');\nvar utils = require('../utils');\n\n/**\n * Mixed SchemaType constructor.\n *\n * @param {String} path\n * @param {Object} options\n * @inherits SchemaType\n * @api public\n */\n\nfunction Mixed(path, options) {\n  if (options && options.default) {\n    var def = options.default;\n    if (Array.isArray(def) && def.length === 0) {\n      // make sure empty array defaults are handled\n      options.default = Array;\n    } else if (!options.shared && utils.isObject(def) && Object.keys(def).length === 0) {\n      // prevent odd \"shared\" objects between documents\n      options.default = function() {\n        return {};\n      };\n    }\n  }\n\n  SchemaType.call(this, path, options, 'Mixed');\n}\n\n/**\n * This schema type's name, to defend against minifiers that mangle\n * function names.\n *\n * @api public\n */\nMixed.schemaName = 'Mixed';\n\n/*!\n * Inherits from SchemaType.\n */\nMixed.prototype = Object.create(SchemaType.prototype);\nMixed.prototype.constructor = Mixed;\n\n/**\n * Casts `val` for Mixed.\n *\n * _this is a no-op_\n *\n * @param {Object} value to cast\n * @api private\n */\n\nMixed.prototype.cast = function(val) {\n  return val;\n};\n\n/**\n * Casts contents for queries.\n *\n * @param {String} $cond\n * @param {any} [val]\n * @api private\n */\n\nMixed.prototype.castForQuery = function($cond, val) {\n  if (arguments.length === 2) {\n    return val;\n  }\n  return $cond;\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = Mixed;\n"]},"metadata":{},"sourceType":"script"}
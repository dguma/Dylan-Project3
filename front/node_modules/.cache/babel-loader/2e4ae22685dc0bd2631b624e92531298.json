{"ast":null,"code":"/*!\n * Module dependencies.\n */\nvar MongooseArray = require('./array'),\n    ObjectId = require('./objectid'),\n    ObjectIdSchema = require('../schema/objectid'),\n    utils = require('../utils'),\n    Document = require('../document');\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\n\nfunction MongooseDocumentArray(values, path, doc) {\n  var arr = [].concat(values);\n  arr._path = path;\n  var props = {\n    isMongooseArray: true,\n    isMongooseDocumentArray: true,\n    validators: [],\n    _atomics: {},\n    _schema: void 0,\n    _handlers: void 0\n  }; // Values always have to be passed to the constructor to initialize, since\n  // otherwise MongooseArray#push will mark the array as modified to the parent.\n\n  var keysMA = Object.keys(MongooseArray.mixin);\n  var numKeys = keysMA.length;\n\n  for (var j = 0; j < numKeys; ++j) {\n    arr[keysMA[j]] = MongooseArray.mixin[keysMA[j]];\n  }\n\n  var keysMDA = Object.keys(MongooseDocumentArray.mixin);\n  numKeys = keysMDA.length;\n\n  for (var i = 0; i < numKeys; ++i) {\n    arr[keysMDA[i]] = MongooseDocumentArray.mixin[keysMDA[i]];\n  }\n\n  var keysP = Object.keys(props);\n  numKeys = keysP.length;\n\n  for (var k = 0; k < numKeys; ++k) {\n    arr[keysP[k]] = props[keysP[k]];\n  } // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n\n\n  if (doc && doc instanceof Document) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n    arr._handlers = {\n      isNew: arr.notify('isNew'),\n      save: arr.notify('save')\n    };\n    doc.on('save', arr._handlers.save);\n    doc.on('isNew', arr._handlers.isNew);\n  }\n\n  return arr;\n}\n/*!\n * Inherits from MongooseArray\n */\n// MongooseDocumentArray.mixin = Object.create( MongooseArray.mixin );\n\n\nMongooseDocumentArray.mixin = {\n  /*!\n   * ignore\n   */\n  toBSON: function () {\n    return this.toObject({\n      transform: false,\n      virtuals: false,\n      _skipDepopulateTopLevel: true,\n      depopulate: true,\n      flattenDecimals: false\n    });\n  },\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n  _cast: function (value, index) {\n    var Constructor = this._schema.casterConstructor;\n\n    if (value instanceof Constructor || value && value.constructor && value.constructor.baseCasterConstructor === Constructor) {\n      if (!(value.__parent && value.__parentArray)) {\n        // value may have been created using array.create()\n        value.__parent = this._parent;\n        value.__parentArray = this;\n      }\n\n      value.__index = index;\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    } // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n\n\n    if (Buffer.isBuffer(value) || value instanceof ObjectId || !utils.isObject(value)) {\n      value = {\n        _id: value\n      };\n    }\n\n    if (value && Constructor.discriminators && Constructor.schema.options.discriminatorKey && typeof value[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n      Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n    }\n\n    return new Constructor(value, this, undefined, undefined, index);\n  },\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     var embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  id: function (id) {\n    var casted, sid, _id;\n\n    try {\n      var casted_ = ObjectIdSchema.prototype.cast.call({}, id);\n\n      if (casted_) {\n        casted = String(casted_);\n      }\n    } catch (e) {\n      casted = null;\n    }\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (!this[i]) {\n        continue;\n      }\n\n      _id = this[i].get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n\n        if (sid == _id._id) {\n          return this[i];\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (utils.deepEqual(id, _id)) {\n          return this[i];\n        }\n      } else if (casted == _id) {\n        return this[i];\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  toObject: function (options) {\n    return this.map(function (doc) {\n      return doc && doc.toObject(options) || null;\n    });\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  inspect: function () {\n    return Array.prototype.slice.call(this);\n  },\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n  create: function (obj) {\n    var Constructor = this._schema.casterConstructor;\n\n    if (obj && Constructor.discriminators && Constructor.schema.options.discriminatorKey && typeof obj[Constructor.schema.options.discriminatorKey] === 'string' && Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n      Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n    }\n\n    return new Constructor(obj);\n  },\n\n  /**\n   * Creates a fn that notifies all child docs of `event`.\n   *\n   * @param {String} event\n   * @return {Function}\n   * @method notify\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n  notify: function notify(event) {\n    var _this = this;\n\n    return function notify(val) {\n      var i = _this.length;\n\n      while (i--) {\n        if (!_this[i]) {\n          continue;\n        }\n\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n\n          default:\n            // NO-OP\n            break;\n        }\n\n        _this[i].emit(event, val);\n      }\n    };\n  }\n};\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;","map":{"version":3,"sources":["/home/pumaguma/Desktop/project-draft/front/node_modules/mongoose/lib/types/documentarray.js"],"names":["MongooseArray","require","ObjectId","ObjectIdSchema","utils","Document","MongooseDocumentArray","values","path","doc","arr","concat","_path","props","isMongooseArray","isMongooseDocumentArray","validators","_atomics","_schema","_handlers","keysMA","Object","keys","mixin","numKeys","length","j","keysMDA","i","keysP","k","_parent","schema","isNew","notify","save","on","toBSON","toObject","transform","virtuals","_skipDepopulateTopLevel","depopulate","flattenDecimals","_cast","value","index","Constructor","casterConstructor","constructor","baseCasterConstructor","__parent","__parentArray","__index","undefined","Buffer","isBuffer","isObject","_id","discriminators","options","discriminatorKey","id","casted","sid","casted_","prototype","cast","call","String","e","l","get","deepEqual","map","inspect","Array","slice","create","obj","event","_this","val","emit","module","exports"],"mappings":"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","sourcesContent":["/*!\n * Module dependencies.\n */\n\nvar MongooseArray = require('./array'),\n    ObjectId = require('./objectid'),\n    ObjectIdSchema = require('../schema/objectid'),\n    utils = require('../utils'),\n    Document = require('../document');\n\n/**\n * DocumentArray constructor\n *\n * @param {Array} values\n * @param {String} path the path to this array\n * @param {Document} doc parent document\n * @api private\n * @return {MongooseDocumentArray}\n * @inherits MongooseArray\n * @see http://bit.ly/f6CnZU\n */\n\nfunction MongooseDocumentArray(values, path, doc) {\n  var arr = [].concat(values);\n  arr._path = path;\n\n  var props = {\n    isMongooseArray: true,\n    isMongooseDocumentArray: true,\n    validators: [],\n    _atomics: {},\n    _schema: void 0,\n    _handlers: void 0\n  };\n\n  // Values always have to be passed to the constructor to initialize, since\n  // otherwise MongooseArray#push will mark the array as modified to the parent.\n  var keysMA = Object.keys(MongooseArray.mixin);\n  var numKeys = keysMA.length;\n  for (var j = 0; j < numKeys; ++j) {\n    arr[keysMA[j]] = MongooseArray.mixin[keysMA[j]];\n  }\n\n  var keysMDA = Object.keys(MongooseDocumentArray.mixin);\n  numKeys = keysMDA.length;\n  for (var i = 0; i < numKeys; ++i) {\n    arr[keysMDA[i]] = MongooseDocumentArray.mixin[keysMDA[i]];\n  }\n\n  var keysP = Object.keys(props);\n  numKeys = keysP.length;\n  for (var k = 0; k < numKeys; ++k) {\n    arr[keysP[k]] = props[keysP[k]];\n  }\n\n  // Because doc comes from the context of another function, doc === global\n  // can happen if there was a null somewhere up the chain (see #3020 && #3034)\n  // RB Jun 17, 2015 updated to check for presence of expected paths instead\n  // to make more proof against unusual node environments\n  if (doc && doc instanceof Document) {\n    arr._parent = doc;\n    arr._schema = doc.schema.path(path);\n    arr._handlers = {\n      isNew: arr.notify('isNew'),\n      save: arr.notify('save')\n    };\n\n    doc.on('save', arr._handlers.save);\n    doc.on('isNew', arr._handlers.isNew);\n  }\n\n  return arr;\n}\n\n/*!\n * Inherits from MongooseArray\n */\n// MongooseDocumentArray.mixin = Object.create( MongooseArray.mixin );\nMongooseDocumentArray.mixin = {\n  /*!\n   * ignore\n   */\n  toBSON: function() {\n    return this.toObject({\n      transform: false,\n      virtuals: false,\n      _skipDepopulateTopLevel: true,\n      depopulate: true,\n      flattenDecimals: false\n    });\n  },\n\n  /**\n   * Overrides MongooseArray#cast\n   *\n   * @method _cast\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  _cast: function(value, index) {\n    var Constructor = this._schema.casterConstructor;\n    if (value instanceof Constructor ||\n        // Hack re: #5001, see #5005\n        (value && value.constructor && value.constructor.baseCasterConstructor === Constructor)) {\n      if (!(value.__parent && value.__parentArray)) {\n        // value may have been created using array.create()\n        value.__parent = this._parent;\n        value.__parentArray = this;\n      }\n      value.__index = index;\n      return value;\n    }\n\n    if (value === undefined || value === null) {\n      return null;\n    }\n\n    // handle cast('string') or cast(ObjectId) etc.\n    // only objects are permitted so we can safely assume that\n    // non-objects are to be interpreted as _id\n    if (Buffer.isBuffer(value) ||\n        value instanceof ObjectId || !utils.isObject(value)) {\n      value = {_id: value};\n    }\n\n    if (value &&\n        Constructor.discriminators &&\n        Constructor.schema.options.discriminatorKey &&\n        typeof value[Constructor.schema.options.discriminatorKey] === 'string' &&\n        Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]]) {\n      Constructor = Constructor.discriminators[value[Constructor.schema.options.discriminatorKey]];\n    }\n\n    return new Constructor(value, this, undefined, undefined, index);\n  },\n\n  /**\n   * Searches array items for the first document with a matching _id.\n   *\n   * ####Example:\n   *\n   *     var embeddedDoc = m.array.id(some_id);\n   *\n   * @return {EmbeddedDocument|null} the subdocument or null if not found.\n   * @param {ObjectId|String|Number|Buffer} id\n   * @TODO cast to the _id based on schema for proper comparison\n   * @method id\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  id: function(id) {\n    var casted,\n        sid,\n        _id;\n\n    try {\n      var casted_ = ObjectIdSchema.prototype.cast.call({}, id);\n      if (casted_) {\n        casted = String(casted_);\n      }\n    } catch (e) {\n      casted = null;\n    }\n\n    for (var i = 0, l = this.length; i < l; i++) {\n      if (!this[i]) {\n        continue;\n      }\n      _id = this[i].get('_id');\n\n      if (_id === null || typeof _id === 'undefined') {\n        continue;\n      } else if (_id instanceof Document) {\n        sid || (sid = String(id));\n        if (sid == _id._id) {\n          return this[i];\n        }\n      } else if (!(id instanceof ObjectId) && !(_id instanceof ObjectId)) {\n        if (utils.deepEqual(id, _id)) {\n          return this[i];\n        }\n      } else if (casted == _id) {\n        return this[i];\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Returns a native js Array of plain js objects\n   *\n   * ####NOTE:\n   *\n   * _Each sub-document is converted to a plain object by calling its `#toObject` method._\n   *\n   * @param {Object} [options] optional options to pass to each documents `toObject` method call during conversion\n   * @return {Array}\n   * @method toObject\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  toObject: function(options) {\n    return this.map(function(doc) {\n      return doc && doc.toObject(options) || null;\n    });\n  },\n\n  /**\n   * Helper for console.log\n   *\n   * @method inspect\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  inspect: function() {\n    return Array.prototype.slice.call(this);\n  },\n\n  /**\n   * Creates a subdocument casted to this schema.\n   *\n   * This is the same subdocument constructor used for casting.\n   *\n   * @param {Object} obj the value to cast to this arrays SubDocument schema\n   * @method create\n   * @api public\n   * @receiver MongooseDocumentArray\n   */\n\n  create: function(obj) {\n    var Constructor = this._schema.casterConstructor;\n    if (obj &&\n        Constructor.discriminators &&\n        Constructor.schema.options.discriminatorKey &&\n        typeof obj[Constructor.schema.options.discriminatorKey] === 'string' &&\n        Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]]) {\n      Constructor = Constructor.discriminators[obj[Constructor.schema.options.discriminatorKey]];\n    }\n\n    return new Constructor(obj);\n  },\n\n  /**\n   * Creates a fn that notifies all child docs of `event`.\n   *\n   * @param {String} event\n   * @return {Function}\n   * @method notify\n   * @api private\n   * @receiver MongooseDocumentArray\n   */\n\n  notify: function notify(event) {\n    var _this = this;\n    return function notify(val) {\n      var i = _this.length;\n      while (i--) {\n        if (!_this[i]) {\n          continue;\n        }\n        switch (event) {\n          // only swap for save event for now, we may change this to all event types later\n          case 'save':\n            val = _this[i];\n            break;\n          default:\n            // NO-OP\n            break;\n        }\n        _this[i].emit(event, val);\n      }\n    };\n  }\n\n};\n\n/*!\n * Module exports.\n */\n\nmodule.exports = MongooseDocumentArray;\n"]},"metadata":{},"sourceType":"script"}